ï
|/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/ValidationService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
{ 
public 
class 
ValidationService 
{ 
private		 	
readonly		
 
IServiceProvider		 #
_serviceProvider		$ 4
;		4 5
public 
ValidationService	 
( 
IServiceProvider +
serviceProvider, ;
); <
{ 
_serviceProvider 
= 
serviceProvider %
;% &
} 	
public 
ValidationResult	 
Validate "
<" #
T# $
>$ %
(% &
T& '
instance( 0
)0 1
{ 
var 
	validator 
= 
_serviceProvider #
.# $

GetService$ .
<. /

IValidator/ 9
<9 :
T: ;
>; <
>< =
(= >
)> ?
;? @
return 	
	validator
 
! 
. 
Validate 
( 
instance &
)& '
;' (
} 
} 
} †

é/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/UpdateUserDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 

class "
UpdateUserDtoValidator '
:( )
AbstractValidator* ;
<; <
UpdateUserDto< I
>I J
{ 
public "
UpdateUserDtoValidator %
(% &
)& '
{		 	
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
UserId

 !
)

! "
.

" #
NotEmpty

# +
(

+ ,
)

, -
.

- .
WithMessage

. 9
(

9 :
$str

: O
)

O P
;

P Q
RuleFor 
( 
x 
=> 
x 
. 
UserId !
)! "
." #
Length# )
() *
$num* ,
), -
.- .
WithMessage. 9
(9 :
$str: n
)n o
;o p
} 	
} 
} ˆ
ê/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/TokenRequestDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 
class $
TokenRequestDtoValidator &
:' (
AbstractValidator) :
<: ;$
TokenRequestParameterDto; S
>S T
{ 
public $
TokenRequestDtoValidator	 !
(! "
)" #
{ 
RuleFor 
( 
x 
=> 
x 
. 
phone_OR_email )
)) *
.* +
NotEmpty+ 3
(3 4
)4 5
.5 6
WithMessage6 A
(A B
$strB y
)y z
;z {
}		 	
}

 
public 

class *
VerifyTokenRequestDtoValidator /
:0 1
AbstractValidator2 C
<C D!
VerifyTokenRequestDtoD Y
>Y Z
{ 
public *
VerifyTokenRequestDtoValidator -
(- .
). /
{ 	
RuleFor 
( 
x 
=> 
x 
. 
phone_OR_email )
)) *
.* +
NotEmpty+ 3
(3 4
)4 5
.5 6
WithMessage6 A
(A B
$strB y
)y z
;z {
RuleFor 
( 
x 
=> 
x 
. 
token  
)  !
. 
Length 
( 
$num 
) 
. 
WithMessage &
(& '
$str' X
)X Y
. 
Matches 
( 
$str !
)! "
." #
WithMessage# .
(. /
$str/ \
)\ ]
;] ^
} 	
} 
} œ"
ú/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/StaffRegistrationRequestDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 
class 0
$StaffRegistrationRequestDtoValidator 2
:3 4
AbstractValidator5 F
<F G'
StaffRegistrationRequestDtoG b
>b c
{ 
public 0
$StaffRegistrationRequestDtoValidator	 -
(- .
). /
{		 
RuleFor

 
(

 
x

 
=>

 
x

 
.

 %
StaffIdentificationNumber

 4
)

4 5
.

5 6
NotEmpty

6 >
(

> ?
)

? @
.

@ A
Length

A G
(

G H
$num

H I
,

I J
$num

K L
)

L M
.

M N
Matches

N U
(

U V
$str

V m
)

m n
;

n o
RuleFor 
( 
x 
=> 
x 
. 
DepartmentId '
)' (
.( ) 
GreaterThanOrEqualTo) =
(= >
$num> ?
)? @
;@ A
RuleFor 
( 
x 
=> 
x 
. 
UnitId !
)! "
." # 
GreaterThanOrEqualTo# 7
(7 8
$num8 9
)9 :
;: ;
RuleFor 
( 
x 
=> 
x 
. 
	FirstName $
)$ %
.% &
NotEmpty& .
(. /
)/ 0
.0 1
Length1 7
(7 8
$num8 9
,9 :
$num; =
)= >
;> ?
RuleFor 
( 
x 
=> 
x 
. 

MiddleName %
)% &
.& '
Length' -
(- .
$num. /
,/ 0
$num1 4
)4 5
;5 6
RuleFor 
( 
x 
=> 
x 
. 
LastName #
)# $
.$ %
NotEmpty% -
(- .
). /
./ 0
Length0 6
(6 7
$num7 8
,8 9
$num: =
)= >
;> ?
RuleFor 
( 
x 
=> 
x 
. 
EmailAddress '
)' (
.( )
NotEmpty) 1
(1 2
)2 3
.3 4
WithMessage4 ?
(? @
$str@ [
)[ \
;\ ]
RuleFor 
( 
x 
=> 
x 
. 
UserName #
)# $
.$ %
NotEmpty% -
(- .
). /
./ 0
WithMessage0 ;
(; <
$str< S
)S T
;T U
RuleFor 
( 
x 
=> 
x 
. 
UserName #
)# $
.$ %
Equal% *
(* +
x+ ,
=>- /
x0 1
.1 2
EmailAddress2 >
)> ?
.? @
WithMessage@ K
(K L
$strL z
)z {
;{ |
RuleFor 
( 
x 
=> 
x 
. 
PhoneNumber &
)& '
.' (
NotEmpty( 0
(0 1
)1 2
.2 3
Length3 9
(9 :
$num: <
)< =
.= >
Matches> E
(E F
$str	F â
)
â ä
.
ä ã
WithMessage
ã ñ
(
ñ ó
$str
ó Æ
)
Æ Ø
;
Ø ∞
RuleFor 
( 
x 
=> 
x 
. 
	ChannelId $
)$ %
.% & 
GreaterThanOrEqualTo& :
(: ;
$num; <
)< =
.= >
WithMessage> I
(I J
$strJ `
)` a
;a b
} 	
} 
} Ÿ
â/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/RolesDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 
class 
RolesDtoValidator 
:  !
AbstractValidator" 3
<3 4
RolesDto4 <
>< =
{ 
public 
RolesDtoValidator	 
( 
) 
{		 
RuleFor

 

(


 
x

 
=>

 
x

 
.

 
RoleName

 
)

 
.

 
NotEmpty

 $
(

$ %
)

% &
;

& '
} 	
} 
public 

class #
RolesCreateDtoValidator (
:) *
AbstractValidator+ <
<< =
RolesCreateDto= K
>K L
{ 
public #
RolesCreateDtoValidator &
(& '
)' (
{ 	
RuleFor 
( 
x 
=> 
x 
. 
RoleName #
)# $
.$ %
NotEmpty% -
(- .
). /
;/ 0
RuleFor 
( 
x 
=> 
x 
. 
	CreatedBy %
)% &
.& '
NotEmpty' /
(/ 0
)0 1
;1 2
} 	
} 
public 

class #
RolesUpdateDtoValidator (
:) *
AbstractValidator+ <
<< =
RolesUpdateDto= K
>K L
{ 
public #
RolesUpdateDtoValidator &
(& '
)' (
{ 	
RuleFor 
( 
x 
=> 
x 
. 
RoleId !
)! "
." #
NotEmpty# +
(+ ,
), -
;- .
RuleFor 
( 
x 
=> 
x 
. 
RoleName #
)# $
.$ %
NotEmpty% -
(- .
). /
;/ 0
RuleFor 
( 
x 
=> 
x 
. 

ModifiedBy %
)% &
.& '
NotEmpty' /
(/ 0
)0 1
;1 2
} 	
}   
public"" 

class"" #
RolesDeleteDtoValidator"" (
:"") *
AbstractValidator""+ <
<""< =
RolesDeleteDto""= K
>""K L
{## 
public$$ #
RolesDeleteDtoValidator$$ &
($$& '
)$$' (
{%% 	
RuleFor&& 
(&& 
x&& 
=>&& 
x&& 
.&& 
RoleId&& !
)&&! "
.&&" #
NotEmpty&&# +
(&&+ ,
)&&, -
;&&- .
}'' 	
}(( 
public** 

class** %
RolesApprovalDtoValidator** *
:**+ ,
AbstractValidator**- >
<**> ?
RolesApprovalDto**? O
>**O P
{++ 
public,, %
RolesApprovalDtoValidator,, (
(,,( )
),,) *
{-- 	
RuleFor.. 
(.. 
x.. 
=>.. 
x.. 
... 
RoleId.. !
)..! "
..." #
NotEmpty..# +
(..+ ,
).., -
;..- .
RuleFor// 
(// 
x// 
=>// 
x// 
.// 

ApprovedBy// %
)//% &
.//& '
NotEmpty//' /
(/// 0
)//0 1
;//1 2
}00 	
}11 
}44 Ó
ò/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/ResetPasswordRequestDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 

class ,
 ResetPasswordRequestDtoValidator 1
:2 3
AbstractValidator4 E
<E F#
ResetPasswordRequestDtoF ]
>] ^
{ 
public ,
 ResetPasswordRequestDtoValidator /
(/ 0
)0 1
{ 	
RuleFor 
( 
x 
=> 
x 
. 
Phone_OR_Email )
)) *
.* +
NotEmpty+ 3
(3 4
)4 5
.5 6
WithMessage6 A
(A B
$strB y
)y z
;z {
RuleFor		 
(		 
x		 
=>		 
x		 
.		 
Token		  
)		  !
.

 
Length

 
(

 
$num

 
)

 
.

 
WithMessage

 &
(

& '
$str

' X
)

X Y
. 
Matches 
( 
$str !
)! "
." #
WithMessage# .
(. /
$str/ \
)\ ]
;] ^
RuleFor 
( 
x 
=> 
x 
. 
NewPassword &
)& '
.' (
MinimumLength( 5
(5 6
$num6 7
)7 8
;8 9
RuleFor 
( 
x 
=> 
x 
. 
ConfirmNewPassword -
)- .
.. /
MinimumLength/ <
(< =
$num= >
)> ?
;? @
RuleFor 
( 
x 
=> 
x 
. 
NewPassword &
)& '
.' (
NotEmpty( 0
(0 1
)1 2
.2 3
WithMessage3 >
(> ?
$str? Y
)Y Z
;Z [
RuleFor 
( 
x 
=> 
x 
. 
ConfirmNewPassword -
)- .
.. /
NotEmpty/ 7
(7 8
)8 9
.9 :
Equal: ?
(? @
x@ A
=>B D
xE F
.F G
NewPasswordG R
)R S
.S T
WithMessageT _
(_ `
$str	` í
)
í ì
;
ì î
} 	
} 
} ﬂ
õ/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/PartnerBankTokenRequestDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 

class /
#PartnerBankTokenRequestDtoValidator 4
:5 6
AbstractValidator7 H
<H I&
PartnerBankTokenRequestDtoI c
>c d
{ 
public /
#PartnerBankTokenRequestDtoValidator 2
(2 3
)3 4
{ 	
RuleFor 
( 
x 
=> 
x 
. 
EmailAddress '
)' (
.( )
NotEmpty) 1
(1 2
)2 3
.3 4
EmailAddress4 @
(@ A
)A B
.B C
MatchesC J
(J K
$strK r
)r s
;s t
}

 	
} 
} Å
£/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/PartnerBankResetPasswordRequestDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 
class 7
+PartnerBankResetPasswordRequestDtoValidator 9
:: ;
AbstractValidator< M
<M N#
ResetPasswordRequestDtoN e
>e f
{ 
public 7
+PartnerBankResetPasswordRequestDtoValidator	 4
(4 5
)5 6
{		 
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
Phone_OR_Email

 )
)

) *
.

* +
NotEmpty

+ 3
(

3 4
)

4 5
.

5 6
EmailAddress

6 B
(

B C
)

C D
;

D E
RuleFor 
( 
x 
=> 
x 
. 
Token  
)  !
.! "
NotEmpty" *
(* +
)+ ,
;, -
RuleFor 
( 
x 
=> 
x 
. 
NewPassword &
)& '
.' (
NotEmpty( 0
(0 1
)1 2
.2 3
MinimumLength3 @
(@ A
$numA B
)B C
;C D
RuleFor 
( 
x 
=> 
x 
. 
ConfirmNewPassword -
)- .
.. /
NotEmpty/ 7
(7 8
)8 9
.9 :
Equal: ?
(? @
x@ A
=>B D
xE F
.F G
NewPasswordG R
)R S
.S T
WithMessageT _
(_ `
$str	` ñ
)
ñ ó
;
ó ò
} 	
} 
} é!
¢/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/PartnerBankRegistrationRequestDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 
class 6
*PartnerBankRegistrationRequestDtoValidator 8
:9 :
AbstractValidator; L
<L M-
!PartnerBankRegistrationRequestDtoM n
>n o
{ 
public 6
*PartnerBankRegistrationRequestDtoValidator	 3
(3 4
)4 5
{ 
RuleFor		 
(		 
x		 
=>		 
x		 
.		 
PartnerName		 &
)		& '
.		' (
NotEmpty		( 0
(		0 1
)		1 2
.		2 3
Length		3 9
(		9 :
$num		: ;
,		; <
$num		= ?
)		? @
.		@ A
WithMessage		A L
(		L M
$str		M g
)		g h
;		h i
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
EmailAddress

 '
)

' (
.

( )
NotEmpty

) 1
(

1 2
)

2 3
.

3 4
WithMessage

4 ?
(

? @
$str

@ [
)

[ \
;

\ ]
RuleFor 
( 
x 
=> 
x 
. 
PhoneNumber &
)& '
.' (
NotEmpty( 0
(0 1
)1 2
.2 3
Length3 9
(9 :
$num: ;
,; <
$num= ?
)? @
.@ A
MatchesA H
(H I
$strI X
)X Y
.Y Z
WithMessageZ e
(e f
$strf }
)} ~
;~ 
RuleFor 
( 
x 
=> 
x 
. 
Password #
)# $
.$ %
NotEmpty% -
(- .
). /
./ 0
MinimumLength0 =
(= >
$num> ?
)? @
;@ A
RuleFor 
( 
x 
=> 
x 
. 
ConfirmPassword *
)* +
.+ ,
NotEmpty, 4
(4 5
)5 6
.6 7
Equal7 <
(< =
x= >
=>? A
xB C
.C D
PasswordD L
)L M
.M N
WithMessageN Y
(Y Z
$str	Z å
)
å ç
;
ç é
RuleFor 
( 
x 
=> 
x 
. "
ContactPerson_FullName 1
)1 2
.2 3
NotEmpty3 ;
(; <
)< =
.= >
Length> D
(D E
$numE F
,F G
$numH K
)K L
.L M
WithMessageM X
(X Y
$str	Y á
)
á à
;
à â
RuleFor 
( 
x 
=> 
x 
. &
ContactPerson_EmailAddress 5
)5 6
.6 7
NotEmpty7 ?
(? @
)@ A
.A B
WithMessageB M
(M N
$strN x
)x y
.y z
EmailAddress	z Ü
(
Ü á
)
á à
.
à â
Matches
â ê
(
ê ë
$str
ë ∏
)
∏ π
;
π ∫
RuleFor 
( 
x 
=> 
x 
. %
ContactPerson_PhoneNumber 4
)4 5
.5 6
NotEmpty6 >
(> ?
)? @
.@ A
LengthA G
(G H
$numH I
,I J
$numK M
)M N
.N O
MatchesO V
(V W
$strW f
)f g
.g h
WithMessageh s
(s t
$str	t ö
)
ö õ
;
õ ú
} 	
} 
} Í
õ/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/PartnerBankLoginRequestDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 
class /
#PartnerBankLoginRequestDtoValidator 1
:2 3
AbstractValidator4 E
<E F
LoginRequestDtoF U
>U V
{ 
public /
#PartnerBankLoginRequestDtoValidator	 ,
(, -
)- .
{ 
RuleFor		 
(		 
x		 
=>		 
x		 
.		 
Phone_OR_Email		 )
)		) *
.

 
NotEmpty

 
(

 
)

 
.

 
WithMessage

 '
(

' (
$str

( C
)

C D
. 
EmailAddress 
( 
) 
.  
WithMessage  +
(+ ,
$str, B
)B C
. 
Matches 
( 
$str @
)@ A
;A B
RuleFor 
( 
x 
=> 
x 
. 
Password #
)# $
.$ %
NotEmpty% -
(- .
). /
./ 0
MinimumLength0 =
(= >
$num> ?
)? @
;@ A
} 	
} 
public 

class $
LoginRequestDtoValidator )
:* +
AbstractValidator, =
<= >
LoginRequestDto> M
>M N
{ 
public $
LoginRequestDtoValidator '
(' (
)( )
{ 	
RuleFor 
( 
x 
=> 
x 
. 
Phone_OR_Email )
)) *
. 
NotEmpty 
( 
) 
. 
WithMessage '
(' (
$str( D
)D E
;E F
RuleFor 
( 
x 
=> 
x 
. 
Password #
)# $
.$ %
NotEmpty% -
(- .
). /
./ 0
MinimumLength0 =
(= >
$num> ?
)? @
;@ A
} 	
}   
}"" ”+
ü/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/CustomerRegistrationRequestDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 
class 3
'CustomerRegistrationRequestDtoValidator 5
:6 7
AbstractValidator8 I
<I J*
CustomerRegistrationRequestDtoJ h
>h i
{ 
public 3
'CustomerRegistrationRequestDtoValidator	 0
(0 1
)1 2
{		 
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
CustomerCode

 '
)

' (
.

( )
NotEmpty

) 1
(

1 2
)

2 3
.

3 4
Length

4 :
(

: ;
$num

; <
,

< =
$num

> ?
)

? @
.

@ A
Matches

A H
(

H I
$str

I d
)

d e
.

e f
WithMessage

f q
(

q r
$str	

r ß
)


ß ®
;


® ©
RuleFor 
( 
x 
=> 
x 
. 
	FirstName $
)$ %
.% &
NotEmpty& .
(. /
)/ 0
.0 1
Length1 7
(7 8
$num8 9
,9 :
$num; =
)= >
.> ?
WithMessage? J
(J K
$strK k
)k l
;l m
RuleFor 
( 
x 
=> 
x 
. 
LastName #
)# $
.$ %
NotEmpty% -
(- .
). /
./ 0
Length0 6
(6 7
$num7 8
,8 9
$num: =
)= >
.> ?
WithMessage? J
(J K
$strK j
)j k
;k l
RuleFor 
( 
x 
=> 
x 
. 
PhoneNumber &
)& '
.' (
NotEmpty( 0
(0 1
)1 2
.2 3
Length3 9
(9 :
$num: ;
,; <
$num= ?
)? @
.@ A
MatchesA H
(H I
$strI X
)X Y
.Y Z
WithMessageZ e
(e f
$strf }
)} ~
;~ 
RuleFor 
( 
x 
=> 
x 
. 
EmailAddress '
)' (
.( )
NotEmpty) 1
(1 2
)2 3
.3 4
WithMessage4 ?
(? @
$str@ [
)[ \
;\ ]
RuleFor 
( 
x 
=> 
x 
. 
LastReceiptNumber ,
), -
.- .
NotEmpty. 6
(6 7
)7 8
.8 9
MinimumLength9 F
(F G
$numG I
)I J
.J K
WithMessageK V
(V W
$str	W ´
)
´ ¨
;
¨ ≠
RuleFor 
( 
x 
=> 
x 
. 
LastReceiptImage +
)+ ,
., -
NotEmpty- 5
(5 6
)6 7
.7 8
WithMessage8 C
(C D
$strD `
)` a
;a b
RuleFor 
( 
x 
=> 
x 
.  
IdentificationTypeId /
)/ 0
.0 1 
GreaterThanOrEqualTo1 E
(E F
$numF G
)G H
;H I
RuleFor 
( 
x 
=> 
x 
. &
IdentificationUniqueNumber 5
)5 6
.6 7
NotEmpty7 ?
(? @
)@ A
.A B
WithMessageB M
(M N
$strN }
)} ~
;~ 
RuleFor 
( 
x 
=> 
x 
. 
IdentificationImage .
). /
./ 0
NotEmpty0 8
(8 9
)9 :
.: ;
WithMessage; F
(F G
$strG o
)o p
;p q
RuleFor 
( 
x 
=> 
x 
. 
IdentificationImage .
). /
./ 0
NotEmpty0 8
(8 9
)9 :
.: ;
WithMessage; F
(F G
$strG o
)o p
;p q
RuleFor 
( 
x 
=> 
x 
. 
	ChannelId $
)$ %
.% & 
GreaterThanOrEqualTo& :
(: ;
$num; <
)< =
.= >
WithMessage> I
(I J
$strJ d
)d e
;e f
RuleFor 
( 
x 
=> 
x 
. 
SelfieImage &
)& '
.' (
Must( ,
(, -
value- 2
=>3 5
value6 ;
is< >
string? E
)E F
.F G
WithMessageG R
(R S
$strS j
)j k
;k l
}$$ 	
}%% 
}&& Ô
ô/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/ChangePasswordRequestDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 

class -
!ChangePasswordRequestDtoValidator 2
:3 4
AbstractValidator5 F
<F G$
ChangePasswordRequestDtoG _
>_ `
{ 
public -
!ChangePasswordRequestDtoValidator 0
(0 1
)1 2
{ 	
RuleFor 
( 
x 
=> 
x 
. 
UserId !
)! "
." #
NotEmpty# +
(+ ,
), -
.- .
WithMessage. 9
(9 :
$str: O
)O P
;P Q
RuleFor		 
(		 
x		 
=>		 
x		 
.		 
UserId		 !
)		! "
.		" #
Length		# )
(		) *
$num		* ,
)		, -
.		- .
WithMessage		. 9
(		9 :
$str		: n
)		n o
;		o p
RuleFor 
( 
x 
=> 
x 
. 
OldPassword &
)& '
.' (
NotEmpty( 0
(0 1
)1 2
.2 3
WithMessage3 >
(> ?
$str? Y
)Y Z
;Z [
RuleFor 
( 
x 
=> 
x 
. 
NewPassword &
)& '
.' (
NotEmpty( 0
(0 1
)1 2
.2 3
WithMessage3 >
(> ?
$str? Y
)Y Z
;Z [
RuleFor 
( 
x 
=> 
x 
. 
ConfirmNewPassword -
)- .
.. /
NotEmpty/ 7
(7 8
)8 9
.9 :
WithMessage: E
(E F
$strF q
)q r
;r s
RuleFor 
( 
x 
=> 
x 
. 
OldPassword &
)& '
.' (
MinimumLength( 5
(5 6
$num6 7
)7 8
;8 9
RuleFor 
( 
x 
=> 
x 
. 
NewPassword &
)& '
.' (
MinimumLength( 5
(5 6
$num6 7
)7 8
;8 9
RuleFor 
( 
x 
=> 
x 
. 
ConfirmNewPassword -
)- .
.. /
MinimumLength/ <
(< =
$num= >
)> ?
;? @
RuleFor 
( 
x 
=> 
x 
. 
NewPassword &
)& '
.' (
NotEmpty( 0
(0 1
)1 2
.2 3
NotEqual3 ;
(; <
x< =
=>> @
xA B
.B C
OldPasswordC N
)N O
.O P
WithMessageP [
([ \
$str	\ í
)
í ì
;
ì î
RuleFor 
( 
x 
=> 
x 
. 
ConfirmNewPassword -
)- .
.. /
NotEmpty/ 7
(7 8
)8 9
.9 :
Equal: ?
(? @
x@ A
=>B D
xE F
.F G
NewPasswordG R
)R S
.S T
WithMessageT _
(_ `
$str	` í
)
í ì
;
ì î
} 	
} 
} ‚
ñ/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/UserAccounts/ApproveUserAccountDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
./ 0
UserAccounts0 <
{ 
public 

class *
ApproveUserAccountDtoValidator /
:0 1
AbstractValidator2 C
<C D!
ApproveUserAccountDtoD Y
>Y Z
{ 
public *
ApproveUserAccountDtoValidator -
(- .
). /
{		 	
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
UserId

 !
)

! "
.

" #
NotEmpty

# +
(

+ ,
)

, -
.

- .
WithMessage

. 9
(

9 :
$str

: O
)

O P
;

P Q
RuleFor 
( 
x 
=> 
x 
. 
UserId !
)! "
." #
Length# )
() *
$num* ,
), -
.- .
WithMessage. 9
(9 :
$str: n
)n o
;o p
RuleFor 
( 
x 
=> 
x 
. 
RoleId !
)! "
." #
NotEmpty# +
(+ ,
), -
.- .
WithMessage. 9
(9 :
$str: O
)O P
;P Q
RuleFor 
( 
x 
=> 
x 
. 

ApprovedBy %
)% &
.& '
NotEmpty' /
(/ 0
)0 1
.1 2
WithMessage2 =
(= >
$str> W
)W X
;X Y
RuleFor 
( 
x 
=> 
x 
. 

ApprovedBy %
)% &
.& '
Length' -
(- .
$num. 0
)0 1
.1 2
WithMessage2 =
(= >
$str> v
)v w
;w x
} 	
} 
} ß
Å/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/TokenStoreDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
{ 
public 
class "
TokenStoreDtoValidator $
:% &
AbstractValidator( 9
<9 :
TokenStoreCreateDto: M
>M N
{ 
public		 "
TokenStoreDtoValidator			 
(		  
)		  !
{

 
RuleFor 
( 
x 
=> 
x 
. 
Token  
)  !
.! "
NotEmpty" *
(* +
)+ ,
., -
Length- 3
(3 4
$num4 5
,5 6
$num7 9
)9 :
.: ;
WithMessage; F
(F G
$str	G á
)
á à
;
à â
RuleFor 
( 
x 
=> 
x 
. 
EmailAddress '
)' (
.( )
NotEmpty) 1
(1 2
)2 3
.3 4
EmailAddress4 @
(@ A
)A B
.B C
MatchesC J
(J K
$strK r
)r s
;s t
RuleFor 
( 
x 
=> 
x 
. 
MobilePhoneNumber ,
), -
.- .
NotEmpty. 6
(6 7
)7 8
.8 9
Length9 ?
(? @
$num@ A
,A B
$numC E
)E F
.F G
MatchesG N
(N O
$strO ^
)^ _
._ `
WithMessage` k
(k l
$str	l ä
)
ä ã
;
ã å
} 	
} 
} í
/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/SubMenusDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
{ 
public 
class  
SubMenusDtoValidator "
:# $
AbstractValidator% 6
<6 7
SubMenusCreateDto7 H
>H I
{ 
public  
SubMenusDtoValidator	 
( 
) 
{		 
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
menuId

 !
)

! "
.

" # 
GreaterThanOrEqualTo

# 7
(

7 8
$num

8 9
)

9 :
;

: ;
RuleFor 
( 
x 
=> 
x 
. 
	subMenuId $
)$ %
.% & 
GreaterThanOrEqualTo& :
(: ;
$num; <
)< =
;= >
RuleFor 
( 
x 
=> 
x 
. 
subMenuName &
)& '
.' (
NotEmpty( 0
(0 1
)1 2
.2 3
Length3 9
(9 :
$num: ;
,; <
$num= @
)@ A
.A B
WithMessageB M
(M N
$str	N í
)
í ì
;
ì î
} 	
} 
} ¢
É/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/SubMenuItemsDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
{ 
public 
class $
SubMenuItemsDtoValidator &
:' (
AbstractValidator) :
<: ;!
SubMenuItemsCreateDto; P
>P Q
{ 
public $
SubMenuItemsDtoValidator	 !
(! "
)" #
{		 
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
menuId

 !
)

! "
.

" # 
GreaterThanOrEqualTo

# 7
(

7 8
$num

8 9
)

9 :
;

: ;
RuleFor 
( 
x 
=> 
x 
. 
	subMenuId $
)$ %
.% & 
GreaterThanOrEqualTo& :
(: ;
$num; <
)< =
;= >
RuleFor 
( 
x 
=> 
x 
. 
subMenuItemId (
)( )
.) * 
GreaterThanOrEqualTo* >
(> ?
$num? @
)@ A
;A B
RuleFor 
( 
x 
=> 
x 
. 
subMenuItemName *
)* +
.+ ,
NotEmpty, 4
(4 5
)5 6
.6 7
Length7 =
(= >
$num> ?
,? @
$numA D
)D E
.E F
WithMessageF Q
(Q R
$str	R õ
)
õ ú
;
ú ù
} 	
} 
} °
Ü/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/RoleMenuActionsDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
{ 
public 
class '
RoleMenuActionsDtoValidator )
:* +
AbstractValidator, =
<= >
RoleMenuActionsDto> P
>P Q
{ 
public '
RoleMenuActionsDtoValidator	 $
($ %
)% &
{		 
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
roleMenuActionId

 +
)

+ ,
.

, - 
GreaterThanOrEqualTo

- A
(

A B
$num

B C
)

C D
;

D E
RuleFor 
( 
x 
=> 
x 
. 
roleId !
)! "
." #
NotEmpty# +
(+ ,
), -
.- .
Length. 4
(4 5
$num5 6
,6 7
$num8 :
): ;
.; <
WithMessage< G
(G H
$str	H é
)
é è
;
è ê
RuleFor 
( 
x 
=> 
x 
. 
menuId !
)! "
." # 
GreaterThanOrEqualTo# 7
(7 8
$num8 9
)9 :
;: ;
RuleFor 
( 
x 
=> 
x 
. 
actionId #
)# $
.$ % 
GreaterThanOrEqualTo% 9
(9 :
$num: ;
); <
;< =
} 	
} 
} ´
Ö/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/DepartmentUnitDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
{ 
public 
class &
DepartmentUnitDtoValidator (
:) *
AbstractValidator+ <
<< =#
DepartmentUnitCreateDto= T
>T U
{ 
public &
DepartmentUnitDtoValidator	 #
(# $
)$ %
{ 
RuleFor 
( 
x 
=> 
x 
. 
DepartmentId '
)' (
.( ) 
GreaterThanOrEqualTo) =
(= >
$num> ?
)? @
;@ A
RuleFor		 
(		 
x		 
=>		 
x		 
.		 
UnitId		 !
)		! "
.		" # 
GreaterThanOrEqualTo		# 7
(		7 8
$num		8 9
)		9 :
;		: ;
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
UnitName

 #
)

# $
.

$ %
NotEmpty

% -
(

- .
)

. /
.

/ 0
Length

0 6
(

6 7
$num

7 8
,

8 9
$num

: <
)

< =
.

= >
WithMessage

> I
(

I J
$str	

J ú
)


ú ù
;


ù û
} 	
} 
} ≠

Å/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/DepartmentDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
{ 
public 
class "
DepartmentDtoValidator $
:% &
AbstractValidator' 8
<8 9
DepartmentCreateDto9 L
>L M
{ 
public "
DepartmentDtoValidator	 
(  
)  !
{ 
RuleFor		 
(		 
x		 
=>		 
x		 
.		 
DepartmentId		 '
)		' (
.		( ) 
GreaterThanOrEqualTo		) =
(		= >
$num		> ?
)		? @
;		@ A
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
DepartmentName

 )
)

) *
.

* +
NotEmpty

+ 3
(

3 4
)

4 5
.

5 6
Length

6 <
(

< =
$num

= >
,

> ?
$num

@ B
)

B C
.

C D
WithMessage

D O
(

O P
$str	

P ú
)


ú ù
;


ù û
} 	
} 
} °€
ä/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/UseCases/UserAccounts/AdministrationService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
UseCases$ ,
., -
UserAccounts- 9
{ 
public 
class !
AdministrationService #
:$ %"
IAdministrationService& <
{ 
private 
readonly 
RoleManager $
<$ %#
ApplicationIdentityRole% <
>< =
_roleManager> J
;J K
private 
readonly 
UserManager $
<$ %#
ApplicationIdentityUser% <
>< =
_userManager> J
;J K
private 
readonly 
IUnitOfWork $
_unitOfWork% 0
;0 1
private 
readonly 
ValidationService *
_validationService+ =
;= >
private 
readonly 
ILogger  
<  !!
AdministrationService! 6
>6 7
_logger8 ?
;? @
private 
readonly 

HttpClient #
_httpClient$ /
;/ 0
public !
AdministrationService $
($ %
RoleManager% 0
<0 1#
ApplicationIdentityRole1 H
>H I
roleManagerJ U
,U V
UserManagerW b
<b c#
ApplicationIdentityUserc z
>z {
userManager	| á
,
á à
IUnitOfWork
â î

unitOfWork
ï ü
,
ü †
ValidationService% 6
validationService7 H
,H I
ILoggerJ Q
<Q R!
AdministrationServiceR g
>g h
loggeri o
,o p

HttpClientq {

httpClient	| Ü
)
Ü á
{ 	
_roleManager 
= 
roleManager &
;& '
_userManager   
=   
userManager   &
;  & '
_unitOfWork!! 
=!! 

unitOfWork!! $
;!!$ %
_validationService"" 
=""  
validationService""! 2
;""2 3
_logger## 
=## 
logger## 
;## 
_httpClient$$ 
=$$ 

httpClient$$ $
;$$$ %
}&& 	
public(( 
async(( 
Task(( 
<(( 
IdentityResult(( (
>((( )
CreateUserRole((* 8
(((8 9
RolesCreateDto((9 G
role((H L
)((L M
{)) 	
var** 
validationResult**  
=**! "
_validationService**# 5
.**5 6
Validate**6 >
(**> ?
role**? C
)**C D
;**D E
if,, 
(,, 
validationResult,,  
.,,  !
IsValid,,! (
),,( )
{-- #
ApplicationIdentityRole.. '
identityRole..( 4
=..5 6
new..7 :#
ApplicationIdentityRole..; R
{// 
Name00 
=00 
role00 
.00  
RoleName00  (
,00( )
	CreatedBy11 
=11 
role11  $
.11$ %
	CreatedBy11% .
,11. /
	CreatedOn22 
=22 
DateTime22  (
.22( )
UtcNow22) /
,22/ 0
Status33 
=33 
(33 
int33 !
)33! "
RegistrationStatus33" 4
.334 5
Pending335 <
}44 
;44 
IdentityResult66 
result66 %
=66& '
await66( -
_roleManager66. :
.66: ;
CreateAsync66; F
(66F G
identityRole66G S
)66S T
;66T U
return88 
result88 
;88 
}99 
return;; 
null;; 
!;; 
;;; 
}<< 	
public>> 
async>> 
Task>> 
<>> 
IdentityResult>> (
>>>( )
DeleteUserRole>>* 8
(>>8 9
RolesDeleteDto>>9 G
roleId>>H N
)>>N O
{?? 	
var@@ 
validationResult@@  
=@@! "
_validationService@@# 5
.@@5 6
Validate@@6 >
(@@> ?
roleId@@? E
)@@E F
;@@F G
ifBB 
(BB 
validationResultBB  
.BB  !
IsValidBB! (
)BB( )
{CC #
ApplicationIdentityRoleDD '
?DD' (
identityRoleDD) 5
=DD6 7
awaitDD8 =
_roleManagerDD> J
.DDJ K
FindByIdAsyncDDK X
(DDX Y
roleIdDDY _
.DD_ `
RoleIdDD` f
!DDf g
)DDg h
;DDh i
ifFF 
(FF 
identityRoleFF 
!FF  
.FF  !
StatusFF! '
!=FF( *
(FF+ ,
intFF, /
)FF/ 0
RegistrationStatusFF0 B
.FFB C
ApprovedFFC K
)FFK L
{GG 
identityRoleII  
.II  !
	DeletedByII! *
=II+ ,
roleIdII- 3
.II3 4
	DeletedByII4 =
;II= >
identityRoleJJ  
.JJ  !
	DeletedOnJJ! *
=JJ+ ,
DateTimeJJ- 5
.JJ5 6
UtcNowJJ6 <
;JJ< =
identityRoleKK  
.KK  !
StatusKK! '
=KK( )
(KK* +
intKK+ .
)KK. /
RegistrationStatusKK/ A
.KKA B
RejectedKKB J
;KKJ K
IdentityResultMM "
resultMM# )
=MM* +
awaitMM, 1
_roleManagerMM2 >
.MM> ?
UpdateAsyncMM? J
(MMJ K
identityRoleMMK W
)MMW X
;MMX Y
returnOO 
resultOO !
;OO! "
}QQ 
}RR 
returnTT 
nullTT 
!TT 
;TT 
}UU 	
publicWW 
asyncWW 
TaskWW 
<WW 
IdentityResultWW (
>WW( )
UpdateUserRoleWW* 8
(WW8 9
RolesUpdateDtoWW9 G
roleWWH L
)WWL M
{XX 	
varYY 
validationResultYY  
=YY! "
_validationServiceYY# 5
.YY5 6
ValidateYY6 >
(YY> ?
roleYY? C
)YYC D
;YYD E
if[[ 
([[ 
validationResult[[  
.[[  !
IsValid[[! (
)[[( )
{\\ #
ApplicationIdentityRole]] '
?]]' (
identityRole]]) 5
=]]6 7
await]]8 =
_roleManager]]> J
.]]J K
FindByIdAsync]]K X
(]]X Y
role]]Y ]
.]]] ^
RoleId]]^ d
)]]d e
;]]e f
identityRole__ 
!__ 
.__ 
Name__ "
=__# $
role__% )
.__) *
RoleName__* 2
;__2 3
identityRole`` 
.`` 
NormalizedName`` +
=``, -
role``. 2
.``2 3
RoleName``3 ;
!``; <
.``< =
ToUpper``= D
(``D E
)``E F
;``F G
identityRoleaa 
.aa 

ModifiedByaa '
=aa( )
roleaa* .
.aa. /

ModifiedByaa/ 9
;aa9 :
IdentityResultcc 
resultcc %
=cc& '
awaitcc( -
_roleManagercc. :
.cc: ;
UpdateAsynccc; F
(ccF G
identityRoleccG S
)ccS T
;ccT U
returnee 
resultee 
;ee 
}ff 
returnhh 
nullhh 
!hh 
;hh 
}ii 	
publickk 
asynckk 
Taskkk 
<kk 
IdentityResultkk (
>kk( )
ApproveUserRolekk* 9
(kk9 :
RolesApprovalDtokk: J
rolekkK O
)kkO P
{ll 	
varmm 
validationResultmm  
=mm! "
_validationServicemm# 5
.mm5 6
Validatemm6 >
(mm> ?
rolemm? C
)mmC D
;mmD E
ifoo 
(oo 
validationResultoo  
.oo  !
IsValidoo! (
)oo( )
{pp #
ApplicationIdentityRoleqq '
?qq' (
identityRoleqq) 5
=qq6 7
awaitqq8 =
_roleManagerqq> J
.qqJ K
FindByIdAsyncqqK X
(qqX Y
roleqqY ]
.qq] ^
RoleIdqq^ d
)qqd e
;qqe f
identityRoless 
!ss 
.ss 

ApprovedByss (
=ss) *
roless+ /
.ss/ 0

ApprovedByss0 :
;ss: ;
identityRolett 
.tt 

ApprovedOntt '
=tt( )
DateTimett* 2
.tt2 3
UtcNowtt3 9
;tt9 :
identityRoleuu 
.uu 
Statusuu #
=uu$ %
(uu& '
intuu' *
)uu* +
RegistrationStatusuu+ =
.uu= >
Approveduu> F
;uuF G
IdentityResultww 
resultww %
=ww& '
awaitww( -
_roleManagerww. :
.ww: ;
UpdateAsyncww; F
(wwF G
identityRolewwG S
)wwS T
;wwT U
returnyy 
resultyy 
;yy 
}zz 
return|| 
null|| 
!|| 
;|| 
}}} 	
public 
async 
Task 
< 
IdentityResult (
>( )
DisapproveUserRole* <
(< =
RolesApprovalDto= M
roleN R
)R S
{
ÄÄ 	
var
ÅÅ 
validationResult
ÅÅ  
=
ÅÅ! " 
_validationService
ÅÅ# 5
.
ÅÅ5 6
Validate
ÅÅ6 >
(
ÅÅ> ?
role
ÅÅ? C
)
ÅÅC D
;
ÅÅD E
if
ÉÉ 
(
ÉÉ 
validationResult
ÉÉ  
.
ÉÉ  !
IsValid
ÉÉ! (
)
ÉÉ( )
{
ÑÑ %
ApplicationIdentityRole
ÖÖ '
?
ÖÖ' (
identityRole
ÖÖ) 5
=
ÖÖ6 7
await
ÖÖ8 =
_roleManager
ÖÖ> J
.
ÖÖJ K
FindByIdAsync
ÖÖK X
(
ÖÖX Y
role
ÖÖY ]
.
ÖÖ] ^
RoleId
ÖÖ^ d
)
ÖÖd e
;
ÖÖe f
identityRole
áá 
!
áá 
.
áá 

ApprovedBy
áá (
=
áá) *
role
áá+ /
.
áá/ 0

ApprovedBy
áá0 :
;
áá: ;
identityRole
àà 
.
àà 

ApprovedOn
àà '
=
àà( )
DateTime
àà* 2
.
àà2 3
UtcNow
àà3 9
;
àà9 :
identityRole
ââ 
.
ââ 
Status
ââ #
=
ââ$ %
(
ââ& '
int
ââ' *
)
ââ* + 
RegistrationStatus
ââ+ =
.
ââ= >
Disapproved
ââ> I
;
ââI J
IdentityResult
ãã 
result
ãã %
=
ãã& '
await
ãã( -
_roleManager
ãã. :
.
ãã: ;
UpdateAsync
ãã; F
(
ããF G
identityRole
ããG S
)
ããS T
;
ããT U
return
çç 
result
çç 
;
çç 
}
éé 
return
êê 
null
êê 
!
êê 
;
êê 
}
ëë 	
public
ìì 
IEnumerable
ìì 
<
ìì 
RolesDto
ìì #
>
ìì# $"
GetApprovedUserRoles
ìì% 9
(
ìì9 :
)
ìì: ;
{
îî 	
return
ïï 
_roleManager
ïï 
.
ïï  
Roles
ïï  %
.
ññ 
Where
ññ 
(
ññ 
r
ññ 
=>
ññ 
r
ññ 
.
ññ 
Status
ññ $
==
ññ% '
(
ññ( )
int
ññ) ,
)
ññ, - 
RegistrationStatus
ññ- ?
.
ññ? @
Approved
ññ@ H
)
ññH I
.
óó 
OrderByDescending
óó "
(
óó" #
role
óó# '
=>
óó( *
role
óó+ /
.
óó/ 0

ApprovedOn
óó0 :
)
óó: ;
.
òò 
Select
òò 
(
òò 
role
òò 
=>
òò 
new
òò  #
RolesDto
òò$ ,
(
òò, -
role
ôô 
.
ôô 
Id
ôô 
,
ôô 
role
öö 
.
öö 
Name
öö 
!
öö 
,
öö 
_userManager
õõ  
.
õõ  !
Users
õõ! &
.
úú 
Where
úú 
(
úú 
u
úú  
=>
úú! #
u
úú$ %
.
úú% &
Id
úú& (
==
úú) +
role
úú, 0
.
úú0 1
	CreatedBy
úú1 :
)
úú: ;
.
ùù 
Select
ùù 
(
ùù  
u
ùù  !
=>
ùù" $
(
ùù% &
u
ùù& '
.
ùù' (
	FirstName
ùù( 1
+
ùù2 3
$str
ùù4 7
+
ùù8 9
(
ùù: ;
string
ùù; A
.
ùùA B
IsNullOrEmpty
ùùB O
(
ùùO P
u
ùùP Q
.
ùùQ R

MiddleName
ùùR \
)
ùù\ ]
?
ùù^ _
$str
ùù` b
:
ùùc d
u
ùùe f
.
ùùf g

MiddleName
ùùg q
+
ùùr s
$str
ùùt w
)
ùùw x
+
ùùy z
u
ùù{ |
.
ùù| }
LastNameùù} Ö
)ùùÖ Ü
.ùùÜ á
Trimùùá ã
(ùùã å
)ùùå ç
)ùùç é
.
ûû 
FirstOrDefault
ûû '
(
ûû' (
)
ûû( )
??
ûû* ,
$str
ûû- 6
,
ûû6 7
role
üü 
.
üü 
	CreatedOn
üü "
,
üü" #
_userManager
††  
.
††  !
Users
††! &
.
°° 
Where
°° 
(
°° 
u
°°  
=>
°°! #
u
°°$ %
.
°°% &
Id
°°& (
==
°°) +
role
°°, 0
.
°°0 1

ApprovedBy
°°1 ;
)
°°; <
.
¢¢ 
Select
¢¢ 
(
¢¢  
u
¢¢  !
=>
¢¢" $
(
¢¢% &
u
¢¢& '
.
¢¢' (
	FirstName
¢¢( 1
+
¢¢2 3
$str
¢¢4 7
+
¢¢8 9
(
¢¢: ;
string
¢¢; A
.
¢¢A B
IsNullOrEmpty
¢¢B O
(
¢¢O P
u
¢¢P Q
.
¢¢Q R

MiddleName
¢¢R \
)
¢¢\ ]
?
¢¢^ _
$str
¢¢` b
:
¢¢c d
u
¢¢e f
.
¢¢f g

MiddleName
¢¢g q
+
¢¢r s
$str
¢¢t w
)
¢¢w x
+
¢¢y z
u
¢¢{ |
.
¢¢| }
LastName¢¢} Ö
)¢¢Ö Ü
.¢¢Ü á
Trim¢¢á ã
(¢¢ã å
)¢¢å ç
)¢¢ç é
.
££ 
FirstOrDefault
££ '
(
££' (
)
££( )
??
££* ,
$str
££- 6
,
££6 7
role
§§ 
.
§§ 

ApprovedOn
§§ #
,
§§# $/
!RegistrationStatusEnumDescription
•• 5
.
••5 6$
RegistrationStatusEnum
••6 L
(
••L M
role
••M Q
.
••Q R
Status
••R X
)
••X Y
.
••Y Z
ToString
••Z b
(
••b c
)
••c d
)
¶¶ 
)
¶¶ 
.
¶¶ 
ToList
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
}
ßß 	
public
©© 
IEnumerable
©© 
<
©© 
RolesDto
©© #
>
©©# $
GetUserRoles
©©% 1
(
©©1 2
)
©©2 3
{
™™ 	
return
≠≠ 
_roleManager
≠≠ 
.
≠≠  
Roles
≠≠  %
.
ÆÆ 
Where
ÆÆ 
(
ÆÆ 
r
ÆÆ 
=>
ÆÆ 
r
ÆÆ 
.
ÆÆ 
Status
ÆÆ $
!=
ÆÆ% '
(
ÆÆ( )
int
ÆÆ) ,
)
ÆÆ, - 
RegistrationStatus
ÆÆ- ?
.
ÆÆ? @
Rejected
ÆÆ@ H
)
ÆÆH I
.
ØØ 
OrderByDescending
ØØ "
(
ØØ" #
role
ØØ# '
=>
ØØ( *
role
ØØ+ /
.
ØØ/ 0
	CreatedOn
ØØ0 9
)
ØØ9 :
.
∞∞ 
Select
∞∞ 
(
∞∞ 
role
∞∞ 
=>
∞∞ 
new
∞∞  #
RolesDto
∞∞$ ,
(
∞∞, -
role
±± 
.
±± 
Id
±± 
,
±±  
role
≤≤ 
.
≤≤ 
Name
≤≤ !
!
≤≤! "
,
≤≤" #
_userManager
≥≥ $
.
≥≥$ %
Users
≥≥% *
.
¥¥ 
Where
¥¥ "
(
¥¥" #
u
¥¥# $
=>
¥¥% '
u
¥¥( )
.
¥¥) *
Id
¥¥* ,
==
¥¥- /
role
¥¥0 4
.
¥¥4 5
	CreatedBy
¥¥5 >
)
¥¥> ?
.
µµ 
Select
µµ #
(
µµ# $
u
µµ$ %
=>
µµ& (
(
µµ) *
u
µµ* +
.
µµ+ ,
	FirstName
µµ, 5
+
µµ6 7
$str
µµ8 ;
+
µµ< =
(
µµ> ?
string
µµ? E
.
µµE F
IsNullOrEmpty
µµF S
(
µµS T
u
µµT U
.
µµU V

MiddleName
µµV `
)
µµ` a
?
µµb c
$str
µµd f
:
µµg h
u
µµi j
.
µµj k

MiddleName
µµk u
+
µµv w
$str
µµx {
)
µµ{ |
+
µµ} ~
uµµ Ä
.µµÄ Å
LastNameµµÅ â
)µµâ ä
.µµä ã
Trimµµã è
(µµè ê
)µµê ë
)µµë í
.
∂∂ 
FirstOrDefault
∂∂ +
(
∂∂+ ,
)
∂∂, -
??
∂∂. 0
$str
∂∂1 :
,
∂∂: ;
role
∑∑ 
.
∑∑ 
	CreatedOn
∑∑ &
,
∑∑& '
_userManager
∏∏ $
.
∏∏$ %
Users
∏∏% *
.
ππ 
Where
ππ "
(
ππ" #
u
ππ# $
=>
ππ% '
u
ππ( )
.
ππ) *
Id
ππ* ,
==
ππ- /
role
ππ0 4
.
ππ4 5

ApprovedBy
ππ5 ?
)
ππ? @
.
∫∫ 
Select
∫∫ #
(
∫∫# $
u
∫∫$ %
=>
∫∫& (
(
∫∫) *
u
∫∫* +
.
∫∫+ ,
	FirstName
∫∫, 5
+
∫∫6 7
$str
∫∫8 ;
+
∫∫< =
(
∫∫> ?
string
∫∫? E
.
∫∫E F
IsNullOrEmpty
∫∫F S
(
∫∫S T
u
∫∫T U
.
∫∫U V

MiddleName
∫∫V `
)
∫∫` a
?
∫∫b c
$str
∫∫d f
:
∫∫g h
u
∫∫i j
.
∫∫j k

MiddleName
∫∫k u
+
∫∫v w
$str
∫∫x {
)
∫∫{ |
+
∫∫} ~
u∫∫ Ä
.∫∫Ä Å
LastName∫∫Å â
)∫∫â ä
.∫∫ä ã
Trim∫∫ã è
(∫∫è ê
)∫∫ê ë
)∫∫ë í
.
ªª 
FirstOrDefault
ªª +
(
ªª+ ,
)
ªª, -
??
ªª. 0
$str
ªª1 :
,
ªª: ;
role
ºº 
.
ºº 

ApprovedOn
ºº '
,
ºº' (/
!RegistrationStatusEnumDescription
ΩΩ 9
.
ΩΩ9 :$
RegistrationStatusEnum
ΩΩ: P
(
ΩΩP Q
role
ΩΩQ U
.
ΩΩU V
Status
ΩΩV \
)
ΩΩ\ ]
.
ΩΩ] ^
ToString
ΩΩ^ f
(
ΩΩf g
)
ΩΩg h
)
ææ 
)
ææ 
.
ææ 
ToList
ææ 
(
ææ 
)
ææ 
;
ææ  
}
øø 	
public
¡¡ 
async
¡¡ 
Task
¡¡ 
<
¡¡ -
CustomerVerificationResponseDto
¡¡ 9
>
¡¡9 :#
VerifyCustomerAccount
¡¡; P
(
¡¡P Q"
VerifyUserAccountDto
¡¡Q e!
accountVerification
¡¡f y
)
¡¡y z
{
¬¬ 	
var
ƒƒ 
user
ƒƒ 
=
ƒƒ 
await
ƒƒ 
_userManager
ƒƒ )
.
ƒƒ) *
FindByIdAsync
ƒƒ* 7
(
ƒƒ7 8!
accountVerification
ƒƒ8 K
.
ƒƒK L
UserId
ƒƒL R
!
ƒƒR S
)
ƒƒS T
;
ƒƒT U
if
«« 
(
«« 
user
«« 
is
«« 
null
«« 
)
«« 
{
»» 
_logger
…… 
.
…… 

LogWarning
…… "
(
……" #
$"
……# %
$str
……% :
{
……: ;!
accountVerification
……; N
.
……N O
UserId
……O U
}
……U V
$str
……V a
"
……a b
,
……b c!
accountVerification
……d w
.
……w x
UserId
……x ~
)
……~ 
;…… Ä
return
   
new
   -
CustomerVerificationResponseDto
   :
{
ÀÀ 
	IsSuccess
ÃÃ 
=
ÃÃ 
false
ÃÃ  %
,
ÃÃ% &
ErrorResponse
ÕÕ !
=
ÕÕ" #
new
ÕÕ$ '2
$CustomerVerificationErrorResponseDto
ÕÕ( L
{
ŒŒ 

StatusCode
œœ "
=
œœ# $
StatusCodes
œœ% 0
.
œœ0 1
Status404NotFound
œœ1 B
,
œœB C
StatusMessage
–– %
=
––& '
$"
––( *
$str
––* @
{
––@ A!
accountVerification
––A T
.
––T U
UserId
––U [
}
––[ \
$str
––\ h
"
––h i
}
—— 
}
““ 
;
““ 
}
”” 
if
÷÷ 
(
÷÷ 
(
÷÷ 
UserAccountType
÷÷ 
)
÷÷  
user
÷÷  $
.
÷÷$ %
UserType
÷÷% -
!=
÷÷. 0
UserAccountType
÷÷1 @
.
÷÷@ A
Customer
÷÷A I
)
÷÷I J
{
◊◊ 
_logger
ÿÿ 
.
ÿÿ 

LogWarning
ÿÿ "
(
ÿÿ" #
$"
ÿÿ# %
$str
ÿÿ% :
{
ÿÿ: ;!
accountVerification
ÿÿ; N
.
ÿÿN O
UserId
ÿÿO U
}
ÿÿU V
$strÿÿV ë
"ÿÿë í
,ÿÿí ì#
accountVerificationÿÿî ß
.ÿÿß ®
UserIdÿÿ® Æ
)ÿÿÆ Ø
;ÿÿØ ∞
return
ŸŸ 
new
ŸŸ -
CustomerVerificationResponseDto
ŸŸ :
{
⁄⁄ 
	IsSuccess
€€ 
=
€€ 
false
€€  %
,
€€% &
ErrorResponse
‹‹ !
=
‹‹" #
new
‹‹$ '2
$CustomerVerificationErrorResponseDto
‹‹( L
{
›› 

StatusCode
ﬁﬁ "
=
ﬁﬁ# $
StatusCodes
ﬁﬁ% 0
.
ﬁﬁ0 1
Status404NotFound
ﬁﬁ1 B
,
ﬁﬁB C
StatusMessage
ﬂﬂ %
=
ﬂﬂ& '
$"
ﬂﬂ( *
$str
ﬂﬂ* ?
{
ﬂﬂ? @!
accountVerification
ﬂﬂ@ S
.
ﬂﬂS T
UserId
ﬂﬂT Z
}
ﬂﬂZ [
$strﬂﬂ[ ñ
"ﬂﬂñ ó
}
‡‡ 
}
·· 
;
·· 
}
‚‚ 
if
ÂÂ 
(
ÂÂ 
(
ÂÂ  
RegistrationStatus
ÂÂ #
)
ÂÂ# $
user
ÂÂ$ (
.
ÂÂ( )
Status
ÂÂ) /
!=
ÂÂ0 2 
RegistrationStatus
ÂÂ3 E
.
ÂÂE F
Pending
ÂÂF M
)
ÂÂM N
{
ÊÊ 
_logger
ÁÁ 
.
ÁÁ 

LogWarning
ÁÁ "
(
ÁÁ" #
$"
ÁÁ# %
$str
ÁÁ% :
{
ÁÁ: ;!
accountVerification
ÁÁ; N
.
ÁÁN O
UserId
ÁÁO U
}
ÁÁU V
$strÁÁV å
"ÁÁå ç
,ÁÁç é#
accountVerificationÁÁè ¢
.ÁÁ¢ £
UserIdÁÁ£ ©
)ÁÁ© ™
;ÁÁ™ ´
return
ËË 
new
ËË -
CustomerVerificationResponseDto
ËË :
{
ÈÈ 
	IsSuccess
ÍÍ 
=
ÍÍ 
false
ÍÍ  %
,
ÍÍ% &
ErrorResponse
ÎÎ !
=
ÎÎ" #
new
ÎÎ$ '2
$CustomerVerificationErrorResponseDto
ÎÎ( L
{
ÏÏ 

StatusCode
ÌÌ "
=
ÌÌ# $
StatusCodes
ÌÌ% 0
.
ÌÌ0 1
Status404NotFound
ÌÌ1 B
,
ÌÌB C
StatusMessage
ÓÓ %
=
ÓÓ& '
$"
ÓÓ( *
$str
ÓÓ* ?
{
ÓÓ? @!
accountVerification
ÓÓ@ S
.
ÓÓS T
UserId
ÓÓT Z
}
ÓÓZ [
$strÓÓ[ ë
"ÓÓë í
}
ÔÔ 
}
 
;
 
}
ÚÚ 
var
ÙÙ 
staff
ÙÙ 
=
ÙÙ 
await
ÙÙ 
_userManager
ÙÙ *
.
ÙÙ* +
FindByIdAsync
ÙÙ+ 8
(
ÙÙ8 9!
accountVerification
ÙÙ9 L
.
ÙÙL M

verifiedBy
ÙÙM W
)
ÙÙW X
;
ÙÙX Y
if
ıı 
(
ıı 
staff
ıı 
is
ıı 
null
ıı 
)
ıı 
{
ˆˆ 
_logger
˜˜ 
.
˜˜ 

LogWarning
˜˜ "
(
˜˜" #
$"
˜˜# %
$str
˜˜% B
{
˜˜B C!
accountVerification
˜˜C V
.
˜˜V W

verifiedBy
˜˜W a
}
˜˜a b
$str
˜˜b m
"
˜˜m n
,
˜˜n o"
accountVerification˜˜p É
.˜˜É Ñ

verifiedBy˜˜Ñ é
)˜˜é è
;˜˜è ê
return
¯¯ 
new
¯¯ -
CustomerVerificationResponseDto
¯¯ :
{
˘˘ 
	IsSuccess
˙˙ 
=
˙˙ 
false
˙˙  %
,
˙˙% &
ErrorResponse
˚˚ !
=
˚˚" #
new
˚˚$ '2
$CustomerVerificationErrorResponseDto
˚˚( L
{
¸¸ 

StatusCode
˝˝ "
=
˝˝# $
StatusCodes
˝˝% 0
.
˝˝0 1
Status404NotFound
˝˝1 B
,
˝˝B C
StatusMessage
˛˛ %
=
˛˛& '
$"
˛˛( *
$str
˛˛* G
{
˛˛G H!
accountVerification
˛˛H [
.
˛˛[ \

verifiedBy
˛˛\ f
}
˛˛f g
$str
˛˛g r
"
˛˛r s
}
ˇˇ 
}
ÄÄ 
;
ÄÄ 
}
ÇÇ 
user
ÖÖ 
.
ÖÖ 
Status
ÖÖ 
=
ÖÖ 
(
ÖÖ 
int
ÖÖ 
)
ÖÖ  
RegistrationStatus
ÖÖ 1
.
ÖÖ1 2
Verified
ÖÖ2 :
;
ÖÖ: ;
user
ÜÜ 
.
ÜÜ 

VerifiedBy
ÜÜ 
=
ÜÜ !
accountVerification
ÜÜ 1
.
ÜÜ1 2

verifiedBy
ÜÜ2 <
;
ÜÜ< =
user
áá 
.
áá 
VerifiedDate
áá 
=
áá 
DateTime
áá  (
.
áá( )
UtcNow
áá) /
;
áá/ 0
_unitOfWork
ââ 
.
ââ 
Users
ââ 
.
ââ 
Update
ââ $
(
ââ$ %
user
ââ% )
)
ââ) *
;
ââ* +
await
ää 
_unitOfWork
ää 
.
ää 
Complete
ää &
(
ää& '
)
ää' (
;
ää( )
_logger
åå 
.
åå 
LogInformation
åå "
(
åå" #
$"
åå# %
$str
åå% :
{
åå: ;
user
åå; ?
.
åå? @
Id
åå@ B
}
ååB C
$str
ååC W
{
ååW X
user
ååX \
.
åå\ ]
Email
åå] b
}
ååb c
$strååc ´
{åå´ ¨
staffåå¨ ±
.åå± ≤
Idåå≤ ¥
}åå¥ µ
$strååµ √
{åå√ ƒ
staffååƒ …
.åå…  $
IdentificationNumberåå  ﬁ
}ååﬁ ﬂ
$strååﬂ ‡
"åå‡ ·
,åå· ‚
useråå„ Á
.ååÁ Ë
IdååË Í
)ååÍ Î
;ååÎ Ï
return
çç 
new
çç -
CustomerVerificationResponseDto
çç 6
{
éé 
	IsSuccess
èè 
=
èè 
true
èè  
,
èè  !
SuccessResponse
êê 
=
êê  !
new
êê" %4
&CustomerVerificationSuccessResponseDto
êê& L
{
ëë 

StatusCode
íí 
=
íí  
StatusCodes
íí! ,
.
íí, -
Status200OK
íí- 8
,
íí8 9
StatusMessage
ìì !
=
ìì" #
$"
ìì$ &
$str
ìì& <
{
ìì< =
user
ìì= A
.
ììA B
Id
ììB D
}
ììD E
$str
ììE \
{
ìì\ ]
user
ìì] a
.
ììa b
Email
ììb g
}
ììg h
$strììh ≤
{ìì≤ ≥
staffìì≥ ∏
.ìì∏ π
Idììπ ª
}ììª º
$strììº Ã
{ììÃ Õ
staffììÕ “
.ìì“ ”$
IdentificationNumberìì” Á
}ììÁ Ë
$strììË È
"ììÈ Í
}
îî 
}
ïï 
;
ïï 
}
ññ 	
public
òò 
async
òò 
Task
òò 
<
òò *
CustomerRejectionResponseDto
òò 6
>
òò6 7#
RejectCustomerAccount
òò8 M
(
òòM N"
RejectUserAccountDto
òòN b
accountRejection
òòc s
)
òòs t
{
ôô 	
var
õõ 
user
õõ 
=
õõ 
await
õõ 
_userManager
õõ )
.
õõ) *
FindByIdAsync
õõ* 7
(
õõ7 8
accountRejection
õõ8 H
.
õõH I
UserId
õõI O
!
õõO P
)
õõP Q
;
õõQ R
if
ùù 
(
ùù 
user
ùù 
is
ùù 
null
ùù 
)
ùù 
{
ûû 
_logger
üü 
.
üü 

LogWarning
üü "
(
üü" #
$"
üü# %
$str
üü% :
{
üü: ;
accountRejection
üü; K
.
üüK L
UserId
üüL R
}
üüR S
$str
üüS ^
"
üü^ _
,
üü_ `
accountRejection
üüa q
.
üüq r
UserId
üür x
)
üüx y
;
üüy z
return
†† 
new
†† *
CustomerRejectionResponseDto
†† 7
{
°° 
	IsSuccess
¢¢ 
=
¢¢ 
false
¢¢  %
,
¢¢% &
ErrorResponse
££ !
=
££" #
new
££$ '/
!CustomerRejectionErrorResponseDto
££( I
{
§§ 

StatusCode
•• "
=
••# $
StatusCodes
••% 0
.
••0 1
Status404NotFound
••1 B
,
••B C
StatusMessage
¶¶ %
=
¶¶& '
$"
¶¶( *
$str
¶¶* 8
{
¶¶8 9
accountRejection
¶¶9 I
.
¶¶I J
UserId
¶¶J P
}
¶¶P Q
$str
¶¶Q ]
"
¶¶] ^
}
ßß 
}
®® 
;
®® 
}
™™ 
if
¨¨ 
(
¨¨ 
(
¨¨  
RegistrationStatus
¨¨ #
)
¨¨# $
user
¨¨$ (
.
¨¨( )
Status
¨¨) /
==
¨¨0 2 
RegistrationStatus
¨¨3 E
.
¨¨E F
Rejected
¨¨F N
)
¨¨N O
{
≠≠ 
_logger
ÆÆ 
.
ÆÆ 

LogWarning
ÆÆ "
(
ÆÆ" #
$"
ÆÆ# %
$str
ÆÆ% :
{
ÆÆ: ;
accountRejection
ÆÆ; K
.
ÆÆK L
UserId
ÆÆL R
}
ÆÆR S
$str
ÆÆS m
"
ÆÆm n
,
ÆÆn o
accountRejectionÆÆp Ä
.ÆÆÄ Å
UserIdÆÆÅ á
)ÆÆá à
;ÆÆà â
return
ØØ 
new
ØØ *
CustomerRejectionResponseDto
ØØ 7
{
∞∞ 
	IsSuccess
±± 
=
±± 
false
±±  %
,
±±% &
ErrorResponse
≤≤ !
=
≤≤" #
new
≤≤$ '/
!CustomerRejectionErrorResponseDto
≤≤( I
{
≥≥ 

StatusCode
¥¥ "
=
¥¥# $
StatusCodes
¥¥% 0
.
¥¥0 1
Status404NotFound
¥¥1 B
,
¥¥B C
StatusMessage
µµ %
=
µµ& '
$"
µµ( *
$str
µµ* @
{
µµ@ A
accountRejection
µµA Q
.
µµQ R
UserId
µµR X
}
µµX Y
$str
µµY u
"
µµu v
}
∂∂ 
}
∑∑ 
;
∑∑ 
}
ππ 
var
ªª 
staff
ªª 
=
ªª 
await
ªª 
_userManager
ªª *
.
ªª* +
FindByIdAsync
ªª+ 8
(
ªª8 9
accountRejection
ªª9 I
.
ªªI J

RejectedBy
ªªJ T
)
ªªT U
;
ªªU V
if
ºº 
(
ºº 
staff
ºº 
is
ºº 
null
ºº 
)
ºº 
{
ΩΩ 
_logger
ææ 
.
ææ 

LogWarning
ææ "
(
ææ" #
$"
ææ# %
$str
ææ% B
{
ææB C
accountRejection
ææC S
.
ææS T

RejectedBy
ææT ^
}
ææ^ _
$str
ææ_ j
"
ææj k
,
ææk l
accountRejection
ææm }
.
ææ} ~

RejectedByææ~ à
)ææà â
;ææâ ä
return
øø 
new
øø *
CustomerRejectionResponseDto
øø 7
{
¿¿ 
	IsSuccess
¡¡ 
=
¡¡ 
false
¡¡  %
,
¡¡% &
ErrorResponse
¬¬ !
=
¬¬" #
new
¬¬$ '/
!CustomerRejectionErrorResponseDto
¬¬( I
{
√√ 

StatusCode
ƒƒ "
=
ƒƒ# $
StatusCodes
ƒƒ% 0
.
ƒƒ0 1
Status404NotFound
ƒƒ1 B
,
ƒƒB C
StatusMessage
≈≈ %
=
≈≈& '
$"
≈≈( *
$str
≈≈* G
{
≈≈G H
accountRejection
≈≈H X
.
≈≈X Y

RejectedBy
≈≈Y c
}
≈≈c d
$str
≈≈d o
"
≈≈o p
}
∆∆ 
}
«« 
;
«« 
}
…… 
user
ÃÃ 
.
ÃÃ 
Status
ÃÃ 
=
ÃÃ 
(
ÃÃ 
int
ÃÃ 
)
ÃÃ  
RegistrationStatus
ÃÃ 1
.
ÃÃ1 2
Rejected
ÃÃ2 :
;
ÃÃ: ;
user
ÕÕ 
.
ÕÕ 

RejectedBy
ÕÕ 
=
ÕÕ 
accountRejection
ÕÕ .
.
ÕÕ. /

RejectedBy
ÕÕ/ 9
;
ÕÕ9 :
user
ŒŒ 
.
ŒŒ 
RejectedDate
ŒŒ 
=
ŒŒ 
DateTime
ŒŒ  (
.
ŒŒ( )
UtcNow
ŒŒ) /
;
ŒŒ/ 0
user
œœ 
.
œœ 
RejectedReasons
œœ  
=
œœ! "
accountRejection
œœ# 3
.
œœ3 4
RejectedReasons
œœ4 C
;
œœC D
user
–– 
.
–– 
EmailConfirmed
–– 
=
––  !
false
––" '
;
––' (
user
—— 
.
—— "
PhoneNumberConfirmed
—— %
=
——& '
false
——( -
;
——- .
_unitOfWork
‘‘ 
.
‘‘ 
Users
‘‘ 
.
‘‘ 
Update
‘‘ $
(
‘‘$ %
user
‘‘% )
)
‘‘) *
;
‘‘* +
await
’’ 
_unitOfWork
’’ 
.
’’ 
Complete
’’ &
(
’’& '
)
’’' (
;
’’( )
_logger
◊◊ 
.
◊◊ 
LogInformation
◊◊ "
(
◊◊" #
$"
◊◊# %
$str
◊◊% :
{
◊◊: ;
user
◊◊; ?
.
◊◊? @
Id
◊◊@ B
}
◊◊B C
$str
◊◊C W
{
◊◊W X
user
◊◊X \
.
◊◊\ ]
Email
◊◊] b
}
◊◊b c
$str◊◊c é
{◊◊é è
staff◊◊è î
.◊◊î ï$
IdentificationNumber◊◊ï ©
}◊◊© ™
$str◊◊™ ≠
{◊◊≠ Æ
staff◊◊Æ ≥
.◊◊≥ ¥
	FirstName◊◊¥ Ω
}◊◊Ω æ
$str◊◊æ ø
{◊◊ø ¿
staff◊◊¿ ≈
.◊◊≈ ∆
LastName◊◊∆ Œ
}◊◊Œ œ
$str◊◊œ ·
{◊◊· ‚ 
accountRejection◊◊‚ Ú
.◊◊Ú Û
RejectedReasons◊◊Û Ç
}◊◊Ç É
"◊◊É Ñ
,◊◊Ñ Ö
user◊◊Ü ä
.◊◊ä ã
Id◊◊ã ç
)◊◊ç é
;◊◊é è
return
ÿÿ 
new
ÿÿ *
CustomerRejectionResponseDto
ÿÿ 3
{
ŸŸ 
	IsSuccess
⁄⁄ 
=
⁄⁄ 
true
⁄⁄  
,
⁄⁄  !
SuccessResponse
€€ 
=
€€  !
new
€€" %1
#CustomerRejectionSuccessResponseDto
€€& I
{
‹‹ 

StatusCode
›› 
=
››  
StatusCodes
››! ,
.
››, -
Status200OK
››- 8
,
››8 9
StatusMessage
ﬁﬁ !
=
ﬁﬁ" #
$"
ﬁﬁ$ &
$str
ﬁﬁ& <
{
ﬁﬁ< =
user
ﬁﬁ= A
.
ﬁﬁA B
Id
ﬁﬁB D
}
ﬁﬁD E
$str
ﬁﬁE \
{
ﬁﬁ\ ]
user
ﬁﬁ] a
.
ﬁﬁa b
Email
ﬁﬁb g
}
ﬁﬁg h
$strﬁﬁh ï
{ﬁﬁï ñ
staffﬁﬁñ õ
.ﬁﬁõ ú$
IdentificationNumberﬁﬁú ∞
}ﬁﬁ∞ ±
$strﬁﬁ± ¥
{ﬁﬁ¥ µ
staffﬁﬁµ ∫
.ﬁﬁ∫ ª
	FirstNameﬁﬁª ƒ
}ﬁﬁƒ ≈
$strﬁﬁ≈ ∆
{ﬁﬁ∆ «
staffﬁﬁ« Ã
.ﬁﬁÃ Õ
LastNameﬁﬁÕ ’
}ﬁﬁ’ ÷
$strﬁﬁ÷ Í
{ﬁﬁÍ Î 
accountRejectionﬁﬁÎ ˚
.ﬁﬁ˚ ¸
RejectedReasonsﬁﬁ¸ ã
}ﬁﬁã å
$strﬁﬁå ç
"ﬁﬁç é
}
ﬂﬂ 
}
‡‡ 
;
‡‡ 
}
·· 	
public
„„ 
async
„„ 
Task
„„ 
<
„„ +
ApproveUserAccountResponseDto
„„ 7
>
„„7 8 
ApproveUserAccount
„„9 K
(
„„K L#
ApproveUserAccountDto
„„L a
accountApproval
„„b q
)
„„q r
{
‰‰ 	
var
ÊÊ 
user
ÊÊ 
=
ÊÊ 
await
ÊÊ 
_userManager
ÊÊ )
.
ÊÊ) *
FindByIdAsync
ÊÊ* 7
(
ÊÊ7 8
accountApproval
ÊÊ8 G
.
ÊÊG H
UserId
ÊÊH N
)
ÊÊN O
;
ÊÊO P
if
ËË 
(
ËË 
user
ËË 
is
ËË 
null
ËË 
)
ËË 
{
ÈÈ 
_logger
ÍÍ 
.
ÍÍ 

LogWarning
ÍÍ "
(
ÍÍ" #
$"
ÍÍ# %
$str
ÍÍ% ;
{
ÍÍ; <
accountApproval
ÍÍ< K
.
ÍÍK L
UserId
ÍÍL R
}
ÍÍR S
$str
ÍÍS _
"
ÍÍ_ `
,
ÍÍ` a
accountApproval
ÍÍb q
.
ÍÍq r
UserId
ÍÍr x
)
ÍÍx y
;
ÍÍy z
return
ÎÎ 
new
ÎÎ +
ApproveUserAccountResponseDto
ÎÎ 8
{
ÏÏ 
	IsSuccess
ÌÌ 
=
ÌÌ 
false
ÌÌ  %
,
ÌÌ% &
ErrorResponse
ÓÓ !
=
ÓÓ" #
new
ÓÓ$ '0
"ApproveUserAccountErrorResponseDto
ÓÓ( J
{
ÔÔ 

StatusCode
 "
=
# $
StatusCodes
% 0
.
0 1
Status404NotFound
1 B
,
B C
StatusMessage
ÒÒ %
=
ÒÒ& '
$"
ÒÒ( *
$str
ÒÒ* ?
{
ÒÒ? @
accountApproval
ÒÒ@ O
.
ÒÒO P
UserId
ÒÒP V
}
ÒÒV W
$str
ÒÒW b
"
ÒÒb c
}
ÚÚ 
}
ÛÛ 
;
ÛÛ 
}
ÙÙ 
var
ˆˆ 
role
ˆˆ 
=
ˆˆ 
await
ˆˆ 
_roleManager
ˆˆ )
.
ˆˆ) *
FindByIdAsync
ˆˆ* 7
(
ˆˆ7 8
accountApproval
ˆˆ8 G
.
ˆˆG H
RoleId
ˆˆH N
)
ˆˆN O
;
ˆˆO P
if
˜˜ 
(
˜˜ 
role
˜˜ 
is
˜˜ 
null
˜˜ 
)
˜˜ 
{
¯¯ 
_logger
˘˘ 
.
˘˘ 

LogWarning
˘˘ "
(
˘˘" #
$"
˘˘# %
$str
˘˘% .
{
˘˘. /
accountApproval
˘˘/ >
.
˘˘> ?
RoleId
˘˘? E
}
˘˘E F
$str
˘˘F R
"
˘˘R S
,
˘˘S T
accountApproval
˘˘U d
.
˘˘d e
RoleId
˘˘e k
)
˘˘k l
;
˘˘l m
return
˙˙ 
new
˙˙ +
ApproveUserAccountResponseDto
˙˙ 8
{
˚˚ 
	IsSuccess
¸¸ 
=
¸¸ 
false
¸¸  %
,
¸¸% &
ErrorResponse
˝˝ !
=
˝˝" #
new
˝˝$ '0
"ApproveUserAccountErrorResponseDto
˝˝( J
{
˛˛ 

StatusCode
ˇˇ "
=
ˇˇ# $
StatusCodes
ˇˇ% 0
.
ˇˇ0 1
Status404NotFound
ˇˇ1 B
,
ˇˇB C
StatusMessage
ÄÄ %
=
ÄÄ& '
$"
ÄÄ( *
$str
ÄÄ* 3
{
ÄÄ3 4
accountApproval
ÄÄ4 C
.
ÄÄC D
RoleId
ÄÄD J
}
ÄÄJ K
$str
ÄÄK W
"
ÄÄW X
}
ÅÅ 
}
ÇÇ 
;
ÇÇ 
}
ÑÑ 
if
ÜÜ 
(
ÜÜ 
(
ÜÜ 
UserAccountType
ÜÜ  
)
ÜÜ  !
user
ÜÜ! %
.
ÜÜ% &
UserType
ÜÜ& .
==
ÜÜ/ 1
UserAccountType
ÜÜ2 A
.
ÜÜA B
Customer
ÜÜB J
&&
ÜÜK M
(
ÜÜN O 
RegistrationStatus
ÜÜO a
)
ÜÜa b
user
ÜÜb f
.
ÜÜf g
Status
ÜÜg m
!=
ÜÜn p!
RegistrationStatusÜÜq É
.ÜÜÉ Ñ
VerifiedÜÜÑ å
)ÜÜå ç
{
áá 
_logger
àà 
.
àà 

LogWarning
àà "
(
àà" #
$"
àà# %
$str
àà% :
{
àà: ;
accountApproval
àà; J
.
ààJ K
UserId
ààK Q
}
ààQ R
$strààR â
"ààâ ä
,ààä ã
accountApprovalààå õ
.ààõ ú
UserIdààú ¢
)àà¢ £
;àà£ §
return
ââ 
new
ââ +
ApproveUserAccountResponseDto
ââ 8
{
ää 
	IsSuccess
ãã 
=
ãã 
false
ãã  %
,
ãã% &
ErrorResponse
åå !
=
åå" #
new
åå$ '0
"ApproveUserAccountErrorResponseDto
åå( J
{
çç 

StatusCode
éé "
=
éé# $
StatusCodes
éé% 0
.
éé0 1
Status404NotFound
éé1 B
,
ééB C
StatusMessage
èè %
=
èè& '
$"
èè( *
$str
èè* ?
{
èè? @
accountApproval
èè@ O
.
èèO P
UserId
èèP V
}
èèV W
$strèèW é
"èèé è
}
êê 
}
ëë 
;
ëë 
}
ìì 
if
ïï 
(
ïï 
(
ïï 
UserAccountType
ïï  
)
ïï  !
user
ïï! %
.
ïï% &
UserType
ïï& .
!=
ïï/ 1
UserAccountType
ïï2 A
.
ïïA B
Customer
ïïB J
&&
ïïK M
(
ïïN O 
RegistrationStatus
ïïO a
)
ïïa b
user
ïïb f
.
ïïf g
Status
ïïg m
!=
ïïn p!
RegistrationStatusïïq É
.ïïÉ Ñ
PendingïïÑ ã
)ïïã å
{
ññ 
_logger
óó 
.
óó 

LogWarning
óó "
(
óó" #
$"
óó# %
$str
óó% :
{
óó: ;
accountApproval
óó; J
.
óóJ K
UserId
óóK Q
}
óóQ R
$stróóR â
"óóâ ä
,óóä ã
accountApprovalóóå õ
.óóõ ú
UserIdóóú ¢
)óó¢ £
;óó£ §
return
òò 
new
òò +
ApproveUserAccountResponseDto
òò 8
{
ôô 
	IsSuccess
öö 
=
öö 
false
öö  %
,
öö% &
ErrorResponse
õõ !
=
õõ" #
new
õõ$ '0
"ApproveUserAccountErrorResponseDto
õõ( J
{
úú 

StatusCode
ùù "
=
ùù# $
StatusCodes
ùù% 0
.
ùù0 1
Status404NotFound
ùù1 B
,
ùùB C
StatusMessage
ûû %
=
ûû& '
$"
ûû( *
$str
ûû* ?
{
ûû? @
accountApproval
ûû@ O
.
ûûO P
UserId
ûûP V
}
ûûV W
$strûûW é
"ûûé è
}
üü 
}
†† 
;
†† 
}
¢¢ 
var
§§ 
staff
§§ 
=
§§ 
await
§§ 
_userManager
§§ *
.
§§* +
FindByIdAsync
§§+ 8
(
§§8 9
accountApproval
§§9 H
.
§§H I

ApprovedBy
§§I S
)
§§S T
;
§§T U
if
•• 
(
•• 
staff
•• 
is
•• 
null
•• 
)
•• 
{
¶¶ 
_logger
ßß 
.
ßß 

LogWarning
ßß "
(
ßß" #
$"
ßß# %
$str
ßß% >
{
ßß> ?
accountApproval
ßß? N
.
ßßN O

ApprovedBy
ßßO Y
}
ßßY Z
$str
ßßZ e
"
ßße f
,
ßßf g
accountApproval
ßßh w
.
ßßw x

ApprovedByßßx Ç
)ßßÇ É
;ßßÉ Ñ
return
®® 
new
®® +
ApproveUserAccountResponseDto
®® 8
{
©© 
	IsSuccess
™™ 
=
™™ 
false
™™  %
,
™™% &
ErrorResponse
´´ !
=
´´" #
new
´´$ '0
"ApproveUserAccountErrorResponseDto
´´( J
{
¨¨ 

StatusCode
≠≠ "
=
≠≠# $
StatusCodes
≠≠% 0
.
≠≠0 1
Status404NotFound
≠≠1 B
,
≠≠B C
StatusMessage
ÆÆ %
=
ÆÆ& '
$"
ÆÆ( *
$str
ÆÆ* C
{
ÆÆC D
accountApproval
ÆÆD S
.
ÆÆS T

ApprovedBy
ÆÆT ^
}
ÆÆ^ _
$str
ÆÆ_ j
"
ÆÆj k
}
ØØ 
}
∞∞ 
;
∞∞ 
}
±± 
var
¥¥ 
roleName
¥¥ 
=
¥¥ 
await
¥¥  
_roleManager
¥¥! -
.
¥¥- .
FindByIdAsync
¥¥. ;
(
¥¥; <
accountApproval
¥¥< K
.
¥¥K L
RoleId
¥¥L R
)
¥¥R S
;
¥¥S T
IdentityResult
µµ 

resultRole
µµ %
=
µµ& '
await
µµ( -
_userManager
µµ. :
.
µµ: ;
AddToRoleAsync
µµ; I
(
µµI J
user
µµJ N
,
µµN O
roleName
µµP X
!
µµX Y
.
µµY Z
Name
µµZ ^
!
µµ^ _
)
µµ_ `
;
µµ` a
user
∏∏ 
.
∏∏ 
Status
∏∏ 
=
∏∏ 
(
∏∏ 
int
∏∏ 
)
∏∏  
RegistrationStatus
∏∏ 1
.
∏∏1 2
Approved
∏∏2 :
;
∏∏: ;
user
ππ 
.
ππ 

ApprovedBy
ππ 
=
ππ 
accountApproval
ππ -
.
ππ- .

ApprovedBy
ππ. 8
;
ππ8 9
user
∫∫ 
.
∫∫ 
ApprovedDate
∫∫ 
=
∫∫ 
DateTime
∫∫  (
.
∫∫( )
UtcNow
∫∫) /
;
∫∫/ 0
_unitOfWork
ºº 
.
ºº 
Users
ºº 
.
ºº 
Update
ºº $
(
ºº$ %
user
ºº% )
)
ºº) *
;
ºº* +
await
ΩΩ 
_unitOfWork
ΩΩ 
.
ΩΩ 
Complete
ΩΩ &
(
ΩΩ& '
)
ΩΩ' (
;
ΩΩ( )
_logger
¿¿ 
.
¿¿ 
LogInformation
¿¿ "
(
¿¿" #
$str¿¿# Ú
,¿¿Ú Û
user¿¿Û ˜
.¿¿˜ ¯
Id¿¿¯ ˙
,¿¿˙ ˚
roleName¿¿¸ Ñ
.¿¿Ñ Ö
Name¿¿Ö â
,¿¿â ä
staff¿¿ã ê
.¿¿ê ë
Id¿¿ë ì
,¿¿ì î
staff¿¿ï ö
.¿¿ö õ$
IdentificationNumber¿¿õ Ø
)¿¿Ø ∞
;¿¿∞ ±
return
¡¡ 
new
¡¡ +
ApproveUserAccountResponseDto
¡¡ 4
{
¬¬ 
	IsSuccess
√√ 
=
√√ 
true
√√  
,
√√  !
SuccessResponse
ƒƒ 
=
ƒƒ  !
new
ƒƒ" %2
$ApproveUserAccountSuccessResponseDto
ƒƒ& J
{
≈≈ 

StatusCode
∆∆ 
=
∆∆  
StatusCodes
∆∆! ,
.
∆∆, -
Status200OK
∆∆- 8
,
∆∆8 9
StatusMessage
«« !
=
««" #
$"
««$ &
$str
««& <
{
««< =
user
««= A
.
««A B
Id
««B D
}
««D E
$str
««E s
{
««s t
roleName
««t |
!
««| }
.
««} ~
Name««~ Ç
!««Ç É
}««É Ñ
$str««Ñ ≈
{««≈ ∆
staff««∆ À
.««À Ã
Id««Ã Œ
}««Œ œ
$str««œ ﬂ
{««ﬂ ‡
staff««‡ Â
.««Â Ê$
IdentificationNumber««Ê ˙
}««˙ ˚
$str««˚ ˝
"««˝ ˛
}
»» 
}
…… 
;
…… 
}
   	
public
ÃÃ 
async
ÃÃ 
Task
ÃÃ 
<
ÃÃ /
!DisapprovedUserAccountResponseDto
ÃÃ ;
>
ÃÃ; <#
DisapproveUserAccount
ÃÃ= R
(
ÃÃR S'
DisapprovedUserAccountDto
ÃÃS l 
accountDisapproval
ÃÃm 
)ÃÃ Ä
{
ÕÕ 	
var
œœ 
user
œœ 
=
œœ 
await
œœ 
_userManager
œœ )
.
œœ) *
FindByIdAsync
œœ* 7
(
œœ7 8 
accountDisapproval
œœ8 J
.
œœJ K
UserId
œœK Q
!
œœQ R
)
œœR S
;
œœS T
if
—— 
(
—— 
user
—— 
is
—— 
null
—— 
)
—— 
{
““ 
_logger
”” 
.
”” 

LogWarning
”” "
(
””" #
$"
””# %
$str
””% :
{
””: ; 
accountDisapproval
””; M
.
””M N
UserId
””N T
}
””T U
$str
””U `
"
””` a
,
””a b 
accountDisapproval
””c u
.
””u v
UserId
””v |
)
””| }
;
””} ~
return
‘‘ 
new
‘‘ /
!DisapprovedUserAccountResponseDto
‘‘ <
{
’’ 
	IsSuccess
÷÷ 
=
÷÷ 
false
÷÷  %
,
÷÷% &
ErrorResponse
◊◊ !
=
◊◊" #
new
◊◊$ '4
&DisapprovedUserAccountErrorResponseDto
◊◊( N
{
ÿÿ 

StatusCode
ŸŸ "
=
ŸŸ# $
StatusCodes
ŸŸ% 0
.
ŸŸ0 1
Status404NotFound
ŸŸ1 B
,
ŸŸB C
StatusMessage
⁄⁄ %
=
⁄⁄& '
$"
⁄⁄( *
$str
⁄⁄* @
{
⁄⁄@ A 
accountDisapproval
⁄⁄A S
.
⁄⁄S T
UserId
⁄⁄T Z
}
⁄⁄Z [
$str
⁄⁄[ g
"
⁄⁄g h
}
€€ 
}
‹‹ 
;
‹‹ 
}
ﬁﬁ 
var
ÔÔ 
staff
ÔÔ 
=
ÔÔ 
await
ÔÔ 
_userManager
ÔÔ *
.
ÔÔ* +
FindByIdAsync
ÔÔ+ 8
(
ÔÔ8 9 
accountDisapproval
ÔÔ9 K
.
ÔÔK L
DisapprovedBy
ÔÔL Y
)
ÔÔY Z
;
ÔÔZ [
if
 
(
 
staff
 
is
 
null
 
)
 
{
ÒÒ 
_logger
ÚÚ 
.
ÚÚ 

LogWarning
ÚÚ "
(
ÚÚ" #
$"
ÚÚ# %
$str
ÚÚ% A
{
ÚÚA B 
accountDisapproval
ÚÚB T
.
ÚÚT U
DisapprovedBy
ÚÚU b
}
ÚÚb c
$str
ÚÚc n
"
ÚÚn o
,
ÚÚo p!
accountDisapprovalÚÚq É
.ÚÚÉ Ñ
DisapprovedByÚÚÑ ë
)ÚÚë í
;ÚÚí ì
return
ÛÛ 
new
ÛÛ /
!DisapprovedUserAccountResponseDto
ÛÛ <
{
ÙÙ 
	IsSuccess
ıı 
=
ıı 
false
ıı  %
,
ıı% &
ErrorResponse
ˆˆ !
=
ˆˆ" #
new
ˆˆ$ '4
&DisapprovedUserAccountErrorResponseDto
ˆˆ( N
{
˜˜ 

StatusCode
¯¯ "
=
¯¯# $
StatusCodes
¯¯% 0
.
¯¯0 1
Status404NotFound
¯¯1 B
,
¯¯B C
StatusMessage
˘˘ %
=
˘˘& '
$"
˘˘( *
$str
˘˘* F
{
˘˘F G 
accountDisapproval
˘˘G Y
.
˘˘Y Z
DisapprovedBy
˘˘Z g
}
˘˘g h
$str
˘˘h s
"
˘˘s t
}
˙˙ 
}
˚˚ 
;
˚˚ 
}
˝˝ 
user
ÄÄ 
.
ÄÄ 
Status
ÄÄ 
=
ÄÄ 
(
ÄÄ 
int
ÄÄ 
)
ÄÄ  
RegistrationStatus
ÄÄ 1
.
ÄÄ1 2
Disapproved
ÄÄ2 =
;
ÄÄ= >
user
ÅÅ 
.
ÅÅ 
DisapprovedBy
ÅÅ 
=
ÅÅ   
accountDisapproval
ÅÅ! 3
.
ÅÅ3 4
DisapprovedBy
ÅÅ4 A
;
ÅÅA B
user
ÇÇ 
.
ÇÇ 
DisapprovedDate
ÇÇ  
=
ÇÇ! "
DateTime
ÇÇ# +
.
ÇÇ+ ,
UtcNow
ÇÇ, 2
;
ÇÇ2 3
user
ÉÉ 
.
ÉÉ  
DisapprovedReasons
ÉÉ #
=
ÉÉ$ % 
accountDisapproval
ÉÉ& 8
.
ÉÉ8 9 
DisapprovedReasons
ÉÉ9 K
;
ÉÉK L
user
ÑÑ 
.
ÑÑ 
EmailConfirmed
ÑÑ 
=
ÑÑ  !
false
ÑÑ" '
;
ÑÑ' (
user
ÖÖ 
.
ÖÖ "
PhoneNumberConfirmed
ÖÖ %
=
ÖÖ& '
false
ÖÖ( -
;
ÖÖ- .
_unitOfWork
àà 
.
àà 
Users
àà 
.
àà 
Update
àà $
(
àà$ %
user
àà% )
)
àà) *
;
àà* +
await
ââ 
_unitOfWork
ââ 
.
ââ 
Complete
ââ &
(
ââ& '
)
ââ' (
;
ââ( )
_logger
ãã 
.
ãã 
LogInformation
ãã "
(
ãã" #
$"
ãã# %
$str
ãã% :
{
ãã: ;
user
ãã; ?
.
ãã? @
Id
ãã@ B
}
ããB C
$str
ããC p
{
ããp q
staff
ããq v
.
ããv w#
IdentificationNumberããw ã
}ããã å
$strããå è
{ããè ê
staffããê ï
.ããï ñ
	FirstNameããñ ü
}ããü †
$strãã† °
{ãã° ¢
staffãã¢ ß
.ããß ®
LastNameãã® ∞
}ãã∞ ±
$strãã± √
{ãã√ ƒ"
accountDisapprovalããƒ ÷
.ãã÷ ◊"
DisapprovedReasonsãã◊ È
}ããÈ Í
"ããÍ Î
,ããÎ Ï
userããÌ Ò
.ããÒ Ú
IdããÚ Ù
)ããÙ ı
;ããı ˆ
return
åå 
new
åå /
!DisapprovedUserAccountResponseDto
åå 8
{
çç 
	IsSuccess
éé 
=
éé 
true
éé  
,
éé  !
SuccessResponse
èè 
=
èè  !
new
èè" %6
(DisapprovedUserAccountSuccessResponseDto
èè& N
{
êê 

StatusCode
ëë 
=
ëë  
StatusCodes
ëë! ,
.
ëë, -
Status200OK
ëë- 8
,
ëë8 9
StatusMessage
íí !
=
íí" #
$"
íí$ &
$str
íí& ;
{
íí; <
user
íí< @
.
íí@ A
Id
ííA C
}
ííC D
$str
ííD q
{
ííq r
staff
íír w
.
ííw x#
IdentificationNumberííx å
}ííå ç
$strííç ê
{ííê ë
staffííë ñ
.ííñ ó
	FirstNameííó †
}íí† °
$stríí° ¢
{íí¢ £
staffíí£ ®
.íí® ©
LastNameíí© ±
}íí± ≤
$stríí≤ ƒ
{ííƒ ≈"
accountDisapprovalíí≈ ◊
.íí◊ ÿ"
DisapprovedReasonsííÿ Í
}ííÍ Î
"ííÎ Ï
}
ìì 
}
îî 
;
îî 
}
ïï 	
public
óó 
async
óó 
Task
óó 
<
óó ,
ActivateUserAccountResponseDto
óó 8
>
óó8 9!
ActivateUserAccount
óó: M
(
óóM N$
ActivateUserAccountDto
óóN d
accountActivation
óóe v
)
óóv w
{
òò 	
try
öö 
{
õõ 
var
úú 
user
úú 
=
úú 
await
úú  
_userManager
úú! -
.
úú- .
FindByIdAsync
úú. ;
(
úú; <
accountActivation
úú< M
.
úúM N
UserId
úúN T
!
úúT U
)
úúU V
;
úúV W
if
ùù 
(
ùù 
user
ùù 
is
ùù 
null
ùù  
)
ùù  !
{
ûû 
_logger
üü 
.
üü 

LogWarning
üü &
(
üü& '
$"
üü' )
$str
üü) >
{
üü> ?
accountActivation
üü? P
.
üüP Q
UserId
üüQ W
}
üüW X
$str
üüX c
"
üüc d
,
üüd e
accountActivation
üüf w
.
üüw x
UserId
üüx ~
)
üü~ 
;üü Ä
return
†† 
new
†† ,
ActivateUserAccountResponseDto
†† =
{
°° 
	IsSuccess
¢¢ !
=
¢¢" #
false
¢¢$ )
,
¢¢) *
ErrorResponse
££ %
=
££& '
new
££( +1
#ActivateUserAccountErrorResponseDto
££, O
{
§§ 

StatusCode
•• &
=
••' (
StatusCodes
••) 4
.
••4 5
Status404NotFound
••5 F
,
••F G
StatusMessage
¶¶ )
=
¶¶* +
$"
¶¶, .
$str
¶¶. C
{
¶¶C D
accountActivation
¶¶D U
.
¶¶U V
UserId
¶¶V \
}
¶¶\ ]
$str
¶¶] h
"
¶¶h i
}
ßß 
}
®® 
;
®® 
}
©© 
var
¨¨ 
staff
¨¨ 
=
¨¨ 
await
¨¨ !
_userManager
¨¨" .
.
¨¨. /
FindByIdAsync
¨¨/ <
(
¨¨< =
accountActivation
¨¨= N
.
¨¨N O
activatedBy
¨¨O Z
)
¨¨Z [
;
¨¨[ \
if
≠≠ 
(
≠≠ 
staff
≠≠ 
is
≠≠ 
null
≠≠ !
)
≠≠! "
{
ÆÆ 
_logger
ØØ 
.
ØØ 

LogWarning
ØØ &
(
ØØ& '
$"
ØØ' )
$str
ØØ) D
{
ØØD E
accountActivation
ØØE V
.
ØØV W
activatedBy
ØØW b
}
ØØb c
$str
ØØc n
"
ØØn o
,
ØØo p 
accountActivationØØq Ç
.ØØÇ É
activatedByØØÉ é
)ØØé è
;ØØè ê
return
∞∞ 
new
∞∞ ,
ActivateUserAccountResponseDto
∞∞ =
{
±± 
	IsSuccess
≤≤ !
=
≤≤" #
false
≤≤$ )
,
≤≤) *
ErrorResponse
≥≥ %
=
≥≥& '
new
≥≥( +1
#ActivateUserAccountErrorResponseDto
≥≥, O
{
¥¥ 

StatusCode
µµ &
=
µµ' (
StatusCodes
µµ) 4
.
µµ4 5
Status404NotFound
µµ5 F
,
µµF G
StatusMessage
∂∂ )
=
∂∂* +
$"
∂∂, .
$str
∂∂. I
{
∂∂I J
accountActivation
∂∂J [
.
∂∂[ \
activatedBy
∂∂\ g
}
∂∂g h
$str
∂∂h s
"
∂∂s t
}
∑∑ 
}
∏∏ 
;
∏∏ 
}
∫∫ 
if
ΩΩ 
(
ΩΩ 
(
ΩΩ  
RegistrationStatus
ΩΩ '
)
ΩΩ' (
user
ΩΩ( ,
.
ΩΩ, -
Status
ΩΩ- 3
!=
ΩΩ4 6 
RegistrationStatus
ΩΩ7 I
.
ΩΩI J
Approved
ΩΩJ R
&&
ΩΩS U
(
ΩΩV W 
RegistrationStatus
ΩΩW i
)
ΩΩi j
user
ΩΩj n
.
ΩΩn o
Status
ΩΩo u
!=
ΩΩv x!
RegistrationStatusΩΩy ã
.ΩΩã å
DeactivatedΩΩå ó
)ΩΩó ò
{
ææ 
_logger
øø 
.
øø 

LogWarning
øø &
(
øø& '
$"
øø' )
$str
øø) ?
{
øø? @
accountActivation
øø@ Q
.
øøQ R
UserId
øøR X
}
øøX Y
$strøøY ç
"øøç é
,øøé è!
accountActivationøøê °
.øø° ¢
UserIdøø¢ ®
)øø® ©
;øø© ™
return
¿¿ 
new
¿¿ ,
ActivateUserAccountResponseDto
¿¿ =
{
¡¡ 
	IsSuccess
¬¬ !
=
¬¬" #
false
¬¬$ )
,
¬¬) *
ErrorResponse
√√ %
=
√√& '
new
√√( +1
#ActivateUserAccountErrorResponseDto
√√, O
{
ƒƒ 

StatusCode
≈≈ &
=
≈≈' (
StatusCodes
≈≈) 4
.
≈≈4 5
Status404NotFound
≈≈5 F
,
≈≈F G
StatusMessage
∆∆ )
=
∆∆* +
$"
∆∆, .
$str
∆∆. D
{
∆∆D E
accountActivation
∆∆E V
.
∆∆V W
UserId
∆∆W ]
}
∆∆] ^
$str∆∆^ í
"∆∆í ì
}
«« 
}
»» 
;
»» 
}
   
var
ÃÃ 
tempPassword
ÃÃ  
=
ÃÃ! "
PasswordGenerator
ÃÃ# 4
.
ÃÃ4 5'
GenerateTemporaryPassword
ÃÃ5 N
(
ÃÃN O
)
ÃÃO P
;
ÃÃP Q
var
œœ 
token
œœ 
=
œœ 
await
œœ !
_userManager
œœ" .
.
œœ. /-
GeneratePasswordResetTokenAsync
œœ/ N
(
œœN O
user
œœO S
)
œœS T
;
œœT U
await
–– 
_userManager
–– "
.
––" # 
ResetPasswordAsync
––# 5
(
––5 6
user
––6 :
,
––: ;
token
––< A
,
––A B
tempPassword
––C O
)
––O P
;
––P Q
user
““ 
.
““ 
Status
““ 
=
““ 
(
““ 
int
““ "
)
““" # 
RegistrationStatus
““# 5
.
““5 6
	Activated
““6 ?
;
““? @
user
”” 
.
”” 
ActivatedBy
””  
=
””! "
accountActivation
””# 4
.
””4 5
activatedBy
””5 @
;
””@ A
user
‘‘ 
.
‘‘ 
ActivatedDate
‘‘ "
=
‘‘# $
DateTime
‘‘% -
.
‘‘- .
UtcNow
‘‘. 4
;
‘‘4 5
user
’’ 
.
’’ 
EmailConfirmed
’’ #
=
’’$ %
true
’’& *
;
’’* +
user
÷÷ 
.
÷÷ "
PhoneNumberConfirmed
÷÷ )
=
÷÷* +
true
÷÷, 0
;
÷÷0 1
user
◊◊ 
.
◊◊ 
IsFirstTime
◊◊  
=
◊◊! "
true
◊◊# '
;
◊◊' (
_unitOfWork
ŸŸ 
.
ŸŸ 
Users
ŸŸ !
.
ŸŸ! "
Update
ŸŸ" (
(
ŸŸ( )
user
ŸŸ) -
)
ŸŸ- .
;
ŸŸ. /
await
⁄⁄ 
_unitOfWork
⁄⁄ !
.
⁄⁄! "
Complete
⁄⁄" *
(
⁄⁄* +
)
⁄⁄+ ,
;
⁄⁄, -
_logger
ÈÈ 
.
ÈÈ 
LogInformation
ÈÈ &
(
ÈÈ& '
$str
ÈÈ' l
)
ÈÈl m
;
ÈÈm n
await
ÌÌ 
this
ÌÌ 
.
ÌÌ &
SendTokenViaNotification
ÌÌ 3
(
ÌÌ3 4
user
ÌÌ4 8
,
ÌÌ8 9
tempPassword
ÌÌ: F
)
ÌÌF G
;
ÌÌG H
return
ÔÔ 
new
ÔÔ ,
ActivateUserAccountResponseDto
ÔÔ 9
{
 
	IsSuccess
ÒÒ 
=
ÒÒ 
true
ÒÒ  $
,
ÒÒ$ %
SuccessResponse
ÚÚ #
=
ÚÚ$ %
new
ÚÚ& )3
%ActivateUserAccountSuccessResponseDto
ÚÚ* O
{
ÛÛ 

StatusCode
ÙÙ "
=
ÙÙ# $
StatusCodes
ÙÙ% 0
.
ÙÙ0 1
Status200OK
ÙÙ1 <
,
ÙÙ< =
StatusMessage
ıı %
=
ıı& '
$str
ıı( m
}
ˆˆ 
}
˜˜ 
;
˜˜ 
}
¯¯ 
catch
˘˘ 
(
˘˘ 
	Exception
˘˘ 
ex
˘˘ 
)
˘˘  
{
˙˙ 
return
˚˚ 
new
˚˚ ,
ActivateUserAccountResponseDto
˚˚ 9
{
¸¸ 
	IsSuccess
˝˝ 
=
˝˝ 
false
˝˝  %
,
˝˝% &
ErrorResponse
˛˛ !
=
˛˛" #
new
˛˛$ '1
#ActivateUserAccountErrorResponseDto
˛˛( K
{
ˇˇ 

StatusCode
ÄÄ "
=
ÄÄ# $
StatusCodes
ÄÄ% 0
.
ÄÄ0 1*
Status500InternalServerError
ÄÄ1 M
,
ÄÄM N
StatusMessage
ÅÅ %
=
ÅÅ& '
ex
ÅÅ( *
.
ÅÅ* +
ToString
ÅÅ+ 3
(
ÅÅ3 4
)
ÅÅ4 5
}
ÇÇ 
}
ÉÉ 
;
ÉÉ 
}
ÖÖ 
}
ãã 	
private
çç 
async
çç 
Task
çç &
SendTokenViaNotification
çç 3
(
çç3 4%
ApplicationIdentityUser
çç4 K
user
ççL P
,
ççP Q
string
ççR X
temp_password
ççY f
)
ççf g
{
éé 	
var
èè 
sb
èè 
=
èè 
new
èè 
StringBuilder
èè &
(
èè& '
)
èè' (
;
èè( )
sb
ëë 
.
ëë 

AppendLine
ëë 
(
ëë 
$"
ëë 
$str
ëë !
{
ëë! "
user
ëë" &
!
ëë& '
.
ëë' (
	FirstName
ëë( 1
}
ëë1 2
$str
ëë2 3
{
ëë3 4
user
ëë4 8
.
ëë8 9
LastName
ëë9 A
}
ëëA B
$str
ëëB G
"
ëëG H
)
ëëH I
;
ëëI J
sb
íí 
.
íí 

AppendLine
íí 
(
íí 
$str
íí  
)
íí  !
;
íí! "
sb
ìì 
.
ìì 

AppendLine
ìì 
(
ìì 
$"
ìì 
$str
ìì ?
"
ìì? @
)
ìì@ A
;
ììA B
sb
îî 
.
îî 

AppendLine
îî 
(
îî 
$str
îî  
)
îî  !
;
îî! "
sb
ïï 
.
ïï 

AppendLine
ïï 
(
ïï 
$"
ïï 
$str
ïï >
{
ïï> ?
temp_password
ïï? L
}
ïïL M
$str
ïïM _
"
ïï_ `
)
ïï` a
;
ïïa b
sb
ññ 
.
ññ 

AppendLine
ññ 
(
ññ 
$str
ññ  
)
ññ  !
;
ññ! "
sb
óó 
.
óó 

AppendLine
óó 
(
óó 
$"
óó 
$stróó Ç
"óóÇ É
)óóÉ Ñ
;óóÑ Ö
sb
òò 
.
òò 

AppendLine
òò 
(
òò 
$str
òò  
)
òò  !
;
òò! "
sb
ôô 
.
ôô 

AppendLine
ôô 
(
ôô 
$"
ôô 
$str
ôô =
"
ôô= >
)
ôô> ?
;
ôô? @
sb
öö 
.
öö 

AppendLine
öö 
(
öö 
$str
öö  
)
öö  !
;
öö! "
sb
õõ 
.
õõ 

AppendLine
õõ 
(
õõ 
$"
õõ 
$str
õõ -
"
õõ- .
)
õõ. /
;
õõ/ 0
sb
úú 
.
úú 

AppendLine
úú 
(
úú 
$str
úú  
)
úú  !
;
úú! "
sb
ùù 
.
ùù 

AppendLine
ùù 
(
ùù 
$"
ùù 
$str
ùù ,
"
ùù, -
)
ùù- .
;
ùù. /
sb
ûû 
.
ûû 

AppendLine
ûû 
(
ûû 
$"
ûû 
$str
ûû .
"
ûû. /
)
ûû/ 0
;
ûû0 1
sb
üü 
.
üü 

AppendLine
üü 
(
üü 
$"
üü 
$str
üü *
"
üü* +
)
üü+ ,
;
üü, -
var
°° 
email_payload
°° 
=
°° 
new
°°  #
{
°°$ %
userId
°°& ,
=
°°- .
user
°°/ 3
.
°°3 4
Email
°°4 9
,
°°9 :
displayName
°°; F
=
°°G H
$str
°°I X
,
°°X Y
subject
°°Z a
=
°°b c
$str
°°d x
,
°°x y
message°°z Å
=°°Ç É
sb°°Ñ Ü
.°°Ü á
ToString°°á è
(°°è ê
)°°ê ë
,°°ë í
type°°ì ó
=°°ò ô
$num°°ö õ
}°°ú ù
;°°ù û
string
££ 
json_emailpayload
££ $
=
££% &
JsonSerializer
££' 5
.
££5 6
	Serialize
££6 ?
(
££? @
email_payload
££@ M
)
££M N
;
££N O
var
§§ 
email_httpContent
§§ !
=
§§" #
new
§§$ '
StringContent
§§( 5
(
§§5 6
json_emailpayload
§§6 G
,
§§G H
Encoding
§§I Q
.
§§Q R
UTF8
§§R V
,
§§V W
$str
§§X j
)
§§j k
;
§§k l!
HttpResponseMessage
•• 
response
••  (
=
••) *
await
••+ 0
_httpClient
••1 <
.
••< =
	PostAsync
••= F
(
••F G
$str••G ò
,••ò ô!
email_httpContent••ö ´
)••´ ¨
;••¨ ≠
var
¶¶ 
result
¶¶ 
=
¶¶ 
response
¶¶ !
.
¶¶! "!
IsSuccessStatusCode
¶¶" 5
;
¶¶5 6
}
ßß 	
public
©© 
async
©© 
Task
©© 
<
©© .
 DeactivateUserAccountResponseDto
©© :
>
©©: ;#
DeactivateUserAccount
©©< Q
(
©©Q R&
DeactivateUserAccountDto
©©R j!
accountDeactivation
©©k ~
)
©©~ 
{
™™ 	
var
¨¨ 
user
¨¨ 
=
¨¨ 
await
¨¨ 
_userManager
¨¨ )
.
¨¨) *
FindByIdAsync
¨¨* 7
(
¨¨7 8!
accountDeactivation
¨¨8 K
.
¨¨K L
UserId
¨¨L R
!
¨¨R S
)
¨¨S T
;
¨¨T U
if
ÆÆ 
(
ÆÆ 
user
ÆÆ 
is
ÆÆ 
null
ÆÆ 
)
ÆÆ 
{
ØØ 
_logger
∞∞ 
.
∞∞ 

LogWarning
∞∞ "
(
∞∞" #
$"
∞∞# %
$str
∞∞% 2
{
∞∞2 3!
accountDeactivation
∞∞3 F
.
∞∞F G
UserId
∞∞G M
}
∞∞M N
$str
∞∞N Y
"
∞∞Y Z
,
∞∞Z [!
accountDeactivation
∞∞\ o
.
∞∞o p
UserId
∞∞p v
)
∞∞v w
;
∞∞w x
return
±± 
new
±± .
 DeactivateUserAccountResponseDto
±± ;
{
≤≤ 
	IsSuccess
≥≥ 
=
≥≥ 
false
≥≥  %
,
≥≥% &
ErrorResponse
¥¥ !
=
¥¥" #
new
¥¥$ '3
%DeactivateUserAccountErrorResponseDto
¥¥( M
{
µµ 

StatusCode
∂∂ "
=
∂∂# $
StatusCodes
∂∂% 0
.
∂∂0 1
Status404NotFound
∂∂1 B
,
∂∂B C
StatusMessage
∑∑ %
=
∑∑& '
$"
∑∑( *
$str
∑∑* @
{
∑∑@ A!
accountDeactivation
∑∑A T
.
∑∑T U
UserId
∑∑U [
}
∑∑[ \
$str
∑∑\ h
"
∑∑h i
}
∏∏ 
}
ππ 
;
ππ 
}
ªª 
if
ΩΩ 
(
ΩΩ 
(
ΩΩ  
RegistrationStatus
ΩΩ #
)
ΩΩ# $
user
ΩΩ$ (
.
ΩΩ( )
Status
ΩΩ) /
!=
ΩΩ0 2 
RegistrationStatus
ΩΩ3 E
.
ΩΩE F
	Activated
ΩΩF O
)
ΩΩO P
{
ææ 
_logger
øø 
.
øø 

LogWarning
øø "
(
øø" #
$"
øø# %
$str
øø% ;
{
øø; <!
accountDeactivation
øø< O
.
øøO P
UserId
øøP V
}
øøV W
$strøøW Ä
"øøÄ Å
,øøÅ Ç#
accountDeactivationøøÉ ñ
.øøñ ó
UserIdøøó ù
)øøù û
;øøû ü
return
¿¿ 
new
¿¿ .
 DeactivateUserAccountResponseDto
¿¿ ;
{
¡¡ 
	IsSuccess
¬¬ 
=
¬¬ 
false
¬¬  %
,
¬¬% &
ErrorResponse
√√ !
=
√√" #
new
√√$ '3
%DeactivateUserAccountErrorResponseDto
√√( M
{
ƒƒ 

StatusCode
≈≈ "
=
≈≈# $
StatusCodes
≈≈% 0
.
≈≈0 1
Status404NotFound
≈≈1 B
,
≈≈B C
StatusMessage
∆∆ %
=
∆∆& '
$"
∆∆( *
$str
∆∆* @
{
∆∆@ A!
accountDeactivation
∆∆A T
.
∆∆T U
UserId
∆∆U [
}
∆∆[ \
$str∆∆\ Ü
"∆∆Ü á
}
«« 
}
»» 
;
»» 
}
   
var
ÃÃ 
staff
ÃÃ 
=
ÃÃ 
await
ÃÃ 
_userManager
ÃÃ *
.
ÃÃ* +
FindByIdAsync
ÃÃ+ 8
(
ÃÃ8 9!
accountDeactivation
ÃÃ9 L
.
ÃÃL M
DeactivatedBy
ÃÃM Z
)
ÃÃZ [
;
ÃÃ[ \
if
ÕÕ 
(
ÕÕ 
staff
ÕÕ 
is
ÕÕ 
null
ÕÕ 
)
ÕÕ 
{
ŒŒ 
_logger
œœ 
.
œœ 

LogWarning
œœ "
(
œœ" #
$"
œœ# %
$str
œœ% B
{
œœB C!
accountDeactivation
œœC V
.
œœV W
DeactivatedBy
œœW d
}
œœd e
$str
œœe p
"
œœp q
,
œœq r"
accountDeactivationœœs Ü
.œœÜ á
DeactivatedByœœá î
)œœî ï
;œœï ñ
return
–– 
new
–– .
 DeactivateUserAccountResponseDto
–– ;
{
—— 
	IsSuccess
““ 
=
““ 
false
““  %
,
““% &
ErrorResponse
”” !
=
””" #
new
””$ '3
%DeactivateUserAccountErrorResponseDto
””( M
{
‘‘ 

StatusCode
’’ "
=
’’# $
StatusCodes
’’% 0
.
’’0 1
Status404NotFound
’’1 B
,
’’B C
StatusMessage
÷÷ %
=
÷÷& '
$"
÷÷( *
$str
÷÷* G
{
÷÷G H!
accountDeactivation
÷÷H [
.
÷÷[ \
DeactivatedBy
÷÷\ i
}
÷÷i j
$str
÷÷j u
"
÷÷u v
}
◊◊ 
}
ÿÿ 
;
ÿÿ 
}
⁄⁄ 
user
›› 
.
›› 
Status
›› 
=
›› 
(
›› 
int
›› 
)
››  
RegistrationStatus
›› 1
.
››1 2
Deactivated
››2 =
;
››= >
user
ﬁﬁ 
.
ﬁﬁ 
DeactivatedBy
ﬁﬁ 
=
ﬁﬁ  !
accountDeactivation
ﬁﬁ! 4
.
ﬁﬁ4 5
DeactivatedBy
ﬁﬁ5 B
;
ﬁﬁB C
user
ﬂﬂ 
.
ﬂﬂ 
DeactivatedDate
ﬂﬂ  
=
ﬂﬂ! "
DateTime
ﬂﬂ# +
.
ﬂﬂ+ ,
UtcNow
ﬂﬂ, 2
;
ﬂﬂ2 3
user
‡‡ 
.
‡‡  
DeactivatedReasons
‡‡ #
=
‡‡$ %!
accountDeactivation
‡‡& 9
.
‡‡9 : 
DeactivatedReasons
‡‡: L
;
‡‡L M
user
·· 
.
·· 
EmailConfirmed
·· 
=
··  !
false
··" '
;
··' (
user
‚‚ 
.
‚‚ "
PhoneNumberConfirmed
‚‚ %
=
‚‚& '
false
‚‚( -
;
‚‚- .
_unitOfWork
ÂÂ 
.
ÂÂ 
Users
ÂÂ 
.
ÂÂ 
Update
ÂÂ $
(
ÂÂ$ %
user
ÂÂ% )
)
ÂÂ) *
;
ÂÂ* +
await
ÊÊ 
_unitOfWork
ÊÊ 
.
ÊÊ 
Complete
ÊÊ &
(
ÊÊ& '
)
ÊÊ' (
;
ÊÊ( )
_logger
ËË 
.
ËË 
LogInformation
ËË "
(
ËË" #
$"
ËË# %
$str
ËË% :
{
ËË: ;
user
ËË; ?
.
ËË? @
Id
ËË@ B
}
ËËB C
$str
ËËC W
{
ËËW X
user
ËËX \
.
ËË\ ]
Email
ËË] b
}
ËËb c
$strËËc ë
{ËËë í
staffËËí ó
.ËËó ò$
IdentificationNumberËËò ¨
}ËË¨ ≠
$strËË≠ ∞
{ËË∞ ±
staffËË± ∂
.ËË∂ ∑
	FirstNameËË∑ ¿
}ËË¿ ¡
$strËË¡ ¬
{ËË¬ √
staffËË√ »
.ËË» …
LastNameËË… —
}ËË— “
$strËË“ ‰
{ËË‰ Â#
accountDeactivationËËÂ ¯
.ËË¯ ˘"
DeactivatedReasonsËË˘ ã
}ËËã å
"ËËå ç
,ËËç é
userËËè ì
.ËËì î
IdËËî ñ
)ËËñ ó
;ËËó ò
return
ÈÈ 
new
ÈÈ .
 DeactivateUserAccountResponseDto
ÈÈ 7
{
ÍÍ 
	IsSuccess
ÎÎ 
=
ÎÎ 
true
ÎÎ  
,
ÎÎ  !
SuccessResponse
ÏÏ 
=
ÏÏ  !
new
ÏÏ" %5
'DeactivateUserAccountSuccessResponseDto
ÏÏ& M
{
ÌÌ 

StatusCode
ÓÓ 
=
ÓÓ  
StatusCodes
ÓÓ! ,
.
ÓÓ, -
Status200OK
ÓÓ- 8
,
ÓÓ8 9
StatusMessage
ÔÔ !
=
ÔÔ" #
$"
ÔÔ$ &
$str
ÔÔ& <
{
ÔÔ< =
user
ÔÔ= A
.
ÔÔA B
Id
ÔÔB D
}
ÔÔD E
$str
ÔÔE \
{
ÔÔ\ ]
user
ÔÔ] a
.
ÔÔa b
Email
ÔÔb g
}
ÔÔg h
$strÔÔh ò
{ÔÔò ô
staffÔÔô û
.ÔÔû ü$
IdentificationNumberÔÔü ≥
}ÔÔ≥ ¥
$strÔÔ¥ ∑
{ÔÔ∑ ∏
staffÔÔ∏ Ω
.ÔÔΩ æ
	FirstNameÔÔæ «
}ÔÔ« »
$strÔÔ» …
{ÔÔ…  
staffÔÔ  œ
.ÔÔœ –
LastNameÔÔ– ÿ
}ÔÔÿ Ÿ
$strÔÔŸ Ì
{ÔÔÌ Ó#
accountDeactivationÔÔÓ Å
.ÔÔÅ Ç"
DeactivatedReasonsÔÔÇ î
}ÔÔî ï
$strÔÔï ñ
"ÔÔñ ó
}
 
}
ÒÒ 
;
ÒÒ 
}
ÚÚ 	
public
ÙÙ 
async
ÙÙ 
Task
ÙÙ 
<
ÙÙ 
IEnumerable
ÙÙ %
<
ÙÙ% &$
AdministrationStaffDto
ÙÙ& <
>
ÙÙ< =
>
ÙÙ= >$
GetAdministrationStaff
ÙÙ? U
(
ÙÙU V
)
ÙÙV W
{
ıı 	
var
˜˜ 
staff_UserList
˜˜ 
=
˜˜  
(
˜˜! "
from
˜˜" &
user
˜˜' +
in
˜˜, .
await
˜˜/ 4
_unitOfWork
˜˜5 @
.
˜˜@ A
StaffAccounts
˜˜A N
.
˜˜N O
GetAll
˜˜O U
(
˜˜U V
)
˜˜V W
orderby
¯¯" )
user
¯¯* .
.
¯¯. /
RegistrationDate
¯¯/ ?

descending
¯¯@ J
select
˘˘" (
new
˘˘) ,$
AdministrationStaffDto
˘˘- C
(
˙˙  !
user
˚˚$ (
.
˚˚( )
Id
˚˚) +
,
˚˚+ ,
user
¸¸$ (
.
¸¸( )"
IdentificationNumber
¸¸) =
,
¸¸= >
user
˝˝$ (
.
˝˝( )
	FirstName
˝˝) 2
,
˝˝2 3
user
˛˛$ (
.
˛˛( )

MiddleName
˛˛) 3
,
˛˛3 4
user
ˇˇ$ (
.
ˇˇ( )
LastName
ˇˇ) 1
,
ˇˇ1 2
user
ÄÄ$ (
.
ÄÄ( )
DepartmentName
ÄÄ) 7
,
ÄÄ7 8
user
ÅÅ$ (
.
ÅÅ( )
UnitName
ÅÅ) 1
,
ÅÅ1 2
user
ÇÇ$ (
.
ÇÇ( )
Email
ÇÇ) .
,
ÇÇ. /
user
ÉÉ$ (
.
ÉÉ( )
PhoneNumber
ÉÉ) 4
!
ÉÉ4 5
,
ÉÉ5 6
user
ÑÑ$ (
.
ÑÑ( )
RoleName
ÑÑ) 1
,
ÑÑ1 2/
!RegistrationStatusEnumDescription
ÖÖ$ E
.
ÖÖE F$
RegistrationStatusEnum
ÖÖF \
(
ÖÖ\ ]
user
ÖÖ] a
.
ÖÖa b
Status
ÖÖb h
)
ÖÖh i
.
ÖÖi j
ToString
ÖÖj r
(
ÖÖr s
)
ÖÖs t
,
ÖÖt u
user
ÜÜ$ (
.
ÜÜ( )
RegistrationDate
ÜÜ) 9
)
áá  !
)
áá! "
.
áá" #
ToList
áá# )
(
áá) *
)
áá* +
;
áá+ ,
return
ââ 
staff_UserList
ââ !
;
ââ! "
}
ãã 	
public
çç 
async
çç 
Task
çç 
<
çç 
IEnumerable
çç %
<
çç% &'
AdministrationCustomerDto
çç& ?
>
çç? @
>
çç@ A'
GetAdministrationCustomer
ççB [
(
çç[ \
)
çç\ ]
{
éé 	
var
èè 
customer_UserList
èè !
=
èè" #
(
èè$ %
from
èè% )
user
èè* .
in
èè/ 1
await
èè2 7
_unitOfWork
èè8 C
.
èèC D
Users
èèD I
.
èèI J
GetAll
èèJ P
(
èèP Q
u
èèQ R
=>
èèS U
u
èèV W
.
èèW X
UserType
èèX `
==
èèa c
(
èèd e
int
èèe h
)
èèh i
UserAccountType
èèi x
.
èèx y
Customerèèy Å
)èèÅ Ç
join
êê% )
channel
êê* 1
in
êê2 4
await
êê5 :
_unitOfWork
êê; F
.
êêF G
Channels
êêG O
.
êêO P
GetAll
êêP V
(
êêV W
)
êêW X
on
ëë% '
user
ëë( ,
.
ëë, -
	ChannelId
ëë- 6
equals
ëë7 =
channel
ëë> E
.
ëëE F
	ChannelId
ëëF O
orderby
íí% ,
user
íí- 1
.
íí1 2
RegistrationDate
íí2 B

descending
ííC M
select
ìì% +
new
ìì, /'
AdministrationCustomerDto
ìì0 I
(
îî% &
user
ïï( ,
.
ïï, -
Id
ïï- /
,
ïï/ 0
user
ññ( ,
.
ññ, -"
IdentificationNumber
ññ- A
!
ññA B
,
ññB C
$"
óó( *
{
óó* +
user
óó+ /
.
óó/ 0
	FirstName
óó0 9
}
óó9 :
$str
óó: ;
{
óó; <
user
óó< @
.
óó@ A

MiddleName
óóA K
}
óóK L
$str
óóL M
{
óóM N
user
óóN R
.
óóR S
LastName
óóS [
}
óó[ \
"
óó\ ]
,
óó] ^
user
òò( ,
.
òò, -
Email
òò- 2
!
òò2 3
,
òò3 4
user
ôô( ,
.
ôô, -
PhoneNumber
ôô- 8
!
ôô8 9
,
ôô9 :
user
öö( ,
.
öö, -
RegistrationDate
öö- =
,
öö= >
channel
õõ( /
.
õõ/ 0
ChannelName
õõ0 ;
!
õõ; <
,
õõ< =/
!RegistrationStatusEnumDescription
úú( I
.
úúI J$
RegistrationStatusEnum
úúJ `
(
úú` a
user
úúa e
.
úúe f
Status
úúf l
)
úúl m
.
úúm n
ToString
úún v
(
úúv w
)
úúw x
)
ûû% &
)
ûû& '
.
ûû' (
ToList
ûû( .
(
ûû. /
)
ûû/ 0
;
ûû0 1
return
†† 
customer_UserList
†† $
;
††$ %
}
¢¢ 	
public
§§ 
async
§§ 
Task
§§ 
<
§§ 
IEnumerable
§§ %
<
§§% &'
AdministrationPartnersDto
§§& ?
>
§§? @
>
§§@ A'
GetAdministrationPartners
§§B [
(
§§[ \
)
§§\ ]
{
•• 	
var
¶¶ 
partner_UserList
¶¶  
=
¶¶! "
(
¶¶# $
from
¶¶$ (
user
¶¶) -
in
¶¶. 0
await
¶¶1 6
_unitOfWork
¶¶7 B
.
¶¶B C
Users
¶¶C H
.
¶¶H I
GetAll
¶¶I O
(
¶¶O P
u
¶¶P Q
=>
¶¶R T
u
¶¶U V
.
¶¶V W
UserType
¶¶W _
==
¶¶` b
(
¶¶c d
int
¶¶d g
)
¶¶g h
UserAccountType
¶¶h w
.
¶¶w x
Partners¶¶x Ä
)¶¶Ä Å
orderby
ßß$ +
user
ßß, 0
.
ßß0 1
RegistrationDate
ßß1 A

descending
ßßB L
select
®®$ *
new
®®+ .'
AdministrationPartnersDto
®®/ H
(
©©% &
user
™™) -
.
™™- .
Id
™™. 0
,
™™0 1
user
´´) -
.
´´- .
PartnerName
´´. 9
!
´´9 :
,
´´: ;
user
¨¨) -
.
¨¨- .
Email
¨¨. 3
!
¨¨3 4
,
¨¨4 5
user
≠≠) -
.
≠≠- .
PhoneNumber
≠≠. 9
!
≠≠9 :
,
≠≠: ;
user
ÆÆ) -
.
ÆÆ- .$
ContactPerson_FullName
ÆÆ. D
!
ÆÆD E
,
ÆÆE F
user
ØØ) -
.
ØØ- .!
ContactPerson_Email
ØØ. A
!
ØØA B
,
ØØB C
user
∞∞) -
.
∞∞- .'
ContactPerson_PhoneNumber
∞∞. G
!
∞∞G H
,
∞∞H I
user
±±) -
.
±±- .
RegistrationDate
±±. >
,
±±> ?/
!RegistrationStatusEnumDescription
≤≤) J
.
≤≤J K$
RegistrationStatusEnum
≤≤K a
(
≤≤a b
user
≤≤b f
.
≤≤f g
Status
≤≤g m
)
≤≤m n
.
≤≤n o
ToString
≤≤o w
(
≤≤w x
)
≤≤x y
)
≥≥% &
)
≥≥& '
.
≥≥' (
ToList
≥≥( .
(
≥≥. /
)
≥≥/ 0
;
≥≥0 1
return
∂∂ 
partner_UserList
∂∂ #
;
∂∂# $
}
∑∑ 	
public
ππ 
async
ππ 
Task
ππ 
<
ππ 
IEnumerable
ππ %
<
ππ% &$
AdministrationStaffDto
ππ& <
>
ππ< =
>
ππ= >.
 GetAdministrationDepartmentStaff
ππ? _
(
ππ_ `
int
ππ` c
departmentId
ππd p
)
ππp q
{
∫∫ 	
var
ΩΩ 
staff_UserList
ΩΩ 
=
ΩΩ  
(
ΩΩ! "
from
ΩΩ" &
user
ΩΩ' +
in
ΩΩ, .
await
ΩΩ/ 4
_unitOfWork
ΩΩ5 @
.
ΩΩ@ A
Users
ΩΩA F
.
ΩΩF G
GetAll
ΩΩG M
(
ΩΩM N
u
ΩΩN O
=>
ΩΩP R
u
ΩΩS T
.
ΩΩT U
UserType
ΩΩU ]
==
ΩΩ^ `
(
ΩΩa b
int
ΩΩb e
)
ΩΩe f
UserAccountType
ΩΩf u
.
ΩΩu v
Staff
ΩΩv {
)
ΩΩ{ |
join
ææ" &

department
ææ' 1
in
ææ2 4
await
ææ5 :
_unitOfWork
ææ; F
.
ææF G

Department
ææG Q
.
ææQ R
GetAll
ææR X
(
ææX Y
)
ææY Z
on
øø& (
user
øø) -
.
øø- .
DepartmentId
øø. :
equals
øø; A

department
øøB L
.
øøL M
DepartmentId
øøM Y
join
¿¿" &
unit
¿¿' +
in
¿¿, .
await
¿¿/ 4
_unitOfWork
¿¿5 @
.
¿¿@ A
DepartmentUnit
¿¿A O
.
¿¿O P
GetAll
¿¿P V
(
¿¿V W
)
¿¿W X
on
¡¡& (
user
¡¡) -
.
¡¡- .
UnitId
¡¡. 4
equals
¡¡5 ;
unit
¡¡< @
.
¡¡@ A
UnitId
¡¡A G
join
¬¬" &
usrole
¬¬' -
in
¬¬. 0
await
¬¬1 6
_unitOfWork
¬¬7 B
.
¬¬B C

UsersRoles
¬¬C M
.
¬¬M N
GetAll
¬¬N T
(
¬¬T U
)
¬¬U V
on
√√& (
user
√√) -
.
√√- .
Id
√√. 0
equals
√√1 7
usrole
√√8 >
.
√√> ?
UserId
√√? E
join
ƒƒ" &
role
ƒƒ' +
in
ƒƒ, .
await
ƒƒ/ 4
_unitOfWork
ƒƒ5 @
.
ƒƒ@ A
Roles
ƒƒA F
.
ƒƒF G
GetAll
ƒƒG M
(
ƒƒM N
)
ƒƒN O
on
≈≈& (
usrole
≈≈) /
.
≈≈/ 0
RoleId
≈≈0 6
equals
≈≈7 =
role
≈≈> B
.
≈≈B C
Id
≈≈C E
where
∆∆" '
user
∆∆( ,
.
∆∆, -
DepartmentId
∆∆- 9
==
∆∆: <
departmentId
∆∆= I
orderby
««" )
user
««* .
.
««. /
RegistrationDate
««/ ?

descending
««@ J
select
»»" (
new
»») ,$
AdministrationStaffDto
»»- C
(
……" #
user
  & *
.
  * +
Id
  + -
,
  - .
user
ÀÀ& *
.
ÀÀ* +"
IdentificationNumber
ÀÀ+ ?
!
ÀÀ? @
,
ÀÀ@ A
user
ÃÃ& *
.
ÃÃ* +
	FirstName
ÃÃ+ 4
!
ÃÃ4 5
,
ÃÃ5 6
user
ÕÕ& *
.
ÕÕ* +

MiddleName
ÕÕ+ 5
!
ÕÕ5 6
,
ÕÕ6 7
user
ŒŒ& *
.
ŒŒ* +
LastName
ŒŒ+ 3
!
ŒŒ3 4
,
ŒŒ4 5

department
œœ& 0
.
œœ0 1
DepartmentName
œœ1 ?
,
œœ? @
unit
––& *
.
––* +
UnitName
––+ 3
,
––3 4
user
——& *
.
——* +
Email
——+ 0
!
——0 1
,
——1 2
user
““& *
.
““* +
PhoneNumber
““+ 6
!
““6 7
,
““7 8
role
””& *
.
””* +
Name
””+ /
!
””/ 0
,
””0 1/
!RegistrationStatusEnumDescription
‘‘& G
.
‘‘G H$
RegistrationStatusEnum
‘‘H ^
(
‘‘^ _
user
‘‘_ c
.
‘‘c d
Status
‘‘d j
)
‘‘j k
.
‘‘k l
ToString
‘‘l t
(
‘‘t u
)
‘‘u v
,
‘‘v w
user
’’& *
.
’’* +
RegistrationDate
’’+ ;
)
÷÷" #
)
÷÷# $
.
÷÷$ %
ToList
÷÷% +
(
÷÷+ ,
)
÷÷, -
;
÷÷- .
return
ÿÿ 
staff_UserList
ÿÿ !
;
ÿÿ! "
}
⁄⁄ 	
public
‹‹ 
async
‹‹ 
Task
‹‹ 
<
‹‹ 
IEnumerable
‹‹ %
<
‹‹% &$
AdministrationStaffDto
‹‹& <
>
‹‹< =
>
‹‹= >2
$GetAdministrationDepartmentUnitStaff
‹‹? c
(
‹‹c d
int
‹‹d g
unitId
‹‹h n
)
‹‹n o
{
›› 	
var
ﬂﬂ 
staff_UserList
ﬂﬂ 
=
ﬂﬂ  
(
ﬂﬂ! "
from
ﬂﬂ" &
user
ﬂﬂ' +
in
ﬂﬂ, .
await
ﬂﬂ/ 4
_unitOfWork
ﬂﬂ5 @
.
ﬂﬂ@ A
Users
ﬂﬂA F
.
ﬂﬂF G
GetAll
ﬂﬂG M
(
ﬂﬂM N
u
ﬂﬂN O
=>
ﬂﬂP R
u
ﬂﬂS T
.
ﬂﬂT U
UserType
ﬂﬂU ]
==
ﬂﬂ^ `
(
ﬂﬂa b
int
ﬂﬂb e
)
ﬂﬂe f
UserAccountType
ﬂﬂf u
.
ﬂﬂu v
Staff
ﬂﬂv {
)
ﬂﬂ{ |
join
‡‡" &

department
‡‡' 1
in
‡‡2 4
await
‡‡5 :
_unitOfWork
‡‡; F
.
‡‡F G

Department
‡‡G Q
.
‡‡Q R
GetAll
‡‡R X
(
‡‡X Y
)
‡‡Y Z
on
··& (
user
··) -
.
··- .
DepartmentId
··. :
equals
··; A

department
··B L
.
··L M
DepartmentId
··M Y
join
‚‚" &
unit
‚‚' +
in
‚‚, .
await
‚‚/ 4
_unitOfWork
‚‚5 @
.
‚‚@ A
DepartmentUnit
‚‚A O
.
‚‚O P
GetAll
‚‚P V
(
‚‚V W
)
‚‚W X
on
„„& (
user
„„) -
.
„„- .
UnitId
„„. 4
equals
„„5 ;
unit
„„< @
.
„„@ A
UnitId
„„A G
join
‰‰" &
usrole
‰‰' -
in
‰‰. 0
await
‰‰1 6
_unitOfWork
‰‰7 B
.
‰‰B C

UsersRoles
‰‰C M
.
‰‰M N
GetAll
‰‰N T
(
‰‰T U
)
‰‰U V
on
ÂÂ& (
user
ÂÂ) -
.
ÂÂ- .
Id
ÂÂ. 0
equals
ÂÂ1 7
usrole
ÂÂ8 >
.
ÂÂ> ?
UserId
ÂÂ? E
join
ÊÊ" &
role
ÊÊ' +
in
ÊÊ, .
await
ÊÊ/ 4
_unitOfWork
ÊÊ5 @
.
ÊÊ@ A
Roles
ÊÊA F
.
ÊÊF G
GetAll
ÊÊG M
(
ÊÊM N
)
ÊÊN O
on
ÁÁ& (
usrole
ÁÁ) /
.
ÁÁ/ 0
RoleId
ÁÁ0 6
equals
ÁÁ7 =
role
ÁÁ> B
.
ÁÁB C
Id
ÁÁC E
where
ËË" '
user
ËË( ,
.
ËË, -
UnitId
ËË- 3
==
ËË4 6
unitId
ËË7 =
orderby
ÈÈ" )
user
ÈÈ* .
.
ÈÈ. /
RegistrationDate
ÈÈ/ ?

descending
ÈÈ@ J
select
ÍÍ" (
new
ÍÍ) ,$
AdministrationStaffDto
ÍÍ- C
(
ÎÎ" #
user
ÏÏ& *
.
ÏÏ* +
Id
ÏÏ+ -
,
ÏÏ- .
user
ÌÌ& *
.
ÌÌ* +"
IdentificationNumber
ÌÌ+ ?
!
ÌÌ? @
,
ÌÌ@ A
user
ÓÓ& *
.
ÓÓ* +
	FirstName
ÓÓ+ 4
!
ÓÓ4 5
,
ÓÓ5 6
user
ÔÔ& *
.
ÔÔ* +

MiddleName
ÔÔ+ 5
!
ÔÔ5 6
,
ÔÔ6 7
user
& *
.
* +
LastName
+ 3
!
3 4
,
4 5

department
ÒÒ& 0
.
ÒÒ0 1
DepartmentName
ÒÒ1 ?
,
ÒÒ? @
unit
ÚÚ& *
.
ÚÚ* +
UnitName
ÚÚ+ 3
,
ÚÚ3 4
user
ÛÛ& *
.
ÛÛ* +
Email
ÛÛ+ 0
!
ÛÛ0 1
,
ÛÛ1 2
user
ÙÙ& *
.
ÙÙ* +
PhoneNumber
ÙÙ+ 6
!
ÙÙ6 7
,
ÙÙ7 8
role
ıı& *
.
ıı* +
Name
ıı+ /
!
ıı/ 0
,
ıı0 1/
!RegistrationStatusEnumDescription
ˆˆ& G
.
ˆˆG H$
RegistrationStatusEnum
ˆˆH ^
(
ˆˆ^ _
user
ˆˆ_ c
.
ˆˆc d
Status
ˆˆd j
)
ˆˆj k
.
ˆˆk l
ToString
ˆˆl t
(
ˆˆt u
)
ˆˆu v
,
ˆˆv w
user
˜˜& *
.
˜˜* +
RegistrationDate
˜˜+ ;
)
¯¯" #
)
¯¯# $
.
¯¯$ %
ToList
¯¯% +
(
¯¯+ ,
)
¯¯, -
;
¯¯- .
return
˙˙ 
staff_UserList
˙˙ !
;
˙˙! "
}
˚˚ 	
}
¸¸ 
}˝˝ ù

/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/ChannelsDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
{ 
public 
class  
ChannelsDtoValidator "
:# $
AbstractValidator% 6
<6 7
ChannelCreateDto7 G
>G H
{ 
public  
ChannelsDtoValidator	 
( 
) 
{ 
RuleFor		 
(		 
x		 
=>		 
x		 
.		 
	ChannelId		 $
)		$ %
.		% & 
GreaterThanOrEqualTo		& :
(		: ;
$num		; <
)		< =
;		= >
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
ChannelName

 &
)

& '
.

' (
NotEmpty

( 0
(

0 1
)

1 2
.

2 3
Length

3 9
(

9 :
$num

: ;
,

; <
$num

= ?
)

? @
.

@ A
WithMessage

A L
(

L M
$str	

M ó
)


ó ò
;


ò ô
} 	
} 
} g
e/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Usings.csÜ

|/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Validations/MenusDtoValidator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Validations$ /
{ 
public 
class 
MenusDtoValidator 
:  !
AbstractValidator" 3
<3 4
MenusDto4 <
>< =
{ 
public 
MenusDtoValidator	 
( 
) 
{		 
RuleFor

 
(

 
x

 
=>

 
x

 
.

 
menuId

 !
)

! "
.

" # 
GreaterThanOrEqualTo

# 7
(

7 8
$num

8 9
)

9 :
;

: ;
RuleFor 
( 
x 
=> 
x 
. 
menuName #
)# $
.$ %
NotEmpty% -
(- .
). /
./ 0
Length0 6
(6 7
$num7 8
,8 9
$num: =
)= >
.> ?
WithMessage? J
(J K
$str	K ã
)
ã å
;
å ç
} 	
} 
} óÒ
à/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/UseCases/UserAccounts/UserAccountsService.cs
	namespace

 	
Modules


 
.

 
Users

 
.

 
Application

 #
.

# $
UseCases

$ ,
.

, -
UserAccounts

- 9
{ 
public 
class 
UserAccountsService !
:" # 
IUserAccountsService$ 8
{ 
private 
readonly 
UserManager $
<$ %#
ApplicationIdentityUser% <
>< =
_userManager> J
;J K
private 
readonly 
SignInManager &
<& '#
ApplicationIdentityUser' >
>> ?
_signInManager@ N
;N O
private 
readonly 
ILogger  
<  !
UserAccountsService! 4
>4 5
_logger6 =
;= >
private 
readonly !
ITokenStoreRepository .
_tokenService/ <
;< =
private 
readonly 
IUnitOfWork $
_unitOfWork% 0
;0 1
private 
readonly 
IMenuService %
_menuService& 2
;2 3
private 
readonly 

IValidator #
<# $-
!PartnerBankRegistrationRequestDto$ E
>E F
_partnerValidatorG X
;X Y
private 
readonly 
IPasswordValidator +
<+ ,#
ApplicationIdentityUser, C
>C D
_passwordValidatorE W
;W X
public 
UserAccountsService "
(" #
UserManager# .
<. /#
ApplicationIdentityUser/ F
>F G
userManagerH S
,S T
SignInManagerU b
<b c#
ApplicationIdentityUserc z
>z {
signInManager	| â
,
â ä
IUnitOfWork
ã ñ

unitOfWork
ó °
,
° ¢
ILogger
£ ™
<
™ ´!
UserAccountsService
´ æ
>
æ ø
logger
¿ ∆
,
∆ «!
ITokenStoreRepository& ;
	tokenRepo< E
,E F

IValidatorG Q
<Q R-
!PartnerBankRegistrationRequestDtoR s
>s t
partnerValidator	u Ö
,
Ö Ü
IMenuService
á ì
menuService
î ü
,
ü † 
IPasswordValidator
° ≥
<
≥ ¥%
ApplicationIdentityUser
¥ À
>
À Ã
passwordValidator
Õ ﬁ
)
ﬁ ﬂ
{ 
_userManager 
= 
userManager &
;& '
_signInManager 
= 
signInManager *
;* +
_unitOfWork 
= 

unitOfWork $
;$ %
_logger 
= 
logger 
; 
_tokenService 
= 
	tokenRepo %
;% &
_partnerValidator   
=   
partnerValidator    0
;  0 1
_menuService!! 
=!! 
menuService!! &
;!!& '
_passwordValidator"" 
=""  
passwordValidator""! 2
;""2 3
}## 	
public%% 
async%% 
Task%% 
<%% "
ChangePasswordResponse%% 0
>%%0 1
ChangePassword%%2 @
(%%@ A$
ChangePasswordRequestDto%%A Y
changePassword%%Z h
)%%h i
{&& 	
if'' 
('' 
changePassword'' 
is''  
null''! %
)''% &
{(( 
_logger)) 
.)) 

LogWarning)) "
())" #
$str))# E
)))E F
;))F G
return** 
new** "
ChangePasswordResponse** 1
{++ 
	IsSuccess,, 
=,, 
false,,  %
,,,% &
ErrorResponse-- !
=--" #
new--$ ''
ChangePasswordErrorResponse--( C
{.. 

StatusCode// "
=//# $
StatusCodes//% 0
.//0 1
Status400BadRequest//1 D
,//D E
StatusMessage00 %
=00& '
$str00( ?
}11 
}22 
;22 
}33 
try55 
{66 
var88 
user88 
=88 
await88  
_userManager88! -
.88- .
FindByIdAsync88. ;
(88; <
changePassword88< J
.88J K
UserId88K Q
)88Q R
;88R S
if99 
(99 
user99 
is99 
null99 
)99  
{:: 
_logger;; 
.;; 

LogWarning;; &
(;;& '
$";;' )
$str;;) ?
{;;? @
changePassword;;@ N
.;;N O
UserId;;O U
};;U V
$str;;V a
";;a b
,;;b c
changePassword;;d r
.;;r s
UserId;;s y
);;y z
;;;z {
return<< 
new<< "
ChangePasswordResponse<< 5
{== 
	IsSuccess>> !
=>>" #
false>>$ )
,>>) *
ErrorResponse?? %
=??& '
new??( +'
ChangePasswordErrorResponse??, G
{@@ 

StatusCodeAA &
=AA' (
StatusCodesAA) 4
.AA4 5
Status404NotFoundAA5 F
,AAF G
StatusMessageBB )
=BB* +
$"BB, .
$strBB. D
{BBD E
changePasswordBBE S
.BBS T
UserIdBBT Z
}BBZ [
$strBB[ f
"BBf g
}CC 
}DD 
;DD 
}EE 
varGG 
validationResultGG $
=GG% &
awaitGG' ,
_passwordValidatorGG- ?
.GG? @
ValidateAsyncGG@ M
(GGM N
_userManagerGGN Z
,GGZ [
userGG\ `
,GG` a
changePasswordGGb p
.GGp q
NewPasswordGGq |
)GG| }
;GG} ~
ifHH 
(HH 
!HH 
validationResultHH %
.HH% &
	SucceededHH& /
)HH/ 0
{II 
returnJJ 
newJJ "
ChangePasswordResponseJJ 5
{KK 
	IsSuccessLL !
=LL" #
falseLL$ )
,LL) *
ErrorResponseMM %
=MM& '
newMM( +'
ChangePasswordErrorResponseMM, G
{NN 

StatusCodeOO &
=OO' (
StatusCodesOO) 4
.OO4 5
Status400BadRequestOO5 H
,OOH I
StatusMessagePP )
=PP* +
$"PP, .
$strPP. H
{PPH I
stringPPI O
.PPO P
JoinPPP T
(PPT U
$strPPU Y
,PPY Z
validationResultPP[ k
.PPk l
ErrorsPPl r
.PPr s
SelectPPs y
(PPy z
ePPz {
=>PP| ~
e	PP Ä
.
PPÄ Å
Description
PPÅ å
)
PPå ç
)
PPç é
}
PPé è
"
PPè ê
}QQ 
}RR 
;RR 
}SS 
varVV 
resultVV 
=VV 
awaitVV "
_userManagerVV# /
.VV/ 0
ChangePasswordAsyncVV0 C
(VVC D
userVVD H
,VVH I
changePasswordVVJ X
.VVX Y
OldPasswordVVY d
,VVd e
changePasswordVVf t
.VVt u
NewPassword	VVu Ä
)
VVÄ Å
;
VVÅ Ç
ifXX 
(XX 
resultXX 
.XX 
	SucceededXX $
)XX$ %
{YY 
user[[ 
.[[ 
IsFirstTime[[ $
=[[% &
false[[' ,
;[[, -
await\\ 
_userManager\\ &
.\\& '
UpdateAsync\\' 2
(\\2 3
user\\3 7
)\\7 8
;\\8 9
_logger^^ 
.^^ 
LogInformation^^ *
(^^* +
$"^^+ -
$str^^- e
{^^e f
changePassword^^f t
.^^t u
UserId^^u {
}^^{ |
$str^^| }
"^^} ~
,^^~ 
changePassword
^^Ä é
.
^^é è
UserId
^^è ï
)
^^ï ñ
;
^^ñ ó
return__ 
new__ "
ChangePasswordResponse__ 5
{`` 
	IsSuccessaa !
=aa" #
trueaa$ (
,aa( )
SuccessResponsebb '
=bb( )
newbb* -)
ChangePasswordSuccessResponsebb. K
{cc 

StatusCodedd &
=dd' (
StatusCodesdd) 4
.dd4 5
Status200OKdd5 @
,dd@ A
StatusMessageee )
=ee* +
$"ee, .
$stree. >
{ee> ?
resultee? E
.eeE F
ToStringeeF N
(eeN O
)eeO P
}eeP Q
"eeQ R
}ff 
}gg 
;gg 
}ii 
ifkk 
(kk 
!kk 
resultkk 
.kk 
	Succeededkk %
)kk% &
{ll 
_loggermm 
.mm 

LogWarningmm &
(mm& '
$"mm' )
$strmm) Z
{mmZ [
changePasswordmm[ i
.mmi j
UserIdmmj p
}mmp q
$strmmq {
{mm{ |
string	mm| Ç
.
mmÇ É
Join
mmÉ á
(
mmá à
$str
mmà å
,
mmå ç
result
mmé î
.
mmî ï
Errors
mmï õ
.
mmõ ú
Select
mmú ¢
(
mm¢ £
e
mm£ §
=>
mm• ß
e
mm® ©
.
mm© ™
Description
mm™ µ
)
mmµ ∂
)
mm∂ ∑
}
mm∑ ∏
"
mm∏ π
,
mmπ ∫
changePassword
mmª …
.
mm…  
UserId
mm  –
,
mm– —
string
mm“ ÿ
.
mmÿ Ÿ
Join
mmŸ ›
(
mm› ﬁ
$str
mmﬁ ‚
,
mm‚ „
result
mm‰ Í
.
mmÍ Î
Errors
mmÎ Ò
.
mmÒ Ú
Select
mmÚ ¯
(
mm¯ ˘
e
mm˘ ˙
=>
mm˚ ˝
e
mm˛ ˇ
.
mmˇ Ä
Description
mmÄ ã
)
mmã å
)
mmå ç
)
mmç é
;
mmé è
returnnn 
newnn "
ChangePasswordResponsenn 5
{oo 
	IsSuccesspp !
=pp" #
falsepp$ )
,pp) *
ErrorResponseqq %
=qq& '
newqq( +'
ChangePasswordErrorResponseqq, G
{rr 

StatusCodess &
=ss' (
StatusCodesss) 4
.ss4 5
Status400BadRequestss5 H
,ssH I
StatusMessagett )
=tt* +
$"tt, .
$strtt. H
{ttH I
stringttI O
.ttO P
JointtP T
(ttT U
$strttU Y
,ttY Z
resulttt[ a
.tta b
Errorsttb h
.tth i
Selecttti o
(tto p
ettp q
=>ttr t
ettu v
.ttv w
Description	ttw Ç
)
ttÇ É
)
ttÉ Ñ
}
ttÑ Ö
"
ttÖ Ü
}uu 
}vv 
;vv 
}ww 
returnyy 
nullyy 
!yy 
;yy 
}{{ 
catch|| 
(|| 
	Exception|| 
ex|| 
)||  
{}} 
_logger~~ 
.~~ 
LogError~~  
(~~  !
ex~~! #
,~~# $
$"~~% '
$str~~' o
{~~o p
changePassword~~p ~
.~~~ 
UserId	~~ Ö
}
~~Ö Ü
$str
~~Ü á
"
~~á à
,
~~à â
changePassword
~~ä ò
?
~~ò ô
.
~~ô ö
UserId
~~ö †
)
~~† °
;
~~° ¢
return 
new "
ChangePasswordResponse 1
{
ÄÄ 
	IsSuccess
ÅÅ 
=
ÅÅ 
false
ÅÅ  %
,
ÅÅ% &
ErrorResponse
ÇÇ !
=
ÇÇ" #
new
ÇÇ$ ')
ChangePasswordErrorResponse
ÇÇ( C
{
ÉÉ 

StatusCode
ÑÑ "
=
ÑÑ# $
StatusCodes
ÑÑ% 0
.
ÑÑ0 1*
Status500InternalServerError
ÑÑ1 M
,
ÑÑM N
StatusMessage
ÖÖ %
=
ÖÖ& '
$"
ÖÖ( *
$str
ÖÖ* b
{
ÖÖb c
ex
ÖÖc e
.
ÖÖe f
InnerException
ÖÖf t
!
ÖÖt u
.
ÖÖu v
Message
ÖÖv }
}
ÖÖ} ~
"
ÖÖ~ 
}
ÜÜ 
}
áá 
;
áá 
}
ââ 
}
ää 	
public
åå 
async
åå 
Task
åå 
<
åå #
ResetPasswordResponse
åå /
>
åå/ 0*
ResetPasswordViaEmailAddress
åå1 M
(
ååM N%
ResetPasswordRequestDto
ååN e
resetPassword
ååf s
)
åås t
{
çç 	
if
éé 
(
éé 
resetPassword
éé 
is
éé  
null
éé! %
)
éé% &
{
èè 
_logger
êê 
.
êê 

LogWarning
êê "
(
êê" #
$str
êê# D
)
êêD E
;
êêE F
return
ëë 
new
ëë #
ResetPasswordResponse
ëë 0
{
íí 
	IsSuccess
ìì 
=
ìì 
false
ìì  %
,
ìì% &
ErrorResponse
îî !
=
îî" #
new
îî$ '(
ResetPasswordErrorResponse
îî( B
{
ïï 

StatusCode
ññ "
=
ññ# $
StatusCodes
ññ% 0
.
ññ0 1!
Status400BadRequest
ññ1 D
,
ññD E
StatusMessage
óó %
=
óó& '
$str
óó( ?
}
òò 
}
ôô 
;
ôô 
}
öö 
try
úú 
{
ùù 
var
üü 
	otpresult
üü 
=
üü 
await
üü  %
_unitOfWork
üü& 1
.
üü1 2

TokenStore
üü2 <
.
üü< =
VerifyToken
üü= H
(
üüH I
resetPassword
üüI V
.
üüV W
Phone_OR_Email
üüW e
,
üüe f
resetPassword
üüg t
.
üüt u
Token
üüu z
)
üüz {
;
üü{ |
if
†† 
(
†† 
	otpresult
†† 
!=
††  
$str
††! +
)
††+ ,
{
°° 
_logger
¢¢ 
.
¢¢ 

LogWarning
¢¢ &
(
¢¢& '
$"
¢¢' )
$str
¢¢) 3
{
¢¢3 4
resetPassword
¢¢4 A
.
¢¢A B
Token
¢¢B G
}
¢¢G H
$str
¢¢H T
"
¢¢T U
,
¢¢U V
resetPassword
¢¢W d
.
¢¢d e
Phone_OR_Email
¢¢e s
)
¢¢s t
;
¢¢t u
return
££ 
new
££ #
ResetPasswordResponse
££ 4
{
§§ 
	IsSuccess
•• !
=
••" #
false
••$ )
,
••) *
ErrorResponse
¶¶ %
=
¶¶& '
new
¶¶( +(
ResetPasswordErrorResponse
¶¶, F
{
ßß 

StatusCode
®® &
=
®®' (
StatusCodes
®®) 4
.
®®4 5
Status404NotFound
®®5 F
,
®®F G
StatusMessage
©© )
=
©©* +
$"
©©, .
$str
©©. 9
{
©©9 :
resetPassword
©©: G
.
©©G H
Token
©©H M
}
©©M N
$str
©©N [
"
©©[ \
}
™™ 
}
´´ 
;
´´ 
}
¨¨ 
var
ØØ 

otp_result
ØØ 
=
ØØ  
_unitOfWork
ØØ! ,
.
ØØ, -

TokenStore
ØØ- 7
.
ØØ7 8
VerifyTokenExpiry
ØØ8 I
(
ØØI J
resetPassword
ØØJ W
.
ØØW X
Phone_OR_Email
ØØX f
,
ØØf g
resetPassword
ØØh u
.
ØØu v
Token
ØØv {
)
ØØ{ |
;
ØØ| }
if
∞∞ 
(
∞∞ 

otp_result
∞∞ 
!=
∞∞  
$str
∞∞! +
)
∞∞+ ,
{
±± 
_logger
≤≤ 
.
≤≤ 

LogWarning
≤≤ &
(
≤≤& '
$"
≤≤' )
$str
≤≤) A
{
≤≤A B
resetPassword
≤≤B O
.
≤≤O P
Phone_OR_Email
≤≤P ^
}
≤≤^ _
$str
≤≤_ o
{
≤≤o p
resetPassword
≤≤p }
.
≤≤} ~
Token≤≤~ É
}≤≤É Ñ
$str≤≤Ñ í
"≤≤í ì
,≤≤ì î
resetPassword≤≤ï ¢
.≤≤¢ £
Phone_OR_Email≤≤£ ±
)≤≤± ≤
;≤≤≤ ≥
return
≥≥ 
new
≥≥ #
ResetPasswordResponse
≥≥ 4
{
¥¥ 
	IsSuccess
µµ !
=
µµ" #
false
µµ$ )
,
µµ) *
ErrorResponse
∂∂ %
=
∂∂& '
new
∂∂( +(
ResetPasswordErrorResponse
∂∂, F
{
∑∑ 

StatusCode
∏∏ &
=
∏∏' (
StatusCodes
∏∏) 4
.
∏∏4 5!
Status400BadRequest
∏∏5 H
,
∏∏H I
StatusMessage
ππ )
=
ππ* +
$"
ππ, .
$str
ππ. G
{
ππG H
resetPassword
ππH U
.
ππU V
Phone_OR_Email
ππV d
.
ππd e
ToLower
ππe l
(
ππl m
)
ππm n
}
ππn o
$strππo Ä
{ππÄ Å
resetPasswordππÅ é
.ππé è
Tokenππè î
}ππî ï
$strππï §
"ππ§ •
}
∫∫ 
}
ªª 
;
ªª 
}
ΩΩ 
var
¡¡ 
appUser
¡¡ 
=
¡¡ 
await
¡¡ #
_unitOfWork
¡¡$ /
.
¡¡/ 0
Users
¡¡0 5
.
¡¡5 6
Get
¡¡6 9
(
¡¡9 :
u
¡¡: ;
=>
¡¡< >
u
¡¡? @
.
¡¡@ A
Email
¡¡A F
==
¡¡G I
resetPassword
¡¡J W
.
¡¡W X
Phone_OR_Email
¡¡X f
)
¡¡f g
;
¡¡g h
var
¬¬ 
user
¬¬ 
=
¬¬ 
await
¬¬  
_userManager
¬¬! -
.
¬¬- .
FindByIdAsync
¬¬. ;
(
¬¬; <
appUser
¬¬< C
!
¬¬C D
.
¬¬D E
Id
¬¬E G
)
¬¬G H
;
¬¬H I
if
≈≈ 
(
≈≈ 
user
≈≈ 
is
≈≈ 
null
≈≈  
)
≈≈  !
{
∆∆ 
_logger
«« 
.
«« 

LogWarning
«« &
(
««& '
$"
««' )
$str
««) A
{
««A B
resetPassword
««B O
.
««O P
Phone_OR_Email
««P ^
}
««^ _
$str
««_ j
"
««j k
,
««k l
resetPassword
««m z
.
««z {
Phone_OR_Email««{ â
)««â ä
;««ä ã
return
»» 
new
»» #
ResetPasswordResponse
»» 4
{
…… 
	IsSuccess
   !
=
  " #
false
  $ )
,
  ) *
ErrorResponse
ÀÀ %
=
ÀÀ& '
new
ÀÀ( +(
ResetPasswordErrorResponse
ÀÀ, F
{
ÃÃ 

StatusCode
ÕÕ &
=
ÕÕ' (
StatusCodes
ÕÕ) 4
.
ÕÕ4 5
Status404NotFound
ÕÕ5 F
,
ÕÕF G
StatusMessage
ŒŒ )
=
ŒŒ* +
$"
ŒŒ, .
$str
ŒŒ. G
{
ŒŒG H
resetPassword
ŒŒH U
.
ŒŒU V
Phone_OR_Email
ŒŒV d
}
ŒŒd e
$str
ŒŒe q
"
ŒŒq r
}
œœ 
}
–– 
;
–– 
}
—— 
var
‘‘ 
validationResult
‘‘ $
=
‘‘% &
await
‘‘' , 
_passwordValidator
‘‘- ?
.
‘‘? @
ValidateAsync
‘‘@ M
(
‘‘M N
_userManager
‘‘N Z
,
‘‘Z [
user
‘‘\ `
,
‘‘` a
resetPassword
‘‘b o
.
‘‘o p
NewPassword
‘‘p {
)
‘‘{ |
;
‘‘| }
if
’’ 
(
’’ 
!
’’ 
validationResult
’’ %
.
’’% &
	Succeeded
’’& /
)
’’/ 0
{
÷÷ 
return
◊◊ 
new
◊◊ #
ResetPasswordResponse
◊◊ 4
{
ÿÿ 
	IsSuccess
ŸŸ !
=
ŸŸ" #
false
ŸŸ$ )
,
ŸŸ) *
ErrorResponse
⁄⁄ %
=
⁄⁄& '
new
⁄⁄( +(
ResetPasswordErrorResponse
⁄⁄, F
{
€€ 

StatusCode
‹‹ &
=
‹‹' (
StatusCodes
‹‹) 4
.
‹‹4 5!
Status400BadRequest
‹‹5 H
,
‹‹H I
StatusMessage
›› )
=
››* +
$"
››, .
$str
››. G
{
››G H
string
››H N
.
››N O
Join
››O S
(
››S T
$str
››T X
,
››X Y
validationResult
››Z j
.
››j k
Errors
››k q
.
››q r
Select
››r x
(
››x y
e
››y z
=>
››{ }
e
››~ 
.›› Ä
Description››Ä ã
)››ã å
)››å ç
}››ç é
"››é è
}
ﬁﬁ 
}
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
var
ÂÂ 
token
ÂÂ 
=
ÂÂ 
await
ÂÂ !
_userManager
ÂÂ" .
.
ÂÂ. /-
GeneratePasswordResetTokenAsync
ÂÂ/ N
(
ÂÂN O
user
ÂÂO S
)
ÂÂS T
;
ÂÂT U
var
ÊÊ 
result
ÊÊ 
=
ÊÊ 
await
ÊÊ "
_userManager
ÊÊ# /
.
ÊÊ/ 0 
ResetPasswordAsync
ÊÊ0 B
(
ÊÊB C
user
ÊÊC G
,
ÊÊG H
token
ÊÊI N
,
ÊÊN O
resetPassword
ÊÊP ]
.
ÊÊ] ^
NewPassword
ÊÊ^ i
)
ÊÊi j
;
ÊÊj k
if
ËË 
(
ËË 
result
ËË 
.
ËË 
	Succeeded
ËË $
)
ËË$ %
{
ÈÈ 
_logger
ÍÍ 
.
ÍÍ 
LogInformation
ÍÍ *
(
ÍÍ* +
$"
ÍÍ+ -
$str
ÍÍ- e
{
ÍÍe f
resetPassword
ÍÍf s
.
ÍÍs t
Phone_OR_EmailÍÍt Ç
}ÍÍÇ É
$strÍÍÉ Ñ
"ÍÍÑ Ö
,ÍÍÖ Ü
resetPasswordÍÍá î
.ÍÍî ï
Phone_OR_EmailÍÍï £
)ÍÍ£ §
;ÍÍ§ •
return
ÎÎ 
new
ÎÎ #
ResetPasswordResponse
ÎÎ 4
{
ÏÏ 
	IsSuccess
ÌÌ !
=
ÌÌ" #
true
ÌÌ$ (
,
ÌÌ( )
SuccessResponse
ÓÓ '
=
ÓÓ( )
new
ÓÓ* -*
ResetPasswordSuccessResponse
ÓÓ. J
{
ÔÔ 

StatusCode
 &
=
' (
StatusCodes
) 4
.
4 5
Status200OK
5 @
,
@ A
StatusMessage
ÒÒ )
=
ÒÒ* +
$"
ÒÒ, .
$str
ÒÒ. =
{
ÒÒ= >
result
ÒÒ> D
.
ÒÒD E
ToString
ÒÒE M
(
ÒÒM N
)
ÒÒN O
}
ÒÒO P
"
ÒÒP Q
}
ÚÚ 
}
ÛÛ 
;
ÛÛ 
}
ıı 
if
ˆˆ 
(
ˆˆ 
!
ˆˆ 
result
ˆˆ 
.
ˆˆ 
	Succeeded
ˆˆ %
)
ˆˆ% &
{
˜˜ 
_logger
¯¯ 
.
¯¯ 

LogWarning
¯¯ &
(
¯¯& '
$"
¯¯' )
$str
¯¯) [
{
¯¯[ \
resetPassword
¯¯\ i
.
¯¯i j
Phone_OR_Email
¯¯j x
}
¯¯x y
$str¯¯y É
{¯¯É Ñ
string¯¯Ñ ä
.¯¯ä ã
Join¯¯ã è
(¯¯è ê
$str¯¯ê î
,¯¯î ï
result¯¯ñ ú
.¯¯ú ù
Errors¯¯ù £
.¯¯£ §
Select¯¯§ ™
(¯¯™ ´
e¯¯´ ¨
=>¯¯≠ Ø
e¯¯∞ ±
.¯¯± ≤
Description¯¯≤ Ω
)¯¯Ω æ
)¯¯æ ø
}¯¯ø ¿
"¯¯¿ ¡
,¯¯¡ ¬
resetPassword¯¯√ –
.¯¯– —
Phone_OR_Email¯¯— ﬂ
,¯¯ﬂ ‡
string¯¯· Á
.¯¯Á Ë
Join¯¯Ë Ï
(¯¯Ï Ì
$str¯¯Ì Ò
,¯¯Ò Ú
result¯¯Û ˘
.¯¯˘ ˙
Errors¯¯˙ Ä
.¯¯Ä Å
Select¯¯Å á
(¯¯á à
e¯¯à â
=>¯¯ä å
e¯¯ç é
.¯¯é è
Description¯¯è ö
)¯¯ö õ
)¯¯õ ú
)¯¯ú ù
;¯¯ù û
return
˘˘ 
new
˘˘ #
ResetPasswordResponse
˘˘ 4
{
˙˙ 
	IsSuccess
˚˚ !
=
˚˚" #
false
˚˚$ )
,
˚˚) *
ErrorResponse
¸¸ %
=
¸¸& '
new
¸¸( +(
ResetPasswordErrorResponse
¸¸, F
{
˝˝ 

StatusCode
˛˛ &
=
˛˛' (
StatusCodes
˛˛) 4
.
˛˛4 5!
Status400BadRequest
˛˛5 H
,
˛˛H I
StatusMessage
ˇˇ )
=
ˇˇ* +
$"
ˇˇ, .
$str
ˇˇ. G
{
ˇˇG H
string
ˇˇH N
.
ˇˇN O
Join
ˇˇO S
(
ˇˇS T
$str
ˇˇT X
,
ˇˇX Y
result
ˇˇZ `
.
ˇˇ` a
Errors
ˇˇa g
.
ˇˇg h
Select
ˇˇh n
(
ˇˇn o
e
ˇˇo p
=>
ˇˇq s
e
ˇˇt u
.
ˇˇu v
Descriptionˇˇv Å
)ˇˇÅ Ç
)ˇˇÇ É
}ˇˇÉ Ñ
"ˇˇÑ Ö
}
ÄÄ 
}
ÅÅ 
;
ÅÅ 
}
ÇÇ 
return
ÑÑ 
null
ÑÑ 
!
ÑÑ 
;
ÑÑ 
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
ex
ÜÜ 
)
ÜÜ  
{
áá 
_logger
àà 
.
àà 
LogError
àà  
(
àà  !
ex
àà! #
,
àà# $
$"
àà% '
$str
àà' s
{
ààs t
resetPasswordààt Å
.ààÅ Ç
Phone_OR_EmailààÇ ê
}ààê ë
$strààë í
"ààí ì
,ààì î
resetPasswordààï ¢
.àà¢ £
Phone_OR_Emailàà£ ±
)àà± ≤
;àà≤ ≥
return
ââ 
new
ââ #
ResetPasswordResponse
ââ 0
{
ää 
	IsSuccess
ãã 
=
ãã 
false
ãã  %
,
ãã% &
ErrorResponse
åå !
=
åå" #
new
åå$ '(
ResetPasswordErrorResponse
åå( B
{
çç 

StatusCode
éé "
=
éé# $
StatusCodes
éé% 0
.
éé0 1*
Status500InternalServerError
éé1 M
,
ééM N
StatusMessage
èè %
=
èè& '
$"
èè( *
$str
èè* b
{
èèb c
ex
èèc e
.
èèe f
InnerException
èèf t
!
èèt u
.
èèu v
Message
èèv }
}
èè} ~
"
èè~ 
}
êê 
}
ëë 
;
ëë 
}
íí 
}
ìì 	
public
ïï 
async
ïï 
Task
ïï 
<
ïï #
ResetPasswordResponse
ïï /
>
ïï/ 0/
!ResetPasswordViaMobilePhoneNumber
ïï1 R
(
ïïR S%
ResetPasswordRequestDto
ïïS j
resetPassword
ïïk x
)
ïïx y
{
ññ 	
if
óó 
(
óó 
resetPassword
óó 
is
óó  
null
óó! %
)
óó% &
{
òò 
_logger
ôô 
.
ôô 

LogWarning
ôô "
(
ôô" #
$str
ôô# D
)
ôôD E
;
ôôE F
return
öö 
new
öö #
ResetPasswordResponse
öö 0
{
õõ 
	IsSuccess
úú 
=
úú 
false
úú  %
,
úú% &
ErrorResponse
ùù !
=
ùù" #
new
ùù$ '(
ResetPasswordErrorResponse
ùù( B
{
ûû 

StatusCode
üü "
=
üü# $
StatusCodes
üü% 0
.
üü0 1!
Status400BadRequest
üü1 D
,
üüD E
StatusMessage
†† %
=
††& '
$str
††( ?
}
°° 
}
¢¢ 
;
¢¢ 
}
££ 
try
•• 
{
¶¶ 
var
®® 
	otpresult
®® 
=
®® 
await
®®  %
_unitOfWork
®®& 1
.
®®1 2

TokenStore
®®2 <
.
®®< =
VerifyToken
®®= H
(
®®H I
resetPassword
®®I V
.
®®V W
Phone_OR_Email
®®W e
,
®®e f
resetPassword
®®g t
.
®®t u
Token
®®u z
)
®®z {
;
®®{ |
if
©© 
(
©© 
	otpresult
©© 
!=
©©  
$str
©©! +
)
©©+ ,
{
™™ 
_logger
´´ 
.
´´ 

LogWarning
´´ &
(
´´& '
$"
´´' )
$str
´´) 3
{
´´3 4
resetPassword
´´4 A
.
´´A B
Token
´´B G
}
´´G H
$str
´´H T
"
´´T U
,
´´U V
resetPassword
´´W d
.
´´d e
Phone_OR_Email
´´e s
)
´´s t
;
´´t u
return
¨¨ 
new
¨¨ #
ResetPasswordResponse
¨¨ 4
{
≠≠ 
	IsSuccess
ÆÆ !
=
ÆÆ" #
false
ÆÆ$ )
,
ÆÆ) *
ErrorResponse
ØØ %
=
ØØ& '
new
ØØ( +(
ResetPasswordErrorResponse
ØØ, F
{
∞∞ 

StatusCode
±± &
=
±±' (
StatusCodes
±±) 4
.
±±4 5
Status404NotFound
±±5 F
,
±±F G
StatusMessage
≤≤ )
=
≤≤* +
$"
≤≤, .
$str
≤≤. 9
{
≤≤9 :
resetPassword
≤≤: G
.
≤≤G H
Token
≤≤H M
}
≤≤M N
$str
≤≤N [
"
≤≤[ \
}
≥≥ 
}
¥¥ 
;
¥¥ 
}
µµ 
var
∏∏ 

otp_result
∏∏ 
=
∏∏  
_unitOfWork
∏∏! ,
.
∏∏, -

TokenStore
∏∏- 7
.
∏∏7 8
VerifyTokenExpiry
∏∏8 I
(
∏∏I J
resetPassword
∏∏J W
.
∏∏W X
Phone_OR_Email
∏∏X f
,
∏∏f g
resetPassword
∏∏h u
.
∏∏u v
Token
∏∏v {
)
∏∏{ |
;
∏∏| }
if
ππ 
(
ππ 

otp_result
ππ 
!=
ππ !
$str
ππ" ,
)
ππ, -
{
∫∫ 
_logger
ªª 
.
ªª 

LogWarning
ªª &
(
ªª& '
$"
ªª' )
$str
ªª) A
{
ªªA B
resetPassword
ªªB O
.
ªªO P
Phone_OR_Email
ªªP ^
}
ªª^ _
$str
ªª_ o
{
ªªo p
resetPassword
ªªp }
.
ªª} ~
Tokenªª~ É
}ªªÉ Ñ
$strªªÑ í
"ªªí ì
,ªªì î
resetPasswordªªï ¢
.ªª¢ £
Phone_OR_Emailªª£ ±
)ªª± ≤
;ªª≤ ≥
return
ºº 
new
ºº #
ResetPasswordResponse
ºº 4
{
ΩΩ 
	IsSuccess
ææ !
=
ææ" #
false
ææ$ )
,
ææ) *
ErrorResponse
øø %
=
øø& '
new
øø( +(
ResetPasswordErrorResponse
øø, F
{
¿¿ 

StatusCode
¡¡ &
=
¡¡' (
StatusCodes
¡¡) 4
.
¡¡4 5!
Status400BadRequest
¡¡5 H
,
¡¡H I
StatusMessage
¬¬ )
=
¬¬* +
$"
¬¬, .
$str
¬¬. G
{
¬¬G H
resetPassword
¬¬H U
.
¬¬U V
Phone_OR_Email
¬¬V d
.
¬¬d e
ToLower
¬¬e l
(
¬¬l m
)
¬¬m n
}
¬¬n o
$str¬¬o Ä
{¬¬Ä Å
resetPassword¬¬Å é
.¬¬é è
Token¬¬è î
}¬¬î ï
$str¬¬ï §
"¬¬§ •
}
√√ 
}
ƒƒ 
;
ƒƒ 
}
∆∆ 
var
»» 
appUser
»» 
=
»» 
await
»» #
_unitOfWork
»»$ /
.
»»/ 0
Users
»»0 5
.
»»5 6
Get
»»6 9
(
»»9 :
u
»»: ;
=>
»»< >
u
»»? @
.
»»@ A
PhoneNumber
»»A L
==
»»M O
resetPassword
»»P ]
.
»»] ^
Phone_OR_Email
»»^ l
)
»»l m
;
»»m n
var
…… 
user
…… 
=
…… 
await
……  
_userManager
……! -
.
……- .
FindByIdAsync
……. ;
(
……; <
appUser
……< C
!
……C D
.
……D E
Id
……E G
)
……G H
;
……H I
if
ÃÃ 
(
ÃÃ 
user
ÃÃ 
is
ÃÃ 
null
ÃÃ  
)
ÃÃ  !
{
ÕÕ 
_logger
ŒŒ 
.
ŒŒ 

LogWarning
ŒŒ &
(
ŒŒ& '
$"
ŒŒ' )
$str
ŒŒ) K
{
ŒŒK L
resetPassword
ŒŒL Y
.
ŒŒY Z
Phone_OR_Email
ŒŒZ h
}
ŒŒh i
$str
ŒŒi t
"
ŒŒt u
,
ŒŒu v
resetPasswordŒŒw Ñ
.ŒŒÑ Ö
Phone_OR_EmailŒŒÖ ì
)ŒŒì î
;ŒŒî ï
return
œœ 
new
œœ #
ResetPasswordResponse
œœ 4
{
–– 
	IsSuccess
—— !
=
——" #
false
——$ )
,
——) *
ErrorResponse
““ %
=
““& '
new
““( +(
ResetPasswordErrorResponse
““, F
{
”” 

StatusCode
‘‘ &
=
‘‘' (
StatusCodes
‘‘) 4
.
‘‘4 5
Status404NotFound
‘‘5 F
,
‘‘F G
StatusMessage
’’ )
=
’’* +
$"
’’, .
$str
’’. Q
{
’’Q R
resetPassword
’’R _
.
’’_ `
Phone_OR_Email
’’` n
}
’’n o
$str
’’o {
"
’’{ |
}
÷÷ 
}
◊◊ 
;
◊◊ 
}
ÿÿ 
var
⁄⁄ 
validationResult
⁄⁄ $
=
⁄⁄% &
await
⁄⁄' , 
_passwordValidator
⁄⁄- ?
.
⁄⁄? @
ValidateAsync
⁄⁄@ M
(
⁄⁄M N
_userManager
⁄⁄N Z
,
⁄⁄Z [
user
⁄⁄\ `
,
⁄⁄` a
resetPassword
⁄⁄b o
.
⁄⁄o p
NewPassword
⁄⁄p {
)
⁄⁄{ |
;
⁄⁄| }
if
€€ 
(
€€ 
!
€€ 
validationResult
€€ %
.
€€% &
	Succeeded
€€& /
)
€€/ 0
{
‹‹ 
return
›› 
new
›› #
ResetPasswordResponse
›› 4
{
ﬁﬁ 
	IsSuccess
ﬂﬂ !
=
ﬂﬂ" #
false
ﬂﬂ$ )
,
ﬂﬂ) *
ErrorResponse
‡‡ %
=
‡‡& '
new
‡‡( +(
ResetPasswordErrorResponse
‡‡, F
{
·· 

StatusCode
‚‚ &
=
‚‚' (
StatusCodes
‚‚) 4
.
‚‚4 5!
Status400BadRequest
‚‚5 H
,
‚‚H I
StatusMessage
„„ )
=
„„* +
$"
„„, .
$str
„„. G
{
„„G H
string
„„H N
.
„„N O
Join
„„O S
(
„„S T
$str
„„T X
,
„„X Y
validationResult
„„Z j
.
„„j k
Errors
„„k q
.
„„q r
Select
„„r x
(
„„x y
e
„„y z
=>
„„{ }
e
„„~ 
.„„ Ä
Description„„Ä ã
)„„ã å
)„„å ç
}„„ç é
"„„é è
}
‰‰ 
}
ÂÂ 
;
ÂÂ 
}
ÊÊ 
var
ËË 
token
ËË 
=
ËË 
await
ËË !
_userManager
ËË" .
.
ËË. /-
GeneratePasswordResetTokenAsync
ËË/ N
(
ËËN O
user
ËËO S
)
ËËS T
;
ËËT U
var
ÈÈ 
result
ÈÈ 
=
ÈÈ 
await
ÈÈ "
_userManager
ÈÈ# /
.
ÈÈ/ 0 
ResetPasswordAsync
ÈÈ0 B
(
ÈÈB C
user
ÈÈC G
,
ÈÈG H
token
ÈÈI N
,
ÈÈN O
resetPassword
ÈÈP ]
.
ÈÈ] ^
NewPassword
ÈÈ^ i
)
ÈÈi j
;
ÈÈj k
if
ÎÎ 
(
ÎÎ 
result
ÎÎ 
.
ÎÎ 
	Succeeded
ÎÎ $
)
ÎÎ$ %
{
ÏÏ 
_logger
ÌÌ 
.
ÌÌ 
LogInformation
ÌÌ *
(
ÌÌ* +
$"
ÌÌ+ -
$str
ÌÌ- l
{
ÌÌl m
resetPassword
ÌÌm z
.
ÌÌz {
Phone_OR_EmailÌÌ{ â
}ÌÌâ ä
$strÌÌä ã
"ÌÌã å
,ÌÌå ç
resetPasswordÌÌé õ
.ÌÌõ ú
Phone_OR_EmailÌÌú ™
)ÌÌ™ ´
;ÌÌ´ ¨
return
ÓÓ 
new
ÓÓ #
ResetPasswordResponse
ÓÓ 4
{
ÔÔ 
	IsSuccess
 !
=
" #
true
$ (
,
( )
SuccessResponse
ÒÒ '
=
ÒÒ( )
new
ÒÒ* -*
ResetPasswordSuccessResponse
ÒÒ. J
{
ÚÚ 

StatusCode
ÛÛ &
=
ÛÛ' (
StatusCodes
ÛÛ) 4
.
ÛÛ4 5
Status200OK
ÛÛ5 @
,
ÛÛ@ A
StatusMessage
ÙÙ )
=
ÙÙ* +
$"
ÙÙ, .
$str
ÙÙ. =
{
ÙÙ= >
result
ÙÙ> D
.
ÙÙD E
ToString
ÙÙE M
(
ÙÙM N
)
ÙÙN O
}
ÙÙO P
"
ÙÙP Q
}
ıı 
}
ˆˆ 
;
ˆˆ 
}
¯¯ 
if
˙˙ 
(
˙˙ 
!
˙˙ 
result
˙˙ 
.
˙˙ 
	Succeeded
˙˙ %
)
˙˙% &
{
˚˚ 
_logger
¸¸ 
.
¸¸ 

LogWarning
¸¸ &
(
¸¸& '
$"
¸¸' )
$str
¸¸) b
{
¸¸b c
resetPassword
¸¸c p
.
¸¸p q
Phone_OR_Email
¸¸q 
}¸¸ Ä
$str¸¸Ä ä
{¸¸ä ã
string¸¸ã ë
.¸¸ë í
Join¸¸í ñ
(¸¸ñ ó
$str¸¸ó õ
,¸¸õ ú
result¸¸ù £
.¸¸£ §
Errors¸¸§ ™
.¸¸™ ´
Select¸¸´ ±
(¸¸± ≤
e¸¸≤ ≥
=>¸¸¥ ∂
e¸¸∑ ∏
.¸¸∏ π
Description¸¸π ƒ
)¸¸ƒ ≈
)¸¸≈ ∆
}¸¸∆ «
"¸¸« »
,¸¸» …
resetPassword¸¸  ◊
.¸¸◊ ÿ
Phone_OR_Email¸¸ÿ Ê
,¸¸Ê Á
string¸¸Ë Ó
.¸¸Ó Ô
Join¸¸Ô Û
(¸¸Û Ù
$str¸¸Ù ¯
,¸¸¯ ˘
result¸¸˙ Ä
.¸¸Ä Å
Errors¸¸Å á
.¸¸á à
Select¸¸à é
(¸¸é è
e¸¸è ê
=>¸¸ë ì
e¸¸î ï
.¸¸ï ñ
Description¸¸ñ °
)¸¸° ¢
)¸¸¢ £
)¸¸£ §
;¸¸§ •
return
˝˝ 
new
˝˝ #
ResetPasswordResponse
˝˝ 4
{
˛˛ 
	IsSuccess
ˇˇ !
=
ˇˇ" #
false
ˇˇ$ )
,
ˇˇ) *
ErrorResponse
ÄÄ %
=
ÄÄ& '
new
ÄÄ( +(
ResetPasswordErrorResponse
ÄÄ, F
{
ÅÅ 

StatusCode
ÇÇ &
=
ÇÇ' (
StatusCodes
ÇÇ) 4
.
ÇÇ4 5!
Status400BadRequest
ÇÇ5 H
,
ÇÇH I
StatusMessage
ÉÉ )
=
ÉÉ* +
$"
ÉÉ, .
$str
ÉÉ. G
{
ÉÉG H
string
ÉÉH N
.
ÉÉN O
Join
ÉÉO S
(
ÉÉS T
$str
ÉÉT X
,
ÉÉX Y
result
ÉÉZ `
.
ÉÉ` a
Errors
ÉÉa g
.
ÉÉg h
Select
ÉÉh n
(
ÉÉn o
e
ÉÉo p
=>
ÉÉq s
e
ÉÉt u
.
ÉÉu v
DescriptionÉÉv Å
)ÉÉÅ Ç
)ÉÉÇ É
}ÉÉÉ Ñ
"ÉÉÑ Ö
}
ÑÑ 
}
ÖÖ 
;
ÖÖ 
}
ÜÜ 
return
àà 
null
àà 
!
àà 
;
àà 
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå 
_logger
çç 
.
çç 
LogError
çç  
(
çç  !
ex
çç! #
,
çç# $
$"
çç% '
$str
çç' |
{
çç| }
resetPasswordçç} ä
.ççä ã
Phone_OR_Emailççã ô
}ççô ö
$strççö õ
"ççõ ú
,ççú ù
resetPasswordççû ´
.çç´ ¨
Phone_OR_Emailçç¨ ∫
)çç∫ ª
;ççª º
return
éé 
new
éé #
ResetPasswordResponse
éé 0
{
èè 
	IsSuccess
êê 
=
êê 
false
êê  %
,
êê% &
ErrorResponse
ëë !
=
ëë" #
new
ëë$ '(
ResetPasswordErrorResponse
ëë( B
{
íí 

StatusCode
ìì "
=
ìì# $
StatusCodes
ìì% 0
.
ìì0 1*
Status500InternalServerError
ìì1 M
,
ììM N
StatusMessage
îî %
=
îî& '
$"
îî( *
$str
îî* b
{
îîb c
ex
îîc e
.
îîe f
InnerException
îîf t
!
îît u
.
îîu v
Message
îîv }
}
îî} ~
"
îî~ 
}
ïï 
}
ññ 
;
ññ 
}
óó 
}
òò 	
public
öö 
async
öö 
Task
öö 
<
öö 
LoginResponseDto
öö *
>
öö* +#
LoginWithEmailAddress
öö, A
(
ööA B
LoginRequestDto
ööB Q
userLoginDetails
ööR b
)
ööb c
{
õõ 	
try
úú 
{
ùù 
var
üü 
user
üü 
=
üü 
await
üü  
_userManager
üü! -
.
üü- .
FindByEmailAsync
üü. >
(
üü> ?
userLoginDetails
üü? O
.
üüO P
Phone_OR_Email
üüP ^
!
üü^ _
)
üü_ `
;
üü` a
if
†† 
(
†† 
user
†† 
is
†† 
null
††  
)
††  !
{
°° 
_logger
¢¢ 
.
¢¢ 

LogWarning
¢¢ &
(
¢¢& '
$"
¢¢' )
$str
¢¢) I
{
¢¢I J
userLoginDetails
¢¢J Z
.
¢¢Z [
Phone_OR_Email
¢¢[ i
}
¢¢i j
$str
¢¢j u
"
¢¢u v
,
¢¢v w
userLoginDetails¢¢x à
.¢¢à â
Phone_OR_Email¢¢â ó
)¢¢ó ò
;¢¢ò ô
return
££ 
new
££ 
LoginResponseDto
££ /
{
§§ 
LoginStatus
•• #
=
••$ %
false
••& +
,
••+ ,
errorResponse
¶¶ %
=
¶¶& '
new
¶¶( +#
LoginErrorResponseDto
¶¶, A
{
ßß 

StatusCode
®® &
=
®®' (
StatusCodes
®®) 4
.
®®4 5
Status404NotFound
®®5 F
,
®®F G
StatusMessage
©© )
=
©©* +
$"
©©, .
$str
©©. G
{
©©G H
userLoginDetails
©©H X
.
©©X Y
Phone_OR_Email
©©Y g
}
©©g h
$str
©©h t
"
©©t u
}
™™ 
}
´´ 
;
´´ 
}
¨¨ 
var
ØØ 
	userRoles
ØØ 
=
ØØ 
_userManager
ØØ  ,
.
ØØ, -
GetRolesAsync
ØØ- :
(
ØØ: ;
user
ØØ; ?
!
ØØ? @
)
ØØ@ A
.
ØØA B
Result
ØØB H
.
ØØH I
FirstOrDefault
ØØI W
(
ØØW X
)
ØØX Y
;
ØØY Z
if
∞∞ 
(
∞∞ 
	userRoles
∞∞ 
is
∞∞ 
null
∞∞  $
)
∞∞$ %
{
±± 
_logger
≤≤ 
.
≤≤ 

LogWarning
≤≤ &
(
≤≤& '
$"
≤≤' )
$str
≤≤) `
{
≤≤` a
userLoginDetails
≤≤a q
.
≤≤q r
Phone_OR_Email≤≤r Ä
}≤≤Ä Å
$str≤≤Å Ç
"≤≤Ç É
,≤≤É Ñ 
userLoginDetails≤≤Ö ï
.≤≤ï ñ
Phone_OR_Email≤≤ñ §
)≤≤§ •
;≤≤• ¶
return
≥≥ 
new
≥≥ 
LoginResponseDto
≥≥ /
{
¥¥ 
LoginStatus
µµ #
=
µµ$ %
false
µµ& +
,
µµ+ ,
errorResponse
∂∂ %
=
∂∂& '
new
∂∂( +#
LoginErrorResponseDto
∂∂, A
{
∑∑ 

StatusCode
∏∏ &
=
∏∏' (
StatusCodes
∏∏) 4
.
∏∏4 5
Status404NotFound
∏∏5 F
,
∏∏F G
StatusMessage
ππ )
=
ππ* +
$"
ππ, .
$str
ππ. W
{
ππW X
userLoginDetails
ππX h
.
ππh i
Phone_OR_Email
ππi w
}
ππw x
$str
ππx y
"
ππy z
}
∫∫ 
}
ªª 
;
ªª 
}
ΩΩ 
var
¿¿ 
validationResult
¿¿ $
=
¿¿% &
await
¿¿' , 
_passwordValidator
¿¿- ?
.
¿¿? @
ValidateAsync
¿¿@ M
(
¿¿M N
_userManager
¿¿N Z
,
¿¿Z [
user
¿¿\ `
,
¿¿` a
userLoginDetails
¿¿b r
.
¿¿r s
Password
¿¿s {
)
¿¿{ |
;
¿¿| }
if
¡¡ 
(
¡¡ 
!
¡¡ 
validationResult
¡¡ %
.
¡¡% &
	Succeeded
¡¡& /
)
¡¡/ 0
{
¬¬ 
return
√√ 
new
√√ 
LoginResponseDto
√√ /
{
ƒƒ 
LoginStatus
≈≈ #
=
≈≈$ %
false
≈≈& +
,
≈≈+ ,
errorResponse
∆∆ %
=
∆∆& '
new
∆∆( +#
LoginErrorResponseDto
∆∆, A
{
«« 

StatusCode
»» &
=
»»' (
StatusCodes
»») 4
.
»»4 5!
Status400BadRequest
»»5 H
,
»»H I
StatusMessage
…… )
=
……* +
$"
……, .
$str
……. C
{
……C D
string
……D J
.
……J K
Join
……K O
(
……O P
$str
……P T
,
……T U
validationResult
……V f
.
……f g
Errors
……g m
.
……m n
Select
……n t
(
……t u
e
……u v
=>
……w y
e
……z {
.
……{ |
Description……| á
)……á à
)……à â
}……â ä
"……ä ã
}
   
}
ÀÀ 
;
ÀÀ 
}
ÃÃ 
var
ŒŒ 
result
ŒŒ 
=
ŒŒ 
await
ŒŒ "
_signInManager
ŒŒ# 1
.
ŒŒ1 2!
PasswordSignInAsync
ŒŒ2 E
(
ŒŒE F
user
ŒŒF J
,
ŒŒJ K
userLoginDetails
ŒŒL \
.
ŒŒ\ ]
Password
ŒŒ] e
!
ŒŒe f
,
ŒŒf g
true
ŒŒh l
,
ŒŒl m
false
ŒŒn s
)
ŒŒs t
;
ŒŒt u
if
œœ 
(
œœ 
result
œœ 
.
œœ 
	Succeeded
œœ $
)
œœ$ %
{
–– 
_logger
—— 
.
—— 
LogInformation
—— *
(
——* +
$"
——+ -
$str
——- M
{
——M N
userLoginDetails
——N ^
.
——^ _
Phone_OR_Email
——_ m
}
——m n
$str——n Ü
{——Ü á
DateTime——á è
.——è ê
UtcNow——ê ñ
.——ñ ó
ToString——ó ü
(——ü †
)——† °
}——° ¢
"——¢ £
,——£ § 
userLoginDetails——• µ
.——µ ∂
Phone_OR_Email——∂ ƒ
)——ƒ ≈
;——≈ ∆
user
”” 
.
”” 
RefreshToken
”” %
=
””& '
_tokenService
””( 5
.
””5 6
GetJwRefreshToken
””6 G
(
””G H
)
””H I
.
””I J
Token
””J O
;
””O P
user
‘‘ 
.
‘‘ !
RefreshTokenExpires
‘‘ ,
=
‘‘- .
_tokenService
‘‘/ <
.
‘‘< =
GetJwRefreshToken
‘‘= N
(
‘‘N O
)
‘‘O P
.
‘‘P Q
Expires
‘‘Q X
;
‘‘X Y
_unitOfWork
÷÷ 
.
÷÷  
Users
÷÷  %
.
÷÷% &
Update
÷÷& ,
(
÷÷, -
user
÷÷- 1
)
÷÷1 2
;
÷÷2 3
await
◊◊ 
_unitOfWork
◊◊ %
.
◊◊% &
Complete
◊◊& .
(
◊◊. /
)
◊◊/ 0
;
◊◊0 1
return
⁄⁄ 
new
⁄⁄ 
LoginResponseDto
⁄⁄ /
{
€€ 
LoginStatus
‹‹ #
=
‹‹$ %
true
‹‹& *
,
‹‹* +
successResponse
›› '
=
››( )
new
››* -$
LoginSucessResponseDto
››. D
{
ﬁﬁ 
UserId
ﬂﬂ "
=
ﬂﬂ# $
user
ﬂﬂ% )
.
ﬂﬂ) *
Id
ﬂﬂ* ,
,
ﬂﬂ, -
IsFirstTime
‡‡ '
=
‡‡( )
user
‡‡* .
.
‡‡. /
IsFirstTime
‡‡/ :
,
‡‡: ;
BearerToken
·· '
=
··( )
_tokenService
··* 7
.
··7 8

GetJwToken
··8 B
(
··B C
user
··C G
,
··G H
$num
··I J
)
··J K
.
··K L
Token
··L Q
!
··Q R
,
··R S
RefreshToken
‚‚ (
=
‚‚) *
_tokenService
‚‚+ 8
.
‚‚8 9
GetJwRefreshToken
‚‚9 J
(
‚‚J K
)
‚‚K L
.
‚‚L M
Token
‚‚M R
!
‚‚R S
,
‚‚S T
	ExpiresAt
„„ %
=
„„& '
_tokenService
„„( 5
.
„„5 6
GetJwRefreshToken
„„6 G
(
„„G H
)
„„H I
.
„„I J
Expires
„„J Q
}
‰‰ 
}
ÂÂ 
;
ÂÂ 
}
ÊÊ 
if
ËË 
(
ËË 
result
ËË 
.
ËË 
IsLockedOut
ËË &
)
ËË& '
{
ÈÈ 
_logger
ÍÍ 
.
ÍÍ 

LogWarning
ÍÍ &
(
ÍÍ& '
$"
ÍÍ' )
$str
ÍÍ) I
{
ÍÍI J
userLoginDetails
ÍÍJ Z
.
ÍÍZ [
Phone_OR_Email
ÍÍ[ i
}
ÍÍi j
$strÍÍj Ö
"ÍÍÖ Ü
,ÍÍÜ á 
userLoginDetailsÍÍà ò
.ÍÍò ô
Phone_OR_EmailÍÍô ß
)ÍÍß ®
;ÍÍ® ©
return
ÎÎ 
new
ÎÎ 
LoginResponseDto
ÎÎ /
{
ÏÏ 
LoginStatus
ÌÌ #
=
ÌÌ$ %
false
ÌÌ& +
,
ÌÌ+ ,
errorResponse
ÓÓ %
=
ÓÓ& '
new
ÓÓ( +#
LoginErrorResponseDto
ÓÓ, A
{
ÔÔ 

StatusCode
 &
=
' (
StatusCodes
) 4
.
4 5
Status404NotFound
5 F
,
F G
StatusMessage
ÒÒ )
=
ÒÒ* +
$str
ÒÒ, V
}
ÚÚ 
}
ÛÛ 
;
ÛÛ 
}
ÙÙ 
if
ˆˆ 
(
ˆˆ 
result
ˆˆ 
.
ˆˆ 
IsNotAllowed
ˆˆ '
)
ˆˆ' (
{
˜˜ 
_logger
¯¯ 
.
¯¯ 

LogWarning
¯¯ &
(
¯¯& '
$"
¯¯' )
$str
¯¯) A
{
¯¯A B
userLoginDetails
¯¯B R
.
¯¯R S
Phone_OR_Email
¯¯S a
}
¯¯a b
$str
¯¯b |
"
¯¯| }
,
¯¯} ~
userLoginDetails¯¯ è
.¯¯è ê
Phone_OR_Email¯¯ê û
)¯¯û ü
;¯¯ü †
return
˘˘ 
new
˘˘ 
LoginResponseDto
˘˘ /
{
˙˙ 
LoginStatus
˚˚ #
=
˚˚$ %
false
˚˚& +
,
˚˚+ ,
errorResponse
¸¸ %
=
¸¸& '
new
¸¸( +#
LoginErrorResponseDto
¸¸, A
{
˝˝ 

StatusCode
˛˛ &
=
˛˛' (
StatusCodes
˛˛) 4
.
˛˛4 5
Status404NotFound
˛˛5 F
,
˛˛F G
StatusMessage
ˇˇ )
=
ˇˇ* +
$str
ˇˇ, x
}
ÄÄ 
}
ÅÅ 
;
ÅÅ 
}
ÇÇ 
if
ÑÑ 
(
ÑÑ 
result
ÑÑ 
.
ÑÑ 
RequiresTwoFactor
ÑÑ ,
)
ÑÑ, -
{
ÖÖ 
_logger
ÜÜ 
.
ÜÜ 

LogWarning
ÜÜ &
(
ÜÜ& '
$"
ÜÜ' )
$str
ÜÜ) h
{
ÜÜh i
userLoginDetails
ÜÜi y
.
ÜÜy z
Phone_OR_EmailÜÜz à
}ÜÜà â
"ÜÜâ ä
,ÜÜä ã 
userLoginDetailsÜÜå ú
.ÜÜú ù
Phone_OR_EmailÜÜù ´
)ÜÜ´ ¨
;ÜÜ¨ ≠
return
áá 
new
áá 
LoginResponseDto
áá /
{
àà 
LoginStatus
ââ #
=
ââ$ %
false
ââ& +
,
ââ+ ,
errorResponse
ää %
=
ää& '
new
ää( +#
LoginErrorResponseDto
ää, A
{
ãã 

StatusCode
åå &
=
åå' (
StatusCodes
åå) 4
.
åå4 5
Status404NotFound
åå5 F
,
ååF G
StatusMessage
çç )
=
çç* +
$str
çç, Q
}
éé 
}
èè 
;
èè 
}
êê 
if
íí 
(
íí 
!
íí 
result
íí 
.
íí 
	Succeeded
íí %
)
íí% &
{
ìì 
_logger
îî 
.
îî 

LogWarning
îî &
(
îî& '
$"
îî' )
$str
îî) A
{
îîA B
userLoginDetails
îîB R
.
îîR S
Phone_OR_Email
îîS a
}
îîa b
$str
îîb x
"
îîx y
,
îîy z
userLoginDetailsîî{ ã
.îîã å
Phone_OR_Emailîîå ö
)îîö õ
;îîõ ú
return
ïï 
new
ïï 
LoginResponseDto
ïï /
{
ññ 
LoginStatus
óó #
=
óó$ %
false
óó& +
,
óó+ ,
errorResponse
òò %
=
òò& '
new
òò( +#
LoginErrorResponseDto
òò, A
{
ôô 

StatusCode
öö &
=
öö' (
StatusCodes
öö) 4
.
öö4 5
Status404NotFound
öö5 F
,
ööF G
StatusMessage
õõ )
=
õõ* +
$strõõ, å
}
úú 
}
ùù 
;
ùù 
}
ûû 
return
†† 
null
†† 
!
†† 
;
†† 
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
ex
££ 
)
££  
{
§§ 
_logger
•• 
.
•• 
LogError
••  
(
••  !
ex
••! #
,
••# $
$"
••% '
$str
••' W
{
••W X
userLoginDetails
••X h
.
••h i
Phone_OR_Email
••i w
}
••w x
$str••x â
"••â ä
,••ä ã 
userLoginDetails••å ú
.••ú ù
Phone_OR_Email••ù ´
)••´ ¨
;••¨ ≠
return
¶¶ 
new
¶¶ 
LoginResponseDto
¶¶ +
{
ßß 
LoginStatus
®® 
=
®®  !
false
®®" '
,
®®' (
errorResponse
©© !
=
©©" #
new
©©$ '#
LoginErrorResponseDto
©©( =
{
™™ 

StatusCode
´´ "
=
´´# $
StatusCodes
´´% 0
.
´´0 1*
Status500InternalServerError
´´1 M
,
´´M N
StatusMessage
¨¨ %
=
¨¨& '
$"
¨¨( *
$str
¨¨* b
{
¨¨b c
ex
¨¨c e
.
¨¨e f
InnerException
¨¨f t
!
¨¨t u
.
¨¨u v
Message
¨¨v }
}
¨¨} ~
"
¨¨~ 
}
≠≠ 
}
ÆÆ 
;
ÆÆ 
}
ØØ 
}
±± 	
public
≥≥ 
async
≥≥ 
Task
≥≥ 
<
≥≥ 
LoginResponseDto
≥≥ *
>
≥≥* +(
LoginWithMobilePhoneNumber
≥≥, F
(
≥≥F G
LoginRequestDto
≥≥G V
userLoginDetails
≥≥W g
)
≥≥g h
{
¥¥ 	
try
µµ 
{
∂∂ 
var
∑∑ 
	phoneUser
∑∑ 
=
∑∑ 
await
∑∑  %
_unitOfWork
∑∑& 1
.
∑∑1 2
Users
∑∑2 7
.
∑∑7 8
Get
∑∑8 ;
(
∑∑; <
u
∑∑< =
=>
∑∑> @
u
∑∑A B
.
∑∑B C
PhoneNumber
∑∑C N
==
∑∑O Q
userLoginDetails
∑∑R b
.
∑∑b c
Phone_OR_Email
∑∑c q
)
∑∑q r
;
∑∑r s
var
ππ 
	userRoles
ππ 
=
ππ 
_userManager
ππ  ,
.
ππ, -
GetRolesAsync
ππ- :
(
ππ: ;
	phoneUser
ππ; D
!
ππD E
)
ππE F
.
ππF G
Result
ππG M
.
ππM N
FirstOrDefault
ππN \
(
ππ\ ]
)
ππ] ^
;
ππ^ _
if
ªª 
(
ªª 
	userRoles
ªª 
is
ªª  
null
ªª! %
)
ªª% &
{
ºº 
_logger
ΩΩ 
.
ΩΩ 

LogWarning
ΩΩ &
(
ΩΩ& '
$"
ΩΩ' )
$str
ΩΩ) f
{
ΩΩf g
userLoginDetails
ΩΩg w
.
ΩΩw x
Phone_OR_EmailΩΩx Ü
}ΩΩÜ á
$strΩΩá à
"ΩΩà â
,ΩΩâ ä 
userLoginDetailsΩΩã õ
.ΩΩõ ú
Phone_OR_EmailΩΩú ™
)ΩΩ™ ´
;ΩΩ´ ¨
return
ææ 
new
ææ 
LoginResponseDto
ææ /
{
øø 
LoginStatus
¿¿ #
=
¿¿$ %
false
¿¿& +
,
¿¿+ ,
errorResponse
¡¡ %
=
¡¡& '
new
¡¡( +#
LoginErrorResponseDto
¡¡, A
{
¬¬ 

StatusCode
√√ &
=
√√' (
StatusCodes
√√) 4
.
√√4 5
Status404NotFound
√√5 F
,
√√F G
StatusMessage
ƒƒ )
=
ƒƒ* +
$"
ƒƒ, .
$str
ƒƒ. k
{
ƒƒk l
userLoginDetails
ƒƒl |
.
ƒƒ| }
Phone_OR_Emailƒƒ} ã
}ƒƒã å
$strƒƒå ç
"ƒƒç é
}
≈≈ 
}
∆∆ 
;
∆∆ 
}
»» 
if
   
(
   
	phoneUser
   
is
    
null
  ! %
)
  % &
{
ÀÀ 
_logger
ÃÃ 
.
ÃÃ 

LogWarning
ÃÃ &
(
ÃÃ& '
$"
ÃÃ' )
$str
ÃÃ) G
{
ÃÃG H
userLoginDetails
ÃÃH X
.
ÃÃX Y
Phone_OR_Email
ÃÃY g
}
ÃÃg h
$str
ÃÃh s
"
ÃÃs t
,
ÃÃt u
userLoginDetailsÃÃv Ü
.ÃÃÜ á
Phone_OR_EmailÃÃá ï
)ÃÃï ñ
;ÃÃñ ó
return
ÕÕ 
new
ÕÕ 
LoginResponseDto
ÕÕ /
{
ŒŒ 
LoginStatus
œœ #
=
œœ$ %
false
œœ& +
,
œœ+ ,
errorResponse
–– %
=
––& '
new
––( +#
LoginErrorResponseDto
––, A
{
—— 

StatusCode
““ &
=
““' (
StatusCodes
““) 4
.
““4 5
Status404NotFound
““5 F
,
““F G
StatusMessage
”” )
=
””* +
$"
””, .
$str
””. A
{
””A B
userLoginDetails
””B R
.
””R S
Phone_OR_Email
””S a
}
””a b
$str
””b n
"
””n o
}
‘‘ 
}
’’ 
;
’’ 
}
÷÷ 
var
ÿÿ 
user
ÿÿ 
=
ÿÿ 
await
ÿÿ  
_userManager
ÿÿ! -
.
ÿÿ- .
FindByEmailAsync
ÿÿ. >
(
ÿÿ> ?
	phoneUser
ÿÿ? H
.
ÿÿH I
Email
ÿÿI N
!
ÿÿN O
)
ÿÿO P
;
ÿÿP Q
var
ŸŸ 
result
ŸŸ 
=
ŸŸ 
await
ŸŸ "
_signInManager
ŸŸ# 1
.
ŸŸ1 2!
PasswordSignInAsync
ŸŸ2 E
(
ŸŸE F
user
ŸŸF J
!
ŸŸJ K
,
ŸŸK L
userLoginDetails
ŸŸM ]
.
ŸŸ] ^
Password
ŸŸ^ f
!
ŸŸf g
,
ŸŸg h
true
ŸŸi m
,
ŸŸm n
false
ŸŸo t
)
ŸŸt u
;
ŸŸu v
if
€€ 
(
€€ 
result
€€ 
.
€€ 
	Succeeded
€€ $
)
€€$ %
{
‹‹ 
_logger
›› 
.
›› 
LogInformation
›› *
(
››* +
$"
››+ -
$str
››- K
{
››K L
userLoginDetails
››L \
.
››\ ]
Phone_OR_Email
››] k
}
››k l
$str››l Ñ
{››Ñ Ö
DateTime››Ö ç
.››ç é
UtcNow››é î
.››î ï
ToString››ï ù
(››ù û
)››û ü
}››ü †
"››† °
,››° ¢ 
userLoginDetails››£ ≥
.››≥ ¥
Phone_OR_Email››¥ ¬
)››¬ √
;››√ ƒ
return
ﬁﬁ 
new
ﬁﬁ 
LoginResponseDto
ﬁﬁ /
{
ﬂﬂ 
LoginStatus
‡‡ #
=
‡‡$ %
true
‡‡& *
,
‡‡* +
successResponse
·· '
=
··( )
new
··* -$
LoginSucessResponseDto
··. D
{
‚‚ 
UserId
„„ "
=
„„# $
user
„„% )
!
„„) *
.
„„* +
Id
„„+ -
,
„„- .
IsFirstTime
‰‰ '
=
‰‰( )
user
‰‰* .
.
‰‰. /
IsFirstTime
‰‰/ :
,
‰‰: ;
BearerToken
ÂÂ '
=
ÂÂ( )
_tokenService
ÂÂ* 7
.
ÂÂ7 8

GetJwToken
ÂÂ8 B
(
ÂÂB C
user
ÂÂC G
,
ÂÂG H
$num
ÂÂI J
)
ÂÂJ K
.
ÂÂK L
Token
ÂÂL Q
!
ÂÂQ R
,
ÂÂR S
RefreshToken
ÊÊ (
=
ÊÊ) *
_tokenService
ÊÊ+ 8
.
ÊÊ8 9
GetJwRefreshToken
ÊÊ9 J
(
ÊÊJ K
)
ÊÊK L
.
ÊÊL M
Token
ÊÊM R
!
ÊÊR S
,
ÊÊS T
	ExpiresAt
ÁÁ %
=
ÁÁ& '
_tokenService
ÁÁ( 5
.
ÁÁ5 6

GetJwToken
ÁÁ6 @
(
ÁÁ@ A
user
ÁÁA E
,
ÁÁE F
$num
ÁÁG H
)
ÁÁH I
.
ÁÁI J
	ExpiresAt
ÁÁJ S
!
ÁÁS T
}
ËË 
}
ÈÈ 
;
ÈÈ 
}
ÍÍ 
if
ÏÏ 
(
ÏÏ 
!
ÏÏ 
result
ÏÏ 
.
ÏÏ 
	Succeeded
ÏÏ %
)
ÏÏ% &
{
ÌÌ 
_logger
ÓÓ 
.
ÓÓ 

LogWarning
ÓÓ &
(
ÓÓ& '
$"
ÓÓ' )
$str
ÓÓ) G
{
ÓÓG H
userLoginDetails
ÓÓH X
.
ÓÓX Y
Phone_OR_Email
ÓÓY g
}
ÓÓg h
$str
ÓÓh x
{
ÓÓx y
result
ÓÓy 
.ÓÓ Ä
ToStringÓÓÄ à
(ÓÓà â
)ÓÓâ ä
}ÓÓä ã
"ÓÓã å
,ÓÓå ç 
userLoginDetailsÓÓé û
.ÓÓû ü
Phone_OR_EmailÓÓü ≠
)ÓÓ≠ Æ
;ÓÓÆ Ø
return
ÔÔ 
new
ÔÔ 
LoginResponseDto
ÔÔ /
{
 
LoginStatus
ÒÒ #
=
ÒÒ$ %
false
ÒÒ& +
,
ÒÒ+ ,
errorResponse
ÚÚ %
=
ÚÚ& '
new
ÚÚ( +#
LoginErrorResponseDto
ÚÚ, A
{
ÛÛ 

StatusCode
ÙÙ &
=
ÙÙ' (
StatusCodes
ÙÙ) 4
.
ÙÙ4 5
Status404NotFound
ÙÙ5 F
,
ÙÙF G
StatusMessage
ıı )
=
ıı* +
$"
ıı, .
$str
ıı. 9
{
ıı9 :
result
ıı: @
.
ıı@ A
ToString
ııA I
(
ııI J
)
ııJ K
}
ııK L
"
ııL M
}
ˆˆ 
}
˜˜ 
;
˜˜ 
}
¯¯ 
return
˙˙ 
null
˙˙ 
!
˙˙ 
;
˙˙ 
}
¸¸ 
catch
˝˝ 
(
˝˝ 
	Exception
˝˝ 
ex
˝˝ 
)
˝˝  
{
˛˛ 
_logger
ˇˇ 
.
ˇˇ 
LogError
ˇˇ  
(
ˇˇ  !
ex
ˇˇ! #
,
ˇˇ# $
$"
ˇˇ% '
$str
ˇˇ' a
{
ˇˇa b
userLoginDetails
ˇˇb r
.
ˇˇr s
Phone_OR_Emailˇˇs Å
}ˇˇÅ Ç
$strˇˇÇ ì
"ˇˇì î
,ˇˇî ï 
userLoginDetailsˇˇñ ¶
.ˇˇ¶ ß
Phone_OR_Emailˇˇß µ
)ˇˇµ ∂
;ˇˇ∂ ∑
return
ÄÄ 
new
ÄÄ 
LoginResponseDto
ÄÄ +
{
ÅÅ 
LoginStatus
ÇÇ 
=
ÇÇ  !
false
ÇÇ" '
,
ÇÇ' (
errorResponse
ÉÉ !
=
ÉÉ" #
new
ÉÉ$ '#
LoginErrorResponseDto
ÉÉ( =
{
ÑÑ 

StatusCode
ÖÖ "
=
ÖÖ# $
StatusCodes
ÖÖ% 0
.
ÖÖ0 1*
Status500InternalServerError
ÖÖ1 M
,
ÖÖM N
StatusMessage
ÜÜ %
=
ÜÜ& '
$"
ÜÜ( *
$str
ÜÜ* b
{
ÜÜb c
ex
ÜÜc e
.
ÜÜe f
Message
ÜÜf m
}
ÜÜm n
"
ÜÜn o
}
áá 
}
àà 
;
àà 
}
ââ 
}
ãã 	
public
çç 
async
çç 
Task
çç 
<
çç %
RefreshTokenResponseDto
çç 1
>
çç1 2 
RefreshBearerToken
çç3 E
(
ççE F$
RefreshTokenRequestDto
ççF \
tokens
çç] c
)
ççc d
{
éé 	
if
èè 
(
èè 
tokens
èè 
is
èè 
null
èè 
)
èè 
{
êê 
return
ëë 
new
ëë %
RefreshTokenResponseDto
ëë 2
{
íí 
	IsSuccess
ìì 
=
ìì 
false
ìì  %
,
ìì% &
ErrorResponse
îî !
=
îî" #
new
îî$ '*
RefreshTokenErrorResponseDto
îî( D
{
ïï 

StatusCode
ññ "
=
ññ# $
StatusCodes
ññ% 0
.
ññ0 1!
Status400BadRequest
ññ1 D
,
ññE F
StatusMessage
óó %
=
óó& '
$str
óó( [
}
òò 
}
öö 
;
öö 
}
õõ 
string
ùù 
oldAccessToken
ùù !
=
ùù" #
tokens
ùù$ *
!
ùù* +
.
ùù+ ,
BearerToken
ùù, 7
;
ùù7 8
var
†† 
	principal
†† 
=
†† 
_tokenService
†† )
.
††) *6
(GetClaimsPrincipalFromExpiredBearerToken
††* R
(
††R S
oldAccessToken
††S a
)
††a b
;
††b c
var
°° 
userId
°° 
=
°° 
	principal
°° "
.
°°" #
Claims
°°# )
.
°°) *
FirstOrDefault
°°* 8
(
°°8 9
)
°°9 :
!
°°: ;
.
°°; <
Value
°°< A
;
°°A B
var
££ 
user
££ 
=
££ 
await
££ 
_userManager
££ )
.
££) *
FindByIdAsync
££* 7
(
££7 8
userId
££8 >
)
££> ?
;
££? @
if
•• 
(
•• 
user
•• 
is
•• 
null
•• 
)
•• 
{
¶¶ 
return
ßß 
new
ßß %
RefreshTokenResponseDto
ßß 2
{
®® 
	IsSuccess
©© 
=
©© 
false
©©  %
,
©©% &
ErrorResponse
™™ !
=
™™" #
new
™™$ '*
RefreshTokenErrorResponseDto
™™( D
{
´´ 

StatusCode
¨¨ "
=
¨¨# $
StatusCodes
¨¨% 0
.
¨¨0 1
Status404NotFound
¨¨1 B
,
¨¨B C
StatusMessage
≠≠ %
=
≠≠& '
$str
≠≠( <
}
ÆÆ 
}
ØØ 
;
ØØ 
}
∞∞ 
if
≤≤ 
(
≤≤ 
user
≤≤ 
.
≤≤ 
RefreshToken
≤≤ !
!=
≤≤" $
tokens
≤≤% +
.
≤≤+ ,
RefreshToken
≤≤, 8
)
≤≤9 :
{
≥≥ 
return
¥¥ 
new
¥¥ %
RefreshTokenResponseDto
¥¥ 2
{
µµ 
	IsSuccess
∂∂ 
=
∂∂ 
false
∂∂  %
,
∂∂% &
ErrorResponse
∑∑ !
=
∑∑" #
new
∑∑$ '*
RefreshTokenErrorResponseDto
∑∑( D
{
∏∏ 

StatusCode
ππ "
=
ππ# $
StatusCodes
ππ% 0
.
ππ0 1
Status404NotFound
ππ1 B
,
ππB C
StatusMessage
∫∫ %
=
∫∫& '
$str
∫∫( ^
}
ªª 
}
ºº 
;
ºº 
}
ΩΩ 
if
øø 
(
øø 
user
øø 
.
øø !
RefreshTokenExpires
øø (
<=
øø) +
DateTime
øø, 4
.
øø4 5
UtcNow
øø5 ;
)
øø; <
{
¿¿ 
return
¡¡ 
new
¡¡ %
RefreshTokenResponseDto
¡¡ 2
{
¬¬ 
	IsSuccess
√√ 
=
√√ 
false
√√  %
,
√√% &
ErrorResponse
ƒƒ !
=
ƒƒ" #
new
ƒƒ$ '*
RefreshTokenErrorResponseDto
ƒƒ( D
{
≈≈ 

StatusCode
∆∆ "
=
∆∆# $
StatusCodes
∆∆% 0
.
∆∆0 1
Status404NotFound
∆∆1 B
,
∆∆B C
StatusMessage
«« %
=
««& '
$str
««( D
}
»» 
}
…… 
;
…… 
}
   
string
ÃÃ 
?
ÃÃ 
newBearerToken
ÃÃ "
=
ÃÃ# $
_tokenService
ÃÃ& 3
.
ÃÃ3 4

GetJwToken
ÃÃ4 >
(
ÃÃ> ?
user
ÃÃ? C
!
ÃÃC D
,
ÃÃD E
$num
ÃÃF G
)
ÃÃG H
.
ÃÃH I
Token
ÃÃI N
;
ÃÃN O
string
ÕÕ 
newRefreshToken
ÕÕ "
=
ÕÕ# $
_tokenService
ÕÕ% 2
.
ÕÕ2 3
GetJwRefreshToken
ÕÕ3 D
(
ÕÕD E
)
ÕÕE F
.
ÕÕF G
Token
ÕÕG L
!
ÕÕL M
;
ÕÕM N
DateTime
ŒŒ #
refreshTokenExpiresAt
ŒŒ *
=
ŒŒ+ ,
_tokenService
ŒŒ- :
.
ŒŒ: ;
GetJwRefreshToken
ŒŒ; L
(
ŒŒL M
)
ŒŒM N
.
ŒŒN O
Expires
ŒŒO V
;
ŒŒV W
user
–– 
!
–– 
.
–– 
RefreshToken
–– 
=
––  
newRefreshToken
––! 0
;
––0 1
user
—— 
.
—— !
RefreshTokenExpires
—— $
=
——% &#
refreshTokenExpiresAt
——' <
;
——< =
return
”” 
new
”” %
RefreshTokenResponseDto
”” .
{
‘‘ 
	IsSuccess
’’ 
=
’’ 
true
’’  
,
’’  !
SuccessResponse
÷÷ 
=
÷÷  !
new
÷÷" %,
RefreshTokenSuccessResponseDto
÷÷& D
{
◊◊ 
UserId
ÿÿ 
=
ÿÿ 
user
ÿÿ !
.
ÿÿ! "
Id
ÿÿ" $
,
ÿÿ$ %
BearerToken
ŸŸ 
=
ŸŸ  !
newBearerToken
ŸŸ" 0
,
ŸŸ0 1
RefreshToken
⁄⁄  
=
⁄⁄! "
newRefreshToken
⁄⁄# 2
,
⁄⁄2 3
	ExpiresAt
€€ 
=
€€ #
refreshTokenExpiresAt
€€  5
}
‹‹ 
}
›› 
;
›› 
}
ﬁﬁ 	
public
‡‡ 
async
‡‡ 
Task
‡‡ 
<
‡‡ "
RegistrationResponse
‡‡ .
>
‡‡. /&
CustomerUserRegistration
‡‡0 H
(
‡‡H I,
CustomerRegistrationRequestDto
‡‡I g
details
‡‡h o
)
‡‡o p
{
·· 	
try
‚‚ 
{
„„ 
if
‰‰ 
(
‰‰ 
details
‰‰ 
!=
‰‰ 
null
‰‰ #
)
‰‰# $
{
ÂÂ 
var
ÊÊ 
channels
ÊÊ  
=
ÊÊ! "
await
ÊÊ# (
_unitOfWork
ÊÊ) 4
.
ÊÊ4 5
Channels
ÊÊ5 =
.
ÊÊ= >
Get
ÊÊ> A
(
ÊÊA B
details
ÊÊB I
.
ÊÊI J
	ChannelId
ÊÊJ S
)
ÊÊS T
;
ÊÊT U
if
ËË 
(
ËË 
channels
ËË  
is
ËË! #
null
ËË$ (
)
ËË( )
{
ÈÈ 
var
ÍÍ 
errorResponse
ÍÍ )
=
ÍÍ* +
new
ÍÍ, /'
RegistrationErrorResponse
ÍÍ0 I
{
ÍÍJ K

StatusCode
ÍÍL V
=
ÍÍW X
StatusCodes
ÍÍY d
.
ÍÍd e
Status404NotFound
ÍÍe v
,
ÍÍv w
StatusMessageÍÍx Ö
=ÍÍÜ á
$strÍÍà ú
}ÍÍù û
;ÍÍû ü
return
ÎÎ 
new
ÎÎ ""
RegistrationResponse
ÎÎ# 7
{
ÎÎ8 9
	IsSuccess
ÎÎ: C
=
ÎÎD E
false
ÎÎF K
,
ÎÎK L
ErrorResponse
ÎÎM Z
=
ÎÎ[ \
errorResponse
ÎÎ] j
}
ÎÎk l
;
ÎÎl m
}
ÏÏ 
var
ÓÓ 
new_user
ÓÓ  
=
ÓÓ! "
new
ÓÓ# &%
ApplicationIdentityUser
ÓÓ' >
{
ÔÔ "
IdentificationNumber
 ,
=
- .
details
/ 6
.
6 7
CustomerCode
7 C
,
C D
	FirstName
ÒÒ !
=
ÒÒ" #
details
ÒÒ$ +
.
ÒÒ+ ,
	FirstName
ÒÒ, 5
,
ÒÒ5 6

MiddleName
ÚÚ "
=
ÚÚ# $
details
ÚÚ% ,
.
ÚÚ, -

MiddleName
ÚÚ- 7
,
ÚÚ7 8
LastName
ÛÛ  
=
ÛÛ! "
details
ÛÛ# *
.
ÛÛ* +
LastName
ÛÛ+ 3
,
ÛÛ3 4
Email
ÙÙ 
=
ÙÙ 
details
ÙÙ  '
.
ÙÙ' (
EmailAddress
ÙÙ( 4
,
ÙÙ4 5
UserName
ıı  
=
ıı! "
details
ıı# *
.
ıı* +
EmailAddress
ıı+ 7
,
ıı7 8
PhoneNumber
ˆˆ #
=
ˆˆ$ %
details
ˆˆ& -
.
ˆˆ- .
PhoneNumber
ˆˆ. 9
,
ˆˆ9 :
LastReceiptNumber
˜˜ )
=
˜˜* +
details
˜˜, 3
.
˜˜3 4
LastReceiptNumber
˜˜4 E
,
˜˜E F
LastReceiptImage
¯¯ (
=
¯¯) *
details
¯¯+ 2
.
¯¯2 3
LastReceiptImage
¯¯3 C
,
¯¯C D"
IdentificationTypeId
˘˘ ,
=
˘˘- .
details
˘˘/ 6
.
˘˘6 7"
IdentificationTypeId
˘˘7 K
,
˘˘K L(
IdentificationUniqueNumber
˙˙ 2
=
˙˙3 4
details
˙˙5 <
.
˙˙< =(
IdentificationUniqueNumber
˙˙= W
,
˙˙W X!
IdentificationImage
˚˚ +
=
˚˚, -
details
˚˚. 5
.
˚˚5 6!
IdentificationImage
˚˚6 I
,
˚˚I J$
IdentificationImageOne
¸¸ .
=
¸¸/ 0
details
¸¸1 8
.
¸¸8 9$
IdentificationImageOne
¸¸9 O
,
¸¸O P
SelfieImage
˝˝ #
=
˝˝$ %
details
˝˝& -
.
˝˝- .
SelfieImage
˝˝. 9
,
˝˝9 :
PassportPicture
˛˛ '
=
˛˛( )
details
˛˛* 1
.
˛˛1 2
PassportPicture
˛˛2 A
,
˛˛A B
	ChannelId
ˇˇ !
=
ˇˇ" #
details
ˇˇ$ +
.
ˇˇ+ ,
	ChannelId
ˇˇ, 5
,
ˇˇ5 6
RegistrationDate
ÄÄ (
=
ÄÄ) *
DateTime
ÄÄ+ 3
.
ÄÄ3 4
UtcNow
ÄÄ4 :
,
ÄÄ: ;
Status
ÅÅ 
=
ÅÅ  
(
ÅÅ! "
int
ÅÅ" %
)
ÅÅ% & 
RegistrationStatus
ÅÅ& 8
.
ÅÅ8 9
Pending
ÅÅ9 @
,
ÅÅ@ A
EmailConfirmed
ÇÇ &
=
ÇÇ' (
false
ÇÇ) .
,
ÇÇ. /"
PhoneNumberConfirmed
ÉÉ ,
=
ÉÉ- .
false
ÉÉ/ 4
,
ÉÉ4 5
IsFirstTime
ÑÑ #
=
ÑÑ$ %
true
ÑÑ& *
,
ÑÑ* +
UserType
ÖÖ  
=
ÖÖ! "
(
ÖÖ# $
int
ÖÖ$ '
)
ÖÖ' (
UserAccountType
ÖÖ( 7
.
ÖÖ7 8
Customer
ÖÖ8 @
}
ÜÜ 
;
ÜÜ 
var
àà 
results
àà 
=
àà  !
await
àà" '
_userManager
àà( 4
.
àà4 5
CreateAsync
àà5 @
(
àà@ A
new_user
ààA I
)
ààI J
;
ààJ K
if
ää 
(
ää 
results
ää 
.
ää  
	Succeeded
ää  )
)
ää) *
{
ãã 
await
åå 
_signInManager
åå ,
.
åå, -
SignInAsync
åå- 8
(
åå8 9
new_user
åå9 A
,
ååA B
isPersistent
ååC O
:
ååO P
false
ååQ V
)
ååV W
;
ååW X
var
éé 
successResponse
éé +
=
éé, -
new
éé. 1)
RegistrationSuccessResponse
éé2 M
{
ééN O

StatusCode
ééP Z
=
éé[ \
StatusCodes
éé] h
.
ééh i
Status201Created
ééi y
,
ééy z
StatusMessageéé{ à
=ééâ ä
resultsééã í
.ééí ì
ToStringééì õ
(ééõ ú
)ééú ù
,ééù û
UserIdééü •
=éé¶ ß
new_useréé® ∞
.éé∞ ±
Idéé± ≥
,éé≥ ¥ 
UserEmailAddressééµ ≈
=éé∆ «
new_useréé» –
.éé– —
Emailéé— ÷
!éé÷ ◊
}ééÿ Ÿ
;ééŸ ⁄
var
èè 
response
èè $
=
èè% &
new
èè' *"
RegistrationResponse
èè+ ?
{
èè@ A
	IsSuccess
èèB K
=
èèL M
true
èèN R
,
èèR S
SuccessResponse
èèT c
=
èèd e
successResponse
èèf u
}
èèv w
;
èèw x
return
ëë 
response
ëë '
;
ëë' (
}
ìì 
if
ïï 
(
ïï 
!
ïï 
results
ïï  
.
ïï  !
	Succeeded
ïï! *
)
ïï* +
{
ññ 
_logger
óó 
.
óó  
LogError
óó  (
(
óó( )
$"
óó) +
$str
óó+ H
{
óóH I
string
óóI O
.
óóO P
Join
óóP T
(
óóT U
$str
óóU Y
,
óóY Z
results
óó[ b
.
óób c
Errors
óóc i
.
óói j
Select
óój p
(
óóp q
err
óóq t
=>
óóu w
err
óóx {
.
óó{ |
Descriptionóó| á
)óóá à
)óóà â
}óóâ ä
"óóä ã
)óóã å
;óóå ç
var
òò 
errResponse
òò '
=
òò( )
new
òò* -'
RegistrationErrorResponse
òò. G
{
òòH I

StatusCode
òòJ T
=
òòU V
StatusCodes
òòW b
.
òòb c
Status409Conflict
òòc t
,
òòt u
StatusMessageòòv É
=òòÑ Ö
stringòòÜ å
.òòå ç
Joinòòç ë
(òòë í
$stròòí ñ
,òòñ ó
resultsòòò ü
.òòü †
Errorsòò† ¶
.òò¶ ß
Selectòòß ≠
(òò≠ Æ
erròòÆ ±
=>òò≤ ¥
erròòµ ∏
.òò∏ π
Descriptionòòπ ƒ
)òòƒ ≈
)òò≈ ∆
}òò« »
;òò» …
return
ôô 
new
ôô ""
RegistrationResponse
ôô# 7
{
ôô8 9
	IsSuccess
ôô: C
=
ôôD E
false
ôôF K
,
ôôK L
ErrorResponse
ôôM Z
=
ôô[ \
errResponse
ôô] h
}
ôôi j
;
ôôj k
}
õõ 
}
úú 
var
ûû 
err_Response
ûû  
=
ûû! "
new
ûû# &'
RegistrationErrorResponse
ûû' @
{
ûûA B

StatusCode
ûûC M
=
ûûN O
StatusCodes
ûûP [
.
ûû[ \ 
Status204NoContent
ûû\ n
,
ûûn o
StatusMessage
ûûp }
=
ûû~ 
StatusCodesûûÄ ã
.ûûã å"
Status204NoContentûûå û
.ûûû ü
ToStringûûü ß
(ûûß ®
)ûû® ©
!ûû© ™
}ûû´ ¨
;ûû¨ ≠
return
üü 
new
üü "
RegistrationResponse
üü /
{
üü0 1
	IsSuccess
üü2 ;
=
üü< =
false
üü> C
,
üüC D
ErrorResponse
üüE R
=
üüS T
err_Response
üüU a
}
üüb c
;
üüc d
}
°° 
catch
¢¢ 
(
¢¢ 
	Exception
¢¢ 
ex
¢¢ 
)
¢¢  
{
££ 
var
§§ 
errResponse
§§ 
=
§§  !
new
§§" %'
RegistrationErrorResponse
§§& ?
{
§§@ A

StatusCode
§§B L
=
§§M N
StatusCodes
§§O Z
.
§§Z [*
Status500InternalServerError
§§[ w
,
§§w x
StatusMessage§§y Ü
=§§á à
ex§§â ã
.§§ã å
InnerException§§å ö
!§§ö õ
.§§õ ú
Message§§ú £
!§§£ §
}§§• ¶
;§§¶ ß
return
•• 
new
•• "
RegistrationResponse
•• /
{
••0 1
	IsSuccess
••2 ;
=
••< =
false
••> C
,
••D E
ErrorResponse
••F S
=
••T U
errResponse
••V a
}
••b c
;
••c d
}
¶¶ 
}
ßß 	
public
©© 
async
©© 
Task
©© 
<
©© "
RegistrationResponse
©© .
>
©©. /%
PartnerUserRegistration
©©0 G
(
©©G H/
!PartnerBankRegistrationRequestDto
©©H i
details
©©j q
)
©©q r
{
™™ 	
try
´´ 
{
¨¨ 
ValidationResult
≠≠  
validationResult
≠≠! 1
=
≠≠2 3
await
≠≠4 9
_partnerValidator
≠≠: K
.
≠≠K L
ValidateAsync
≠≠L Y
(
≠≠Y Z
details
≠≠Z a
)
≠≠a b
;
≠≠b c
if
ØØ 
(
ØØ 
validationResult
ØØ $
.
ØØ$ %
IsValid
ØØ% ,
)
ØØ, -
{
∞∞ 
var
±± 
new_user
±±  
=
±±! "
new
±±# &%
ApplicationIdentityUser
±±' >
{
≤≤ 
PartnerName
≥≥ #
=
≥≥$ %
details
≥≥& -
.
≥≥- .
PartnerName
≥≥. 9
,
≥≥9 :
UserName
¥¥  
=
¥¥! "
details
¥¥# *
.
¥¥* +
EmailAddress
¥¥+ 7
,
¥¥7 8
Email
µµ 
=
µµ 
details
µµ  '
.
µµ' (
EmailAddress
µµ( 4
,
µµ4 5
PhoneNumber
∂∂ #
=
∂∂$ %
details
∂∂& -
.
∂∂- .
PhoneNumber
∂∂. 9
,
∂∂9 :$
ContactPerson_FullName
∑∑ .
=
∑∑/ 0
details
∑∑1 8
.
∑∑8 9$
ContactPerson_FullName
∑∑9 O
,
∑∑O P!
ContactPerson_Email
∏∏ +
=
∏∏, -
details
∏∏. 5
.
∏∏5 6(
ContactPerson_EmailAddress
∏∏6 P
,
∏∏P Q'
ContactPerson_PhoneNumber
ππ 1
=
ππ2 3
details
ππ4 ;
.
ππ; <'
ContactPerson_PhoneNumber
ππ< U
,
ππU V$
ContactPerson_Position
∫∫ .
=
∫∫/ 0
details
∫∫1 8
.
∫∫8 9$
ContactPerson_Position
∫∫9 O
,
∫∫O P
EmailConfirmed
ªª &
=
ªª' (
false
ªª) .
,
ªª. /"
PhoneNumberConfirmed
ºº ,
=
ºº- .
false
ºº/ 4
,
ºº4 5
Status
ΩΩ 
=
ΩΩ  
(
ΩΩ! "
int
ΩΩ" %
)
ΩΩ% & 
RegistrationStatus
ΩΩ& 8
.
ΩΩ8 9
Pending
ΩΩ9 @
,
ΩΩ@ A
UserType
ææ  
=
ææ! "
(
ææ# $
int
ææ$ '
)
ææ' (
UserAccountType
ææ( 7
.
ææ7 8
Partners
ææ8 @
}
øø 
;
øø 
var
¡¡ 
results
¡¡ 
=
¡¡  !
await
¡¡" '
_userManager
¡¡( 4
.
¡¡4 5
CreateAsync
¡¡5 @
(
¡¡@ A
new_user
¡¡A I
,
¡¡I J
details
¡¡K R
.
¡¡R S
ConfirmPassword
¡¡S b
)
¡¡b c
;
¡¡c d
if
√√ 
(
√√ 
results
√√ 
.
√√  
	Succeeded
√√  )
)
√√) *
{
ƒƒ 
await
≈≈ 
_signInManager
≈≈ ,
.
≈≈, -
SignInAsync
≈≈- 8
(
≈≈8 9
new_user
≈≈9 A
,
≈≈A B
isPersistent
≈≈C O
:
≈≈O P
false
≈≈Q V
)
≈≈V W
;
≈≈W X
var
«« 
successResponse
«« +
=
««, -
new
««. 1)
RegistrationSuccessResponse
««2 M
{
««N O

StatusCode
««P Z
=
««[ \
StatusCodes
««] h
.
««h i
Status201Created
««i y
,
««y z
StatusMessage««{ à
=««â ä
results««ã í
.««í ì
ToString««ì õ
(««õ ú
)««ú ù
,««ù û
UserId««ü •
=««¶ ß
new_user««® ∞
.««∞ ±
Id««± ≥
,««≥ ¥ 
UserEmailAddress««µ ≈
=««∆ «
new_user««» –
.««– —
Email««— ÷
!««÷ ◊
}««ÿ Ÿ
;««Ÿ ⁄
return
»» 
new
»» ""
RegistrationResponse
»»# 7
{
»»8 9
	IsSuccess
»»: C
=
»»D E
true
»»F J
,
»»J K
SuccessResponse
»»L [
=
»»\ ]
successResponse
»»^ m
}
»»n o
;
»»o p
;
»»q r
}
   
if
ÃÃ 
(
ÃÃ 
!
ÃÃ 
results
ÃÃ  
.
ÃÃ  !
	Succeeded
ÃÃ! *
)
ÃÃ* +
{
ÕÕ 
_logger
ŒŒ 
.
ŒŒ  
LogError
ŒŒ  (
(
ŒŒ( )
$"
ŒŒ) +
$str
ŒŒ+ L
{
ŒŒL M
string
ŒŒM S
.
ŒŒS T
Join
ŒŒT X
(
ŒŒX Y
$str
ŒŒY ]
,
ŒŒ] ^
results
ŒŒ_ f
.
ŒŒf g
Errors
ŒŒg m
.
ŒŒm n
Select
ŒŒn t
(
ŒŒt u
err
ŒŒu x
=>
ŒŒy {
err
ŒŒ| 
.ŒŒ Ä
DescriptionŒŒÄ ã
)ŒŒã å
)ŒŒå ç
}ŒŒç é
"ŒŒé è
)ŒŒè ê
;ŒŒê ë
var
œœ 
errorResponse
œœ )
=
œœ* +
new
œœ, /'
RegistrationErrorResponse
œœ0 I
{
œœJ K

StatusCode
œœL V
=
œœW X
StatusCodes
œœY d
.
œœd e
Status409Conflict
œœe v
,
œœv w
StatusMessageœœx Ö
=œœÜ á
stringœœà é
.œœé è
Joinœœè ì
(œœì î
$strœœî ò
,œœò ô
resultsœœö °
.œœ° ¢
Errorsœœ¢ ®
.œœ® ©
Selectœœ© Ø
(œœØ ∞
errœœ∞ ≥
=>œœ¥ ∂
errœœ∑ ∫
.œœ∫ ª
Descriptionœœª ∆
)œœ∆ «
)œœ« »
}œœ…  
;œœ  À
return
–– 
new
–– ""
RegistrationResponse
––# 7
{
––8 9
	IsSuccess
––: C
=
––D E
false
––F K
,
––K L
ErrorResponse
––M Z
=
––[ \
errorResponse
––] j
}
––k l
;
––l m
}
—— 
}
““ 
var
‘‘ 
err_response
‘‘  
=
‘‘! "
new
‘‘# &'
RegistrationErrorResponse
‘‘' @
{
‘‘A B

StatusCode
‘‘C M
=
‘‘N O
StatusCodes
‘‘P [
.
‘‘[ \!
Status400BadRequest
‘‘\ o
,
‘‘o p
StatusMessage
‘‘q ~
=‘‘ Ä 
validationResult‘‘Å ë
.‘‘ë í
ToString‘‘í ö
(‘‘ö õ
)‘‘õ ú
}‘‘ù û
;‘‘û ü
return
’’ 
new
’’ "
RegistrationResponse
’’ /
{
’’0 1
	IsSuccess
’’2 ;
=
’’< =
false
’’> C
,
’’C D
ErrorResponse
’’E R
=
’’S T
err_response
’’U a
}
’’b c
;
’’c d
}
÷÷ 
catch
◊◊ 
(
◊◊ 
	Exception
◊◊ 
ex
◊◊ 
)
◊◊  
{
ÿÿ 
var
ŸŸ 
err_response
ŸŸ  
=
ŸŸ! "
new
ŸŸ# &'
RegistrationErrorResponse
ŸŸ' @
{
ŸŸA B

StatusCode
ŸŸC M
=
ŸŸN O
StatusCodes
ŸŸP [
.
ŸŸ[ \*
Status500InternalServerError
ŸŸ\ x
,
ŸŸx y
StatusMessageŸŸz á
=ŸŸà â
exŸŸä å
.ŸŸå ç
InnerExceptionŸŸç õ
!ŸŸõ ú
.ŸŸú ù
MessageŸŸù §
}ŸŸ• ¶
;ŸŸ¶ ß
return
⁄⁄ 
new
⁄⁄ "
RegistrationResponse
⁄⁄ /
{
⁄⁄0 1
	IsSuccess
⁄⁄2 ;
=
⁄⁄< =
false
⁄⁄> C
,
⁄⁄C D
ErrorResponse
⁄⁄E R
=
⁄⁄S T
err_response
⁄⁄U a
}
⁄⁄b c
;
⁄⁄c d
}
€€ 
}
‹‹ 	
public
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ 
<
ﬁﬁ "
RegistrationResponse
ﬁﬁ .
>
ﬁﬁ. /#
StaffUserRegistration
ﬁﬁ0 E
(
ﬁﬁE F)
StaffRegistrationRequestDto
ﬁﬁF a
details
ﬁﬁb i
)
ﬁﬁi j
{
ﬂﬂ 	
try
‡‡ 
{
·· 
if
‚‚ 
(
‚‚ 
details
‚‚ 
!=
‚‚ 
null
‚‚ #
)
‚‚# $
{
„„ 
var
‰‰ 
staffId
‰‰ 
=
‰‰  !
await
‰‰" '
_unitOfWork
‰‰( 3
.
‰‰3 4
Users
‰‰4 9
.
‰‰9 :
Get
‰‰: =
(
‰‰= >
i
‰‰> ?
=>
‰‰@ B
i
‰‰C D
.
‰‰D E"
IdentificationNumber
‰‰E Y
==
‰‰Z \
details
‰‰] d
.
‰‰d e'
StaffIdentificationNumber
‰‰e ~
)
‰‰~ 
;‰‰ Ä
if
ÂÂ 
(
ÂÂ 
staffId
ÂÂ 
is
ÂÂ !
not
ÂÂ" %
null
ÂÂ& *
)
ÂÂ* +
{
ÊÊ 
_logger
ÁÁ 
.
ÁÁ  
LogError
ÁÁ  (
(
ÁÁ( )
$"
ÁÁ) +
$str
ÁÁ+ c
{
ÁÁc d
details
ÁÁd k
.
ÁÁk l(
StaffIdentificationNumberÁÁl Ö
}ÁÁÖ Ü
$strÁÁÜ î
"ÁÁî ï
)ÁÁï ñ
;ÁÁñ ó
var
ËË 
errorResponse
ËË )
=
ËË* +
new
ËË, /'
RegistrationErrorResponse
ËË0 I
{
ËËJ K

StatusCode
ËËL V
=
ËËW X
StatusCodes
ËËY d
.
ËËd e
Status409Conflict
ËËe v
,
ËËv w
StatusMessageËËx Ö
=ËËÜ á
$"ËËà ä
$strËËä º
{ËËº Ω
detailsËËΩ ƒ
.ËËƒ ≈)
StaffIdentificationNumberËË≈ ﬁ
}ËËﬁ ﬂ
$strËËﬂ Ó
"ËËÓ Ô
}ËË Ò
;ËËÒ Ú
return
ÈÈ 
new
ÈÈ ""
RegistrationResponse
ÈÈ# 7
{
ÈÈ8 9
	IsSuccess
ÈÈ: C
=
ÈÈD E
false
ÈÈF K
,
ÈÈK L
ErrorResponse
ÈÈM Z
=
ÈÈ[ \
errorResponse
ÈÈ] j
}
ÈÈk l
;
ÈÈl m
}
ÍÍ 
var
ÏÏ 
unit
ÏÏ 
=
ÏÏ 
await
ÏÏ $
_unitOfWork
ÏÏ% 0
.
ÏÏ0 1
DepartmentUnit
ÏÏ1 ?
.
ÏÏ? @
Get
ÏÏ@ C
(
ÏÏC D
du
ÏÏD F
=>
ÏÏG I
du
ÏÏJ L
.
ÏÏL M
DepartmentId
ÏÏM Y
==
ÏÏZ \
details
ÏÏ] d
.
ÏÏd e
DepartmentId
ÏÏe q
&&
ÏÏr t
du
ÏÏu w
.
ÏÏw x
UnitId
ÏÏx ~
==ÏÏ Å
detailsÏÏÇ â
.ÏÏâ ä
UnitIdÏÏä ê
)ÏÏê ë
;ÏÏë í
if
ÌÌ 
(
ÌÌ 
unit
ÌÌ 
is
ÌÌ 
null
ÌÌ #
)
ÌÌ# $
{
ÓÓ 
var
ÔÔ 
errorResponse
ÔÔ )
=
ÔÔ* +
new
ÔÔ, /'
RegistrationErrorResponse
ÔÔ0 I
{
ÔÔJ K

StatusCode
ÔÔL V
=
ÔÔW X
StatusCodes
ÔÔY d
.
ÔÔd e
Status404NotFound
ÔÔe v
,
ÔÔv w
StatusMessageÔÔx Ö
=ÔÔÜ á
$strÔÔà ®
}ÔÔ© ™
;ÔÔ™ ´
return
 
new
 ""
RegistrationResponse
# 7
{
8 9
	IsSuccess
: C
=
D E
false
F K
,
K L
ErrorResponse
M Z
=
[ \
errorResponse
] j
}
k l
;
l m
}
ÒÒ 
var
ÛÛ 
channels
ÛÛ  
=
ÛÛ! "
await
ÛÛ# (
_unitOfWork
ÛÛ) 4
.
ÛÛ4 5
Channels
ÛÛ5 =
.
ÛÛ= >
Get
ÛÛ> A
(
ÛÛA B
details
ÛÛB I
.
ÛÛI J
	ChannelId
ÛÛJ S
)
ÛÛS T
;
ÛÛT U
if
ÙÙ 
(
ÙÙ 
channels
ÙÙ  
is
ÙÙ! #
null
ÙÙ$ (
)
ÙÙ( )
{
ıı 
var
ˆˆ 
errorResponse
ˆˆ )
=
ˆˆ* +
new
ˆˆ, /'
RegistrationErrorResponse
ˆˆ0 I
{
ˆˆJ K

StatusCode
ˆˆL V
=
ˆˆW X
StatusCodes
ˆˆY d
.
ˆˆd e
Status404NotFound
ˆˆe v
,
ˆˆv w
StatusMessageˆˆx Ö
=ˆˆÜ á
$strˆˆà ú
}ˆˆù û
;ˆˆû ü
return
˜˜ 
new
˜˜ ""
RegistrationResponse
˜˜# 7
{
˜˜8 9
	IsSuccess
˜˜: C
=
˜˜D E
false
˜˜F K
,
˜˜K L
ErrorResponse
˜˜M Z
=
˜˜[ \
errorResponse
˜˜] j
}
˜˜k l
;
˜˜l m
}
¯¯ 
var
˙˙ 
new_user
˙˙  
=
˙˙! "
new
˙˙# &%
ApplicationIdentityUser
˙˙' >
{
˚˚ "
IdentificationNumber
¸¸ ,
=
¸¸- .
details
¸¸/ 6
.
¸¸6 7'
StaffIdentificationNumber
¸¸7 P
,
¸¸P Q
DepartmentId
˝˝ $
=
˝˝% &
details
˝˝' .
.
˝˝. /
DepartmentId
˝˝/ ;
,
˝˝; <
UnitId
˛˛ 
=
˛˛  
details
˛˛! (
.
˛˛( )
UnitId
˛˛) /
,
˛˛/ 0
	FirstName
ˇˇ !
=
ˇˇ" #
details
ˇˇ$ +
.
ˇˇ+ ,
	FirstName
ˇˇ, 5
.
ˇˇ5 6
Trim
ˇˇ6 :
(
ˇˇ: ;
)
ˇˇ; <
,
ˇˇ< =

MiddleName
ÄÄ "
=
ÄÄ# $
details
ÄÄ% ,
.
ÄÄ, -

MiddleName
ÄÄ- 7
.
ÄÄ7 8
Trim
ÄÄ8 <
(
ÄÄ< =
)
ÄÄ= >
,
ÄÄ> ?
LastName
ÅÅ  
=
ÅÅ! "
details
ÅÅ# *
.
ÅÅ* +
LastName
ÅÅ+ 3
.
ÅÅ3 4
Trim
ÅÅ4 8
(
ÅÅ8 9
)
ÅÅ9 :
,
ÅÅ: ;
Email
ÇÇ 
=
ÇÇ 
details
ÇÇ  '
.
ÇÇ' (
EmailAddress
ÇÇ( 4
,
ÇÇ4 5
UserName
ÉÉ  
=
ÉÉ! "
details
ÉÉ# *
.
ÉÉ* +
EmailAddress
ÉÉ+ 7
,
ÉÉ7 8
PhoneNumber
ÑÑ #
=
ÑÑ$ %
details
ÑÑ& -
.
ÑÑ- .
PhoneNumber
ÑÑ. 9
,
ÑÑ9 :
	ChannelId
ÖÖ !
=
ÖÖ" #
details
ÖÖ$ +
.
ÖÖ+ ,
	ChannelId
ÖÖ, 5
,
ÖÖ5 6
RegistrationDate
ÜÜ (
=
ÜÜ) *
DateTime
ÜÜ+ 3
.
ÜÜ3 4
UtcNow
ÜÜ4 :
,
ÜÜ: ;
Status
áá 
=
áá  
(
áá! "
int
áá" %
)
áá% & 
RegistrationStatus
áá' 9
.
áá9 :
Pending
áá: A
,
ááA B
ProfilePicture
àà &
=
àà' (
details
àà) 0
.
àà0 1
ProfilePicture
àà1 ?
,
àà? @
EmailConfirmed
ââ &
=
ââ' (
false
ââ) .
,
ââ. /"
PhoneNumberConfirmed
ää ,
=
ää- .
false
ää/ 4
,
ää4 5
UserType
ãã  
=
ãã! "
(
ãã# $
int
ãã$ '
)
ãã' (
UserAccountType
ãã( 7
.
ãã7 8
Staff
ãã8 =
}
åå 
;
åå 
var
éé 
results
éé 
=
éé  !
await
éé" '
_userManager
éé( 4
.
éé4 5
CreateAsync
éé5 @
(
éé@ A
new_user
ééA I
)
ééI J
;
ééJ K
if
êê 
(
êê 
results
êê 
.
êê  
	Succeeded
êê  )
)
êê) *
{
ëë 
await
íí 
_signInManager
íí ,
.
íí, -
SignInAsync
íí- 8
(
íí8 9
new_user
íí9 A
,
ííA B
isPersistent
ííC O
:
ííO P
false
ííQ V
)
ííV W
;
ííW X
var
îî 
successResponse
îî +
=
îî, -
new
îî. 1)
RegistrationSuccessResponse
îî2 M
{
îîN O

StatusCode
îîP Z
=
îî[ \
StatusCodes
îî] h
.
îîh i
Status201Created
îîi y
,
îîy z
StatusMessageîî{ à
=îîâ ä
resultsîîã í
.îîí ì
ToStringîîì õ
(îîõ ú
)îîú ù
,îîù û
UserIdîîü •
=îî¶ ß
new_userîî® ∞
.îî∞ ±
Idîî± ≥
,îî≥ ¥ 
UserEmailAddressîîµ ≈
=îî∆ «
new_userîî» –
.îî– —
Emailîî— ÷
!îî÷ ◊
}îîÿ Ÿ
;îîŸ ⁄
return
ïï 
new
ïï ""
RegistrationResponse
ïï# 7
{
ïï8 9
	IsSuccess
ïï: C
=
ïïD E
true
ïïF J
,
ïïJ K
SuccessResponse
ïïL [
=
ïï\ ]
successResponse
ïï^ m
}
ïïn o
;
ïïo p
;
ïïq r
}
ññ 
if
òò 
(
òò 
!
òò 
results
òò  
.
òò  !
	Succeeded
òò! *
)
òò* +
{
ôô 
_logger
öö 
.
öö  
LogError
öö  (
(
öö( )
$"
öö) +
$str
öö+ E
{
ööE F
string
ööF L
.
ööL M
Join
ööM Q
(
ööQ R
$str
ööR V
,
ööV W
results
ööX _
.
öö_ `
Errors
öö` f
.
ööf g
Select
öög m
(
ööm n
err
öön q
=>
öör t
err
ööu x
.
ööx y
Descriptionööy Ñ
)ööÑ Ö
)ööÖ Ü
}ööÜ á
"ööá à
)ööà â
;ööâ ä
var
õõ 
errorResponse
õõ )
=
õõ* +
new
õõ, /'
RegistrationErrorResponse
õõ0 I
{
õõJ K

StatusCode
õõL V
=
õõW X
StatusCodes
õõY d
.
õõd e
Status409Conflict
õõe v
,
õõv w
StatusMessageõõx Ö
=õõÜ á
stringõõà é
.õõé è
Joinõõè ì
(õõì î
$strõõî ò
,õõò ô
resultsõõö °
.õõ° ¢
Errorsõõ¢ ®
.õõ® ©
Selectõõ© Ø
(õõØ ∞
errõõ∞ ≥
=>õõ¥ ∂
errõõ∑ ∫
.õõ∫ ª
Descriptionõõª ∆
)õõ∆ «
)õõ« »
}õõ…  
;õõ  À
return
úú 
new
úú ""
RegistrationResponse
úú# 7
{
úú8 9
	IsSuccess
úú: C
=
úúD E
false
úúF K
,
úúK L
ErrorResponse
úúM Z
=
úú[ \
errorResponse
úú] j
}
úúk l
;
úúl m
}
ùù 
}
ûû 
var
†† 
err_response
††  
=
††! "
new
††# &'
RegistrationErrorResponse
††' @
{
††A B

StatusCode
††C M
=
††N O
StatusCodes
††P [
.
††[ \!
Status400BadRequest
††\ o
,
††o p
StatusMessage
††q ~
=†† Ä
StatusCodes††Å å
.††å ç#
Status400BadRequest††ç †
.††† °
ToString††° ©
(††© ™
)††™ ´
}††¨ ≠
;††≠ Æ
return
°° 
new
°° "
RegistrationResponse
°° /
{
°°0 1
	IsSuccess
°°2 ;
=
°°< =
false
°°> C
,
°°C D
ErrorResponse
°°E R
=
°°S T
err_response
°°U a
}
°°b c
;
°°c d
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
ex
££ 
)
££  
{
§§ 
var
•• 
err_response
••  
=
••! "
new
••# &'
RegistrationErrorResponse
••' @
{
••A B

StatusCode
••C M
=
••N O
StatusCodes
••P [
.
••[ \*
Status500InternalServerError
••\ x
,
••x y
StatusMessage••z á
=••à â
ex••ä å
.••å ç
InnerException••ç õ
!••õ ú
.••ú ù
Message••ù §
}••• ¶
;••¶ ß
return
¶¶ 
new
¶¶ "
RegistrationResponse
¶¶ /
{
¶¶0 1
	IsSuccess
¶¶2 ;
=
¶¶< =
false
¶¶> C
,
¶¶C D
ErrorResponse
¶¶E R
=
¶¶S T
err_response
¶¶U a
}
¶¶b c
;
¶¶c d
}
ßß 
}
®® 	
public
™™ 
async
™™ 
Task
™™ 
<
™™  
UserInformationDto
™™ ,
>
™™, -
UserDetails
™™. 9
(
™™9 :
string
™™: @
userId
™™A G
)
™™G H
{
´´ 	
var
¨¨ 
user
¨¨ 
=
¨¨ 
await
¨¨ 
_userManager
¨¨ )
.
¨¨) *
FindByIdAsync
¨¨* 7
(
¨¨7 8
userId
¨¨8 >
)
¨¨> ?
;
¨¨? @
if
ÆÆ 
(
ÆÆ 
user
ÆÆ 
!
ÆÆ 
.
ÆÆ 
UserType
ÆÆ 
==
ÆÆ  
(
ÆÆ! "
int
ÆÆ" %
)
ÆÆ% &
UserAccountType
ÆÆ& 5
.
ÆÆ5 6
Customer
ÆÆ6 >
)
ÆÆ> ?
{
ØØ 
var
∞∞ 
channelName
∞∞ 
=
∞∞  !
(
∞∞" #
await
∞∞# (
_unitOfWork
∞∞) 4
.
∞∞4 5
Channels
∞∞5 =
.
∞∞= >
Get
∞∞> A
(
∞∞A B
user
∞∞B F
.
∞∞F G
	ChannelId
∞∞G P
)
∞∞P Q
)
∞∞Q R
?
∞∞R S
.
∞∞S T
ChannelName
∞∞T _
??
∞∞` b
$str
∞∞c l
;
∞∞l m
var
±± 
userType
±± 
=
±± ,
UserAccountTypeEnumDescription
±± =
.
±±= >
UserType
±±> F
(
±±F G
user
±±G K
.
±±K L
UserType
±±L T
)
±±T U
.
±±U V
ToString
±±V ^
(
±±^ _
)
±±_ `
;
±±` a
var
≤≤  
registrationStatus
≤≤ &
=
≤≤' (/
!RegistrationStatusEnumDescription
≤≤) J
.
≤≤J K$
RegistrationStatusEnum
≤≤K a
(
≤≤a b
user
≤≤b f
.
≤≤f g
Status
≤≤g m
)
≤≤m n
.
≤≤n o
ToString
≤≤o w
(
≤≤w x
)
≤≤x y
;
≤≤y z
var
≥≥  
identificationType
≥≥ &
=
≥≥' (
(
≥≥) *
await
≥≥* /
_unitOfWork
≥≥0 ;
.
≥≥; < 
IdentificationType
≥≥< N
.
≥≥N O
Get
≥≥O R
(
≥≥R S
user
≥≥S W
.
≥≥W X"
IdentificationTypeId
≥≥X l
)
≥≥l m
)
≥≥m n
?
≥≥n o
.
≥≥o p"
IdentificationTypes≥≥p É
??≥≥Ñ Ü
$str≥≥á ê
;≥≥ê ë
return
µµ 
new
µµ (
CustomerUserInformationDto
µµ 5
(
µµ5 6
user
µµ6 :
,
µµ: ; 
identificationType
µµ< N
,
µµN O
channelName
µµP [
,
µµ[ \
userType
µµ] e
,
µµe f 
registrationStatus
µµg y
)
µµy z
;
µµz {
}
∂∂ 
if
∏∏ 
(
∏∏ 
user
∏∏ 
!
∏∏ 
.
∏∏ 
UserType
∏∏ 
==
∏∏ !
(
∏∏" #
int
∏∏# &
)
∏∏& '
UserAccountType
∏∏' 6
.
∏∏6 7
Staff
∏∏7 <
)
∏∏< =
{
ππ 
var
ªª 

department
ªª 
=
ªª  
(
ªª! "
await
ªª" '
_unitOfWork
ªª( 3
.
ªª3 4

Department
ªª4 >
.
ªª> ?
Get
ªª? B
(
ªªB C
user
ªªC G
.
ªªG H
DepartmentId
ªªH T
)
ªªT U
)
ªªU V
?
ªªV W
.
ªªW X
DepartmentName
ªªX f
??
ªªg i
$str
ªªj s
;
ªªs t
var
ºº 
unit
ºº 
=
ºº 
(
ºº 
await
ºº !
_unitOfWork
ºº" -
.
ºº- .
DepartmentUnit
ºº. <
.
ºº< =
Get
ºº= @
(
ºº@ A
user
ººA E
.
ººE F
UnitId
ººF L
)
ººL M
)
ººM N
?
ººN O
.
ººO P
UnitName
ººP X
??
ººY [
$str
ºº\ e
;
ººe f
var
ΩΩ 
channelName
ΩΩ 
=
ΩΩ  !
(
ΩΩ" #
await
ΩΩ# (
_unitOfWork
ΩΩ) 4
.
ΩΩ4 5
Channels
ΩΩ5 =
.
ΩΩ= >
Get
ΩΩ> A
(
ΩΩA B
user
ΩΩB F
.
ΩΩF G
	ChannelId
ΩΩG P
)
ΩΩP Q
)
ΩΩQ R
?
ΩΩR S
.
ΩΩS T
ChannelName
ΩΩT _
??
ΩΩ` b
$str
ΩΩc l
;
ΩΩl m
var
ææ 
userType
ææ 
=
ææ ,
UserAccountTypeEnumDescription
ææ =
.
ææ= >
UserType
ææ> F
(
ææF G
user
ææG K
.
ææK L
UserType
ææL T
)
ææT U
.
ææU V
ToString
ææV ^
(
ææ^ _
)
ææ_ `
;
ææ` a
var
øø  
registrationStatus
øø &
=
øø' (/
!RegistrationStatusEnumDescription
øø) J
.
øøJ K$
RegistrationStatusEnum
øøK a
(
øøa b
user
øøb f
.
øøf g
Status
øøg m
)
øøm n
.
øøn o
ToString
øøo w
(
øøw x
)
øøx y
;
øøy z
var
¡¡ 
	userRoles
¡¡ 
=
¡¡ 
await
¡¡  %
_userManager
¡¡& 2
.
¡¡2 3
GetRolesAsync
¡¡3 @
(
¡¡@ A
user
¡¡A E
)
¡¡E F
;
¡¡F G
if
¬¬ 
(
¬¬ 
	userRoles
¬¬ 
.
¬¬ 
Count
¬¬ "
==
¬¬# %
$num
¬¬& '
)
¬¬' (
{
√√ 
var
ƒƒ 
permissions
ƒƒ #
=
ƒƒ$ %
new
ƒƒ& )-
PermissionsAccessModulesReadDto
ƒƒ* I
(
ƒƒI J
string
ƒƒJ P
.
ƒƒP Q
Empty
ƒƒQ V
,
ƒƒV W
new
ƒƒX [
List
ƒƒ\ `
<
ƒƒ` a6
'PermissionAccessMenusWithActionsReadDtoƒƒa à
>ƒƒà â
(ƒƒâ ä
)ƒƒä ã
)ƒƒã å
;ƒƒå ç
return
≈≈ 
new
≈≈ %
StaffUserInformationDto
≈≈ 6
(
≈≈6 7
user
≈≈7 ;
,
≈≈; <

department
≈≈= G
,
≈≈G H
unit
≈≈I M
,
≈≈M N
channelName
≈≈O Z
,
≈≈Z [
userType
≈≈\ d
,
≈≈d e 
registrationStatus
≈≈f x
,
≈≈x y
	userRoles≈≈z É
,≈≈É Ñ
permissions≈≈Ö ê
!≈≈ê ë
)≈≈ë í
;≈≈í ì
}
«« 
else
»» 
{
…… 
var
   
permissions
   #
=
  $ %
await
  & +
_menuService
  , 8
.
  8 9$
GetUserRolePermissions
  9 O
(
  O P
user
  P T
.
  T U
Id
  U W
)
  W X
;
  X Y
return
ÀÀ 
new
ÀÀ %
StaffUserInformationDto
ÀÀ 6
(
ÀÀ6 7
user
ÀÀ7 ;
,
ÀÀ; <

department
ÀÀ= G
,
ÀÀG H
unit
ÀÀI M
,
ÀÀM N
channelName
ÀÀO Z
,
ÀÀZ [
userType
ÀÀ\ d
,
ÀÀd e 
registrationStatus
ÀÀf x
,
ÀÀx y
	userRolesÀÀz É
,ÀÀÉ Ñ
permissionsÀÀÖ ê
)ÀÀê ë
;ÀÀë í
}
ÕÕ 
}
—— 
return
”” 
null
”” 
!
”” 
;
”” 
}
‘‘ 	
public
÷÷ 
async
÷÷ 
Task
÷÷ 
<
÷÷ -
UpdateAccountDetailsResponseDto
÷÷ 9
>
÷÷9 :"
UpdateAccountDetails
÷÷; O
(
÷÷O P
UpdateUserDto
÷÷P ]
values
÷÷^ d
)
÷÷d e
{
◊◊ 	
if
ŸŸ 
(
ŸŸ 
values
ŸŸ 
is
ŸŸ 
null
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
return
€€ 
new
€€ -
UpdateAccountDetailsResponseDto
€€ :
{
€€; <
error
€€= B
=
€€C D
new
€€E H 
GenericResponseDto
€€I [
(
€€[ \
$str€€\ à
)€€à â
,€€â ä
success€€ã í
=€€ì î
null€€ï ô
!€€ô ö
}€€õ ú
;€€ú ù
}
‹‹ 
var
ﬁﬁ 
user
ﬁﬁ 
=
ﬁﬁ 
await
ﬁﬁ 
_userManager
ﬁﬁ )
.
ﬁﬁ) *
FindByIdAsync
ﬁﬁ* 7
(
ﬁﬁ7 8
values
ﬁﬁ8 >
.
ﬁﬁ> ?
UserId
ﬁﬁ? E
)
ﬁﬁE F
;
ﬁﬁF G
if
ﬂﬂ 
(
ﬂﬂ 
user
ﬂﬂ 
is
ﬂﬂ 
null
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
return
·· 
new
·· -
UpdateAccountDetailsResponseDto
·· :
{
··; <
error
··= B
=
··C D
new
··E H 
GenericResponseDto
··I [
(
··[ \
$str
··\ o
)
··o p
,
··p q
success
··r y
=
··z {
null··| Ä
!··Ä Å
}··Ç É
;··É Ñ
}
‚‚ 
if
‰‰ 
(
‰‰ 
string
‰‰ 
.
‰‰  
IsNullOrWhiteSpace
‰‰ (
(
‰‰( )
values
‰‰) /
.
‰‰/ 0
UserId
‰‰0 6
)
‰‰6 7
||
‰‰8 :
string
‰‰; A
.
‰‰A B 
IsNullOrWhiteSpace
‰‰B T
(
‰‰T U
values
‰‰U [
.
‰‰[ \
PhoneNumber
‰‰\ g
)
‰‰g h
||
‰‰i k
string
‰‰l r
.
‰‰r s!
IsNullOrWhiteSpace‰‰s Ö
(‰‰Ö Ü
values‰‰Ü å
.‰‰å ç
ProfilePicture‰‰ç õ
)‰‰õ ú
||‰‰ù ü
string‰‰† ¶
.‰‰¶ ß"
IsNullOrWhiteSpace‰‰ß π
(‰‰π ∫
values‰‰∫ ¿
.‰‰¿ ¡

MiddleName‰‰¡ À
)‰‰À Ã
)‰‰Ã Õ
{
ÂÂ 
return
ÊÊ 
new
ÊÊ -
UpdateAccountDetailsResponseDto
ÊÊ :
{
ÊÊ; <
error
ÊÊ= B
=
ÊÊC D
new
ÊÊE H 
GenericResponseDto
ÊÊI [
(
ÊÊ[ \
$strÊÊ\ É
)ÊÊÉ Ñ
,ÊÊÑ Ö
successÊÊÜ ç
=ÊÊé è
nullÊÊê î
!ÊÊî ï
}ÊÊñ ó
;ÊÊó ò
}
ÁÁ 
if
ÈÈ 
(
ÈÈ 
!
ÈÈ 
string
ÈÈ 
.
ÈÈ  
IsNullOrWhiteSpace
ÈÈ )
(
ÈÈ) *
values
ÈÈ* 0
.
ÈÈ0 1
PhoneNumber
ÈÈ1 <
)
ÈÈ< =
)
ÈÈ= >
{
ÍÍ 
user
ÎÎ 
.
ÎÎ 
PhoneNumber
ÎÎ  
=
ÎÎ! "
values
ÎÎ# )
.
ÎÎ) *
PhoneNumber
ÎÎ* 5
;
ÎÎ5 6
}
ÏÏ 
if
ÓÓ 
(
ÓÓ 
!
ÓÓ 
string
ÓÓ 
.
ÓÓ  
IsNullOrWhiteSpace
ÓÓ *
(
ÓÓ* +
values
ÓÓ+ 1
.
ÓÓ1 2
ProfilePicture
ÓÓ2 @
)
ÓÓ@ A
)
ÓÓA B
{
ÔÔ 
user
 
.
 
ProfilePicture
 #
=
$ %
values
& ,
.
, -
ProfilePicture
- ;
;
; <
}
ÒÒ 
if
ÛÛ 
(
ÛÛ 
!
ÛÛ 
string
ÛÛ 
.
ÛÛ  
IsNullOrWhiteSpace
ÛÛ *
(
ÛÛ* +
values
ÛÛ+ 1
.
ÛÛ1 2

MiddleName
ÛÛ2 <
)
ÛÛ< =
)
ÛÛ= >
{
ÙÙ 
user
ıı 
.
ıı 

MiddleName
ıı 
=
ıı  !
values
ıı" (
.
ıı( )

MiddleName
ıı) 3
;
ıı3 4
}
ˆˆ 
await
¯¯ 
_userManager
¯¯ 
.
¯¯ 
UpdateAsync
¯¯ *
(
¯¯* +
user
¯¯+ /
)
¯¯/ 0
;
¯¯0 1
return
¸¸ 
new
¸¸ -
UpdateAccountDetailsResponseDto
¸¸ 6
{
¸¸7 8
error
¸¸9 >
=
¸¸? @
null
¸¸A E
,
¸¸E F
success
¸¸G N
=
¸¸O P
await
¸¸Q V
UserDetails
¸¸W b
(
¸¸b c
values
¸¸c i
.
¸¸i j
UserId
¸¸j p
)
¸¸p q
}
¸¸q r
;
¸¸r s
}
˝˝ 	
}
ÅÅ 
}ÇÇ í⁄
s/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/UseCases/MenuService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
UseCases$ ,
{ 
public 
class 
MenuService 
: 
IMenuService (
{ 
readonly 
IUnitOfWork 
_unitOfWork (
;( )
readonly 
IMapper 
_mapper  
;  !
readonly 
UserManager 
< #
ApplicationIdentityUser 4
>4 5
_userManager6 B
;B C
readonly 
RoleManager 
< #
ApplicationIdentityRole 4
>4 5
_roleManager6 B
;B C
readonly 
ValidationService "
_validationService# 5
;5 6
public 
MenuService 
( 
IUnitOfWork &

unitOfWork' 1
,1 2
IMapper3 :
mapper; A
,A B
ValidationServiceC T
validationServiceU f
,f g
UserManagerh s
<s t$
ApplicationIdentityUser	t ã
>
ã å
userManager
ç ò
,
ò ô
RoleManager
ö •
<
• ¶%
ApplicationIdentityRole
¶ Ω
>
Ω æ
roleManager
ø  
)
  À
{ 
_unitOfWork 
= 

unitOfWork $
;$ %
_mapper 
= 
mapper 
; 
_validationService   
=    
validationService  ! 2
;  2 3
_userManager!! 
=!! 
userManager!! &
;!!& '
_roleManager"" 
="" 
roleManager"" &
;""& '
}## 	
public&& 
async&& 
Task&& 
<&& 
GenericResponseDto&& ,
>&&, -"
AssignPermissionToRole&&. D
(&&D E'
PermissionsAccessModulesDto&&E `
rolesPermissions&&a q
)&&q r
{'' 	
if(( 
((( 
rolesPermissions((  
is((! #
null(($ (
||(() +
rolesPermissions((, <
.((< =$
permissionsAccessModules((= U
==((V X
null((Y ]
)((] ^
{)) 
return** 
new** 
GenericResponseDto** -
(**- .
$str**. C
)**C D
;**D E
}++ 
var.. 
persmissions.. 
=.. 
await.. $
_unitOfWork..% 0
...0 1
AcccessPermissions..1 C
...C D
GetAll..D J
(..J K
p..K L
=>..M O
p..P Q
...Q R
RoleId..R X
==..Y [
rolesPermissions..\ l
...l m
RoleId..m s
)..s t
;..t u
if00 
(00 
persmissions00 
is00 
not00 "
null00# '
)00' (
{11 
_unitOfWork22 
.22 
AcccessPermissions22 .
.22. /
DeleteRange22/ :
(22: ;
persmissions22; G
)22G H
;22H I
}33 
foreach55 
(55 
var55 
_menus55 
in55  "
rolesPermissions55# 3
.553 4$
permissionsAccessModules554 L
)55L M
{66 
var88 
permissions88 
=88  !
new88" %
AccessPermissions88& 7
(99 
permissionsId:: !
:::! "
$num::# $
,::$ %
roleId;; 
:;; 
rolesPermissions;; ,
.;;, -
RoleId;;- 3
,;;3 4

moduleName<< 
:<< 
_menus<<  &
.<<& '
menuName<<' /
,<</ 0
noAccess== 
:== 
_menus== $
.==$ %
permissionsActions==% 7
.==7 8
NoAccess==8 @
,==@ A
create>> 
:>> 
_menus>> "
.>>" #
permissionsActions>># 5
.>>5 6
Create>>6 <
,>>< =
read?? 
:?? 
_menus??  
.??  !
permissionsActions??! 3
.??3 4
Read??4 8
,??8 9
update@@ 
:@@ 
_menus@@ "
.@@" #
permissionsActions@@# 5
.@@5 6
Update@@6 <
,@@< =
deleteAA 
:AA 
_menusAA "
.AA" #
permissionsActionsAA# 5
.AA5 6
DeleteAA6 <
,AA< =
approveBB 
:BB 
_menusBB #
.BB# $
permissionsActionsBB$ 6
.BB6 7
ApproveBB7 >
)CC 
;CC 
_unitOfWorkEE 
.EE 
AcccessPermissionsEE .
.EE. /
InsertEE/ 5
(EE5 6
permissionsEE6 A
)EEA B
;EEB C
awaitFF 
_unitOfWorkFF !
.FF! "
CompleteFF" *
(FF* +
)FF+ ,
;FF, -
intII 
permissionsIdII !
=II" #
permissionsII$ /
.II/ 0
PermissionsIdII0 =
;II= >
foreachKK 
(KK 
varKK 
_subMenuKK %
inKK& (
_menusKK) /
.KK/ 0
sectionsKK0 8
)KK8 9
{LL 
varNN 
subpermissionsNN &
=NN' (
newNN) ,
SubPermissionsNN- ;
(OO 
permissionsIdPP %
:PP% &
permissionsIdPP' 4
,PP4 5
subPermissionsIdQQ (
:QQ( )
$numQQ* +
,QQ+ ,
roleIdRR 
:RR 
rolesPermissionsRR  0
.RR0 1
RoleIdRR1 7
,RR7 8
sectionNameSS #
:SS# $
_subMenuSS% -
.SS- .
sectionNameSS. 9
,SS9 :
noAccessTT  
:TT  !
_subMenuTT" *
.TT* +
permissionsActionsTT+ =
.TT= >
NoAccessTT> F
,TTF G
createUU 
:UU 
_subMenuUU  (
.UU( )
permissionsActionsUU) ;
.UU; <
CreateUU< B
,UUB C
readVV 
:VV 
_subMenuVV &
.VV& '
permissionsActionsVV' 9
.VV9 :
ReadVV: >
,VV> ?
updateWW 
:WW 
_subMenuWW  (
.WW( )
permissionsActionsWW) ;
.WW; <
UpdateWW< B
,WWB C
deleteXX 
:XX 
_subMenuXX  (
.XX( )
permissionsActionsXX) ;
.XX; <
DeleteXX< B
,XXB C
approveYY 
:YY  
_subMenuYY! )
.YY) *
permissionsActionsYY* <
.YY< =
ApproveYY= D
)ZZ 
;ZZ 
_unitOfWork\\ 
.\\  
SubPermissions\\  .
.\\. /
Insert\\/ 5
(\\5 6
subpermissions\\6 D
)\\D E
;\\E F
await]] 
_unitOfWork]] %
.]]% &
Complete]]& .
(]]. /
)]]/ 0
;]]0 1
int__ 
subPermissionsId__ (
=__) *
subpermissions__+ 9
.__9 :
SubPermissionsId__: J
;__J K
foreachaa 
(aa 
varaa  
_itemaa! &
inaa' )
_subMenuaa* 2
.aa2 3
itemsaa3 8
)aa8 9
{bb 
vardd 
subpermissionsitemsdd /
=dd0 1
newdd2 5
SubPermissionsItemsdd6 I
(ee 
permissionsIdff )
:ff) *
permissionsIdff+ 8
,ff8 9
subPermissionsIdgg ,
:gg, -
subPermissionsIdgg. >
,gg> ?!
subPermissionsItemsIdhh 1
:hh2 3
$numhh4 5
,hh5 6
roleIdii "
:ii" #
rolesPermissionsii$ 4
.ii4 5
RoleIdii5 ;
,ii; <
itemNamejj $
:jj$ %
_itemjj& +
.jj+ ,
ItemNamejj, 4
,jj4 5
noAccesskk $
:kk$ %
_itemkk& +
.kk+ ,
permissionsActionskk, >
.kk> ?
NoAccesskk? G
,kkG H
createll "
:ll" #
_itemll$ )
.ll) *
permissionsActionsll* <
.ll< =
Createll= C
,llC D
readmm  
:mm  !
_itemmm" '
.mm' (
permissionsActionsmm( :
.mm: ;
Readmm; ?
,mm? @
updatenn "
:nn" #
_itemnn$ )
.nn) *
permissionsActionsnn* <
.nn< =
Updatenn= C
,nnC D
deleteoo "
:oo" #
_itemoo$ )
.oo) *
permissionsActionsoo* <
.oo< =
Deleteoo= C
,ooC D
approvepp #
:pp# $
_itempp% *
.pp* +
permissionsActionspp+ =
.pp= >
Approvepp> E
)qq 
;qq 
_unitOfWorkss #
.ss# $
SubPermissionsItemsss$ 7
.ss7 8
Insertss8 >
(ss> ?
subpermissionsitemsss? R
)ssR S
;ssS T
}tt 
awaitvv 
_unitOfWorkvv %
.vv% &
Completevv& .
(vv. /
)vv/ 0
;vv0 1
}ww 
}xx 
returnzz 
newzz 
GenericResponseDtozz )
(zz) *
$strzz* M
)zzM N
;zzN O
}{{ 	
public~~ 
async~~ 
Task~~ 
<~~ 
IdentityResult~~ (
>~~( )
AssignUserRole~~* 8
(~~8 9
AssignUserRoleDto~~9 J
assignUserRole~~K Y
)~~Y Z
{ 	
var
ÅÅ 

resultUser
ÅÅ 
=
ÅÅ 
_userManager
ÅÅ )
.
ÅÅ) *
FindByEmailAsync
ÅÅ* :
(
ÅÅ: ;
assignUserRole
ÅÅ; I
.
ÅÅI J
EmailAddress
ÅÅJ V
)
ÅÅV W
.
ÅÅW X
Result
ÅÅX ^
;
ÅÅ^ _
if
ÉÉ 
(
ÉÉ 

resultUser
ÉÉ 
==
ÉÉ 
null
ÉÉ "
)
ÉÉ" #
return
ÑÑ 
null
ÑÑ 
!
ÑÑ 
;
ÑÑ 
IdentityResult
ÜÜ 

resultRole
ÜÜ %
=
ÜÜ& '
await
ÜÜ( -
_userManager
ÜÜ. :
.
ÜÜ: ;
AddToRoleAsync
ÜÜ; I
(
ÜÜI J

resultUser
ÜÜJ T
!
ÜÜT U
,
ÜÜU V
assignUserRole
ÜÜW e
.
ÜÜe f
RoleName
ÜÜf n
)
ÜÜn o
;
ÜÜo p
return
àà 

resultRole
àà 
;
àà 
}
ää 	
public
åå 
async
åå 
Task
åå 
<
åå 
MenusDto
åå "
>
åå" #

CreateMenu
åå$ .
(
åå. /
MenusDto
åå/ 7
menus
åå8 =
)
åå= >
{
çç 	
var
éé 
validationResult
éé  
=
éé! " 
_validationService
éé# 5
.
éé5 6
Validate
éé6 >
(
éé> ?
menus
éé? D
)
ééD E
;
ééE F
if
êê 
(
êê 
validationResult
êê  
.
êê  !
IsValid
êê! (
)
êê( )
{
ëë 
Menus
íí 
menu
íí 
=
íí 
new
íí  
(
íí  !
menus
íí! &
.
íí& '
menuId
íí' -
,
íí- .
menus
íí/ 4
.
íí4 5
menuName
íí5 =
,
íí= >
menus
íí? D
.
ííD E
description
ííE P
,
ííP Q
menus
ííR W
.
ííW X
IsOpen
ííX ^
)
íí^ _
;
íí_ `
_unitOfWork
ìì 
.
ìì 
Menus
ìì !
.
ìì! "
Insert
ìì" (
(
ìì( )
menu
ìì) -
)
ìì- .
;
ìì. /
await
îî 
_unitOfWork
îî !
.
îî! "
Complete
îî" *
(
îî* +
)
îî+ ,
;
îî, -
return
ññ 
new
ññ 
MenusDto
ññ #
(
ññ# $
menu
ññ$ (
.
ññ( )
MenuId
ññ) /
,
ññ/ 0
menus
ññ1 6
.
ññ6 7
menuName
ññ7 ?
,
ññ? @
menu
ññA E
.
ññE F
Description
ññF Q
,
ññQ R
menu
ññS W
.
ññW X
IsOpen
ññX ^
)
ññ^ _
;
ññ_ `
}
óó 
return
ôô 
new
ôô 
MenusDto
ôô 
(
ôô  
StatusCodes
ôô  +
.
ôô+ ,!
Status400BadRequest
ôô, ?
,
ôô? @
$str
ôôA M
,
ôôM N
$str
ôôO _
,
ôô_ `
false
ôôa f
)
ôôf g
;
ôôg h
}
öö 	
public
úú 
async
úú 
Task
úú 
<
úú 
SubMenusDto
úú %
>
úú% &
CreateSubMenu
úú' 4
(
úú4 5
SubMenusCreateDto
úú5 F
subMenus
úúG O
)
úúO P
{
ùù 	
var
ûû 
validationResult
ûû  
=
ûû! " 
_validationService
ûû# 5
.
ûû5 6
Validate
ûû6 >
(
ûû> ?
subMenus
ûû? G
)
ûûG H
;
ûûH I
if
†† 
(
†† 
validationResult
††  
.
††  !
IsValid
††! (
)
††( )
{
°° 
SubMenus
¢¢ 
_subMenu
¢¢ !
=
¢¢" #
new
¢¢$ '
(
¢¢' (
subMenus
¢¢( 0
.
¢¢0 1
menuId
¢¢1 7
,
¢¢7 8
subMenus
¢¢9 A
.
¢¢A B
	subMenuId
¢¢B K
,
¢¢K L
subMenus
¢¢M U
.
¢¢U V
subMenuName
¢¢V a
,
¢¢a b
subMenus
¢¢c k
.
¢¢k l
description
¢¢l w
,
¢¢w x
subMenus¢¢y Å
.¢¢Å Ç
IsOpen¢¢Ç à
)¢¢à â
;¢¢â ä
_unitOfWork
££ 
.
££ 
SubMenus
££ $
.
££$ %
Insert
££% +
(
££+ ,
_subMenu
££, 4
)
££4 5
;
££5 6
await
§§ 
_unitOfWork
§§ !
.
§§! "
Complete
§§" *
(
§§* +
)
§§+ ,
;
§§, -
return
¶¶ 
new
¶¶ 
SubMenusDto
¶¶ &
(
¶¶& '
_subMenu
¶¶' /
.
¶¶/ 0
MenuId
¶¶0 6
,
¶¶6 7
_subMenu
¶¶8 @
.
¶¶@ A
	SubMenuId
¶¶A J
,
¶¶J K
_subMenu
¶¶L T
.
¶¶T U
SubMenuName
¶¶U `
,
¶¶` a
_subMenu
¶¶b j
.
¶¶j k
Description
¶¶k v
,
¶¶v w
_subMenu¶¶x Ä
.¶¶Ä Å
IsOpen¶¶Å á
)¶¶á à
;¶¶à â
}
ßß 
return
©© 
new
©© 
SubMenusDto
©© "
(
©©" #
StatusCodes
©©# .
.
©©. /!
Status400BadRequest
©©/ B
,
©©B C
StatusCodes
©©D O
.
©©O P!
Status400BadRequest
©©P c
,
©©c d
$str
©©e q
,
©©q r
$str©©s É
,©©É Ñ
false©©Ñ â
)©©â ä
;©©ä ã
}
™™ 	
public
¨¨ 
void
¨¨ 

DeleteMenu
¨¨ 
(
¨¨ 
MenusDeleteDto
¨¨ -
menuid
¨¨. 4
)
¨¨4 5
{
≠≠ 	
throw
ÆÆ 
new
ÆÆ %
NotImplementedException
ÆÆ -
(
ÆÆ- .
)
ÆÆ. /
;
ÆÆ/ 0
}
ØØ 	
public
±± 
void
±± 
DeleteSubMenu
±± !
(
±±! "
SubMenuDeleteDto
±±" 2
	subMenuId
±±3 <
)
±±< =
{
≤≤ 	
throw
≥≥ 
new
≥≥ %
NotImplementedException
≥≥ -
(
≥≥- .
)
≥≥. /
;
≥≥/ 0
}
¥¥ 	
public
∂∂ 
IEnumerable
∂∂ 
<
∂∂ 
MenuActionsDto
∂∂ )
>
∂∂) *

GetActions
∂∂+ 5
(
∂∂5 6
)
∂∂6 7
{
∑∑ 	
var
∏∏ 
response
∏∏ 
=
∏∏ .
 ClaimsMenuActionsEnumDescription
∏∏ ;
.
∏∏; <"
ToMenuActionsDtoList
∏∏< P
(
∏∏P Q
)
∏∏Q R
;
∏∏R S
return
ππ 
_mapper
ππ 
.
ππ 
Map
ππ 
<
ππ 
IEnumerable
ππ *
<
ππ* +
MenuActionsDto
ππ+ 9
>
ππ9 :
>
ππ: ;
(
ππ; <
response
ππ< D
)
ππD E
;
ππE F
}
∫∫ 	
public
ºº 
async
ºº 
Task
ºº 
<
ºº 
AccessModulesDto
ºº *
>
ºº* +
GetAccessMenus
ºº, :
(
ºº: ;
)
ºº; <
{
ΩΩ 	
var
øø 
permissions
øø 
=
øø 
new
øø !#
PermissionsActionsDto
øø" 7
(
øø7 8
NoAccess
øø8 @
:
øø@ A
false
øøA F
,
øøF G
Create
øøH N
:
øøN O
false
øøO T
,
øøT U
Read
øøV Z
:
øøZ [
false
øø[ `
,
øø` a
Update
øøb h
:
øøh i
false
øøi n
,
øøn o
Delete
øøp v
:
øøv w
false
øøw |
,
øø| }
Approveøø~ Ö
:øøÖ Ü
falseøøÜ ã
)øøã å
;øøå ç
var
¡¡ 
menus
¡¡ 
=
¡¡ 
await
¡¡ 
_unitOfWork
¡¡ )
.
¡¡) *
Menus
¡¡* /
.
¡¡/ 0
GetAll
¡¡0 6
(
¡¡6 7
)
¡¡7 8
;
¡¡8 9
var
¬¬ 
accessModules
¬¬ 
=
¬¬ 
new
¬¬  #
List
¬¬$ (
<
¬¬( )'
AccessMenusWithActionsDto
¬¬) B
>
¬¬B C
(
¬¬C D
)
¬¬D E
;
¬¬E F
foreach
ƒƒ 
(
ƒƒ 
var
ƒƒ 
	_menuItem
ƒƒ "
in
ƒƒ# %
menus
ƒƒ& +
)
ƒƒ+ ,
{
≈≈ 
var
∆∆ 
subMenus
∆∆ 
=
∆∆ 
await
∆∆ $
_unitOfWork
∆∆% 0
.
∆∆0 1
SubMenus
∆∆1 9
.
∆∆9 :
GetAll
∆∆: @
(
∆∆@ A
sm
∆∆A C
=>
∆∆D F
sm
∆∆G I
.
∆∆I J
MenuId
∆∆J P
==
∆∆Q S
	_menuItem
∆∆T ]
.
∆∆] ^
MenuId
∆∆^ d
)
∆∆d e
;
∆∆e f
var
«« 
sections
«« 
=
«« 
new
«« "
List
««# '
<
««' (*
AccessSubMenusWithActionsDto
««( D
>
««D E
(
««E F
)
««F G
;
««G H
foreach
…… 
(
…… 
var
…… 
_subMenu
…… %
in
……& (
subMenus
……) 1
)
……1 2
{
   
var
ÀÀ 
subMenuItems
ÀÀ $
=
ÀÀ% &
await
ÀÀ' ,
_unitOfWork
ÀÀ- 8
.
ÀÀ8 9
SubMenuItems
ÀÀ9 E
.
ÀÀE F
GetAll
ÀÀF L
(
ÀÀL M
smi
ÀÀM P
=>
ÀÀQ S
smi
ÀÀT W
.
ÀÀW X
	SubMenuId
ÀÀX a
==
ÀÀb d
_subMenu
ÀÀe m
.
ÀÀm n
	SubMenuId
ÀÀn w
)
ÀÀw x
;
ÀÀx y
var
ÃÃ 
items
ÃÃ 
=
ÃÃ 
new
ÃÃ  #
List
ÃÃ$ (
<
ÃÃ( ).
 AccessSubMenuItemsWithActionsDto
ÃÃ) I
>
ÃÃI J
(
ÃÃJ K
)
ÃÃK L
;
ÃÃL M
foreach
ŒŒ 
(
ŒŒ 
var
ŒŒ  
item
ŒŒ! %
in
ŒŒ& (
subMenuItems
ŒŒ) 5
)
ŒŒ5 6
{
œœ 
items
–– 
.
–– 
Add
–– !
(
––! "
new
––" %.
 AccessSubMenuItemsWithActionsDto
––& F
(
––F G
item
––G K
.
––K L
SubMenuItemName
––L [
,
––[ \
permissions
––] h
)
––h i
)
––i j
;
––j k
}
—— 
sections
”” 
.
”” 
Add
””  
(
””  !
new
””! $*
AccessSubMenusWithActionsDto
””% A
(
””A B
_subMenu
””B J
.
””J K
SubMenuName
””K V
,
””V W
_subMenu
””X `
.
””` a
IsOpen
””a g
,
””g h
permissions
””i t
,
””t u
items
””v {
)
””{ |
)
””| }
;
””} ~
}
‘‘ 
accessModules
÷÷ 
.
÷÷ 
Add
÷÷ !
(
÷÷! "
new
÷÷" %'
AccessMenusWithActionsDto
÷÷& ?
(
÷÷? @
	_menuItem
÷÷@ I
.
÷÷I J
MenuName
÷÷J R
,
÷÷R S
	_menuItem
÷÷T ]
.
÷÷] ^
IsOpen
÷÷^ d
,
÷÷d e
permissions
÷÷f q
,
÷÷q r
sections
÷÷s {
)
÷÷{ |
)
÷÷| }
;
÷÷} ~
}
◊◊ 
return
ŸŸ 
new
ŸŸ 
AccessModulesDto
ŸŸ '
(
ŸŸ' (
accessModules
ŸŸ( 5
)
ŸŸ5 6
;
ŸŸ6 7
}
⁄⁄ 	
public
‹‹ 
async
‹‹ 
Task
‹‹ 
<
‹‹ )
PermissionsAccessModulesDto
‹‹ 5
>
‹‹5 6$
PermissionsAccessMenus
‹‹7 M
(
‹‹M N)
PermissionsAccessModulesDto
‹‹N i
values
‹‹j p
)
‹‹p q
{
›› 	
var
ﬂﬂ 
permissions
ﬂﬂ 
=
ﬂﬂ 
new
ﬂﬂ !#
PermissionsActionsDto
ﬂﬂ" 7
(
ﬂﬂ7 8
NoAccess
ﬂﬂ8 @
:
ﬂﬂ@ A
false
ﬂﬂB G
,
ﬂﬂG H
Create
ﬂﬂI O
:
ﬂﬂO P
false
ﬂﬂQ V
,
ﬂﬂV W
Read
ﬂﬂX \
:
ﬂﬂ\ ]
false
ﬂﬂ^ c
,
ﬂﬂc d
Update
ﬂﬂe k
:
ﬂﬂk l
false
ﬂﬂm r
,
ﬂﬂr s
Delete
ﬂﬂt z
:
ﬂﬂz {
falseﬂﬂ| Å
,ﬂﬂÅ Ç
ApproveﬂﬂÉ ä
:ﬂﬂä ã
falseﬂﬂå ë
)ﬂﬂë í
;ﬂﬂí ì
var
·· 
menus
·· 
=
·· 
await
·· 
_unitOfWork
·· )
.
··) *
Menus
··* /
.
··/ 0
GetAll
··0 6
(
··6 7
)
··7 8
;
··8 9
var
‚‚ 
accessModules
‚‚ 
=
‚‚ 
new
‚‚  #
List
‚‚$ (
<
‚‚( )1
#PermissionAccessMenusWithActionsDto
‚‚) L
>
‚‚L M
(
‚‚M N
)
‚‚N O
;
‚‚O P
foreach
‰‰ 
(
‰‰ 
var
‰‰ 
	_menuItem
‰‰ "
in
‰‰# %
menus
‰‰& +
)
‰‰+ ,
{
ÂÂ 
var
ÊÊ 
subMenus
ÊÊ 
=
ÊÊ 
await
ÊÊ $
_unitOfWork
ÊÊ% 0
.
ÊÊ0 1
SubMenus
ÊÊ1 9
.
ÊÊ9 :
GetAll
ÊÊ: @
(
ÊÊ@ A
sm
ÊÊA C
=>
ÊÊD F
sm
ÊÊG I
.
ÊÊI J
MenuId
ÊÊJ P
==
ÊÊQ S
	_menuItem
ÊÊT ]
.
ÊÊ] ^
MenuId
ÊÊ^ d
)
ÊÊd e
;
ÊÊe f
var
ÁÁ 
sections
ÁÁ 
=
ÁÁ 
new
ÁÁ "
List
ÁÁ# '
<
ÁÁ' (4
&PermissionAccessSubMenusWithActionsDto
ÁÁ( N
>
ÁÁN O
(
ÁÁO P
)
ÁÁP Q
;
ÁÁQ R
foreach
ÈÈ 
(
ÈÈ 
var
ÈÈ 
_subMenu
ÈÈ %
in
ÈÈ& (
subMenus
ÈÈ) 1
)
ÈÈ1 2
{
ÍÍ 
var
ÎÎ 
subMenuItems
ÎÎ $
=
ÎÎ% &
await
ÎÎ' ,
_unitOfWork
ÎÎ- 8
.
ÎÎ8 9
SubMenuItems
ÎÎ9 E
.
ÎÎE F
GetAll
ÎÎF L
(
ÎÎL M
smi
ÎÎM P
=>
ÎÎQ S
smi
ÎÎT W
.
ÎÎW X
	SubMenuId
ÎÎX a
==
ÎÎb d
_subMenu
ÎÎe m
.
ÎÎm n
	SubMenuId
ÎÎn w
)
ÎÎw x
;
ÎÎx y
var
ÏÏ 
items
ÏÏ 
=
ÏÏ 
new
ÏÏ  #
List
ÏÏ$ (
<
ÏÏ( )8
*PermissionAccessSubMenuItemsWithActionsDto
ÏÏ) S
>
ÏÏS T
(
ÏÏT U
)
ÏÏU V
;
ÏÏV W
foreach
ÓÓ 
(
ÓÓ 
var
ÓÓ  
item
ÓÓ! %
in
ÓÓ& (
subMenuItems
ÓÓ) 5
)
ÓÓ5 6
{
ÔÔ 
items
 
.
 
Add
 !
(
! "
new
" %8
*PermissionAccessSubMenuItemsWithActionsDto
& P
(
P Q
item
Q U
.
U V
SubMenuItemName
V e
,
e f
permissions
g r
)
r s
)
s t
;
t u
}
ÒÒ 
sections
ÛÛ 
.
ÛÛ 
Add
ÛÛ  
(
ÛÛ  !
new
ÛÛ! $4
&PermissionAccessSubMenusWithActionsDto
ÛÛ% K
(
ÛÛK L
_subMenu
ÛÛL T
.
ÛÛT U
SubMenuName
ÛÛU `
,
ÛÛ` a
permissions
ÛÛc n
,
ÛÛn o
items
ÛÛp u
)
ÛÛu v
)
ÛÛv w
;
ÛÛw x
}
ÙÙ 
accessModules
ˆˆ 
.
ˆˆ 
Add
ˆˆ !
(
ˆˆ! "
new
ˆˆ" %1
#PermissionAccessMenusWithActionsDto
ˆˆ& I
(
ˆˆI J
	_menuItem
ˆˆJ S
.
ˆˆS T
MenuName
ˆˆT \
,
ˆˆ\ ]
permissions
ˆˆ^ i
,
ˆˆi j
sections
ˆˆk s
)
ˆˆs t
)
ˆˆt u
;
ˆˆu v
}
˜˜ 
return
˘˘ 
new
˘˘ )
PermissionsAccessModulesDto
˘˘ 2
(
˘˘2 3
values
˘˘3 9
.
˘˘9 :
RoleId
˘˘: @
,
˘˘@ A
accessModules
˘˘B O
)
˘˘O P
;
˘˘P Q
}
˙˙ 	
public
¸¸ 
async
¸¸ 
Task
¸¸ 
<
¸¸ 
IEnumerable
¸¸ %
<
¸¸% &
MenusDto
¸¸& .
>
¸¸. /
>
¸¸/ 0
GetMenus
¸¸1 9
(
¸¸9 :
)
¸¸: ;
{
˝˝ 	
var
˛˛ 
response
˛˛ 
=
˛˛ 
await
˛˛  
_unitOfWork
˛˛! ,
.
˛˛, -
Menus
˛˛- 2
.
˛˛2 3
GetAll
˛˛3 9
(
˛˛9 :
)
˛˛: ;
;
˛˛; <
return
ˇˇ 
_mapper
ˇˇ 
.
ˇˇ 
Map
ˇˇ 
<
ˇˇ 
IEnumerable
ˇˇ *
<
ˇˇ* +
MenusDto
ˇˇ+ 3
>
ˇˇ3 4
>
ˇˇ4 5
(
ˇˇ5 6
response
ˇˇ6 >
)
ˇˇ> ?
;
ˇˇ? @
}
ÄÄ 	
public
ÉÉ 
async
ÉÉ 
Task
ÉÉ 
<
ÉÉ -
PermissionsAccessModulesReadDto
ÉÉ 9
>
ÉÉ9 :!
GetRolesPermissions
ÉÉ; N
(
ÉÉN O
string
ÉÉO U
roleId
ÉÉV \
)
ÉÉ\ ]
{
ÑÑ 	
var
ÖÖ 
_permissions
ÖÖ 
=
ÖÖ 
await
ÖÖ $
_unitOfWork
ÖÖ% 0
.
ÖÖ0 1 
AcccessPermissions
ÖÖ1 C
.
ÖÖC D
GetAll
ÖÖD J
(
ÖÖJ K
p
ÖÖK L
=>
ÖÖM O
p
ÖÖP Q
.
ÖÖQ R
RoleId
ÖÖR X
==
ÖÖY [
roleId
ÖÖ\ b
)
ÖÖb c
;
ÖÖc d
var
ÜÜ 
accessModules
ÜÜ 
=
ÜÜ 
new
ÜÜ  #
List
ÜÜ$ (
<
ÜÜ( )5
'PermissionAccessMenusWithActionsReadDto
ÜÜ) P
>
ÜÜP Q
(
ÜÜQ R
)
ÜÜR S
;
ÜÜS T
foreach
àà 
(
àà 
var
àà 

permission
àà #
in
àà$ &
_permissions
àà' 3
)
àà3 4
{
ââ 
string
ää 
role
ää 
=
ää 

permission
ää (
.
ää( )
RoleId
ää) /
;
ää/ 0
var
åå 
_subPermissions
åå #
=
åå$ %
await
åå& +
_unitOfWork
åå, 7
.
åå7 8
SubPermissions
åå8 F
.
ååF G
GetAll
ååG M
(
ååM N
sp
ååN P
=>
ååQ S
sp
ååT V
.
ååV W
PermissionsId
ååW d
==
ååe g

permission
ååh r
.
åår s
PermissionsIdåås Ä
)ååÄ Å
;ååÅ Ç
var
çç 
sections
çç 
=
çç 
new
çç "
List
çç# '
<
çç' (8
*PermissionAccessSubMenusWithActionsReadDto
çç( R
>
ççR S
(
ççS T
)
ççT U
;
ççU V
foreach
èè 
(
èè 
var
èè 
_section
èè %
in
èè& (
_subPermissions
èè) 8
)
èè8 9
{
êê 
var
ëë !
_subPermissionItems
ëë +
=
ëë, -
await
ëë. 3
_unitOfWork
ëë4 ?
.
ëë? @!
SubPermissionsItems
ëë@ S
.
ëëS T
GetAll
ëëT Z
(
ëëZ [
spi
ëë[ ^
=>
ëë_ a
spi
ëëb e
.
ëëe f
SubPermissionsId
ëëf v
==
ëëw y
_sectionëëz Ç
.ëëÇ É 
SubPermissionsIdëëÉ ì
)ëëì î
;ëëî ï
var
íí 
items
íí 
=
íí 
new
íí  #
List
íí$ (
<
íí( )<
.PermissionAccessSubMenuItemsWithActionsReadDto
íí) W
>
ííW X
(
ííX Y
)
ííY Z
;
ííZ [
foreach
îî 
(
îî 
var
îî  
item
îî! %
in
îî& (!
_subPermissionItems
îî) <
)
îî< =
{
ïï 
items
ññ 
.
ññ 
Add
ññ "
(
ññ" #
new
ññ# &<
.PermissionAccessSubMenuItemsWithActionsReadDto
ññ' U
(
ññU V
item
ññV Z
.
ññZ [
PermissionsId
ññ[ h
,
ññh i
item
ññi m
.
ññm n
SubPermissionsId
ññn ~
,
ññ~ 
itemññÄ Ñ
.ññÑ Ö%
SubPermissionsItemsIdññÖ ö
,ññö õ
itemññú †
.ññ† °
ItemNameññ° ©
,ññ© ™
newññ´ Æ%
PermissionsActionsDtoññØ ƒ
(ññƒ ≈
itemññ≈ …
.ññ…  
NoAccessññ  “
,ññ“ ”
itemññ‘ ÿ
.ññÿ Ÿ
CreateññŸ ﬂ
,ññﬂ ‡
itemññ· Â
.ññÂ Ê
ReadññÊ Í
,ññÍ Î
itemññÏ 
.ññ Ò
UpdateññÒ ˜
,ññ˜ ¯
itemññ˘ ˝
.ññ˝ ˛
Deleteññ˛ Ñ
,ññÑ Ö
itemññÜ ä
.ññä ã
Approveññã í
)ññí ì
)ññì î
)ññî ï
;ññï ñ
}
óó 
sections
ôô 
.
ôô 
Add
ôô  
(
ôô  !
new
ôô! $8
*PermissionAccessSubMenusWithActionsReadDto
ôô% O
(
ôôO P
_section
ôôP X
.
ôôX Y
PermissionsId
ôôY f
,
ôôf g
_section
ôôh p
.
ôôp q
SubPermissionsIdôôq Å
,ôôÅ Ç
_sectionôôÉ ã
.ôôã å
SectionNameôôå ó
,ôôó ò
newôôò õ%
PermissionsActionsDtoôôú ±
(ôô± ≤
_sectionôô≤ ∫
.ôô∫ ª
NoAccessôôª √
,ôô√ ƒ
_sectionôô≈ Õ
.ôôÕ Œ
CreateôôŒ ‘
,ôô‘ ’
_sectionôô÷ ﬁ
.ôôﬁ ﬂ
Readôôﬂ „
,ôô„ ‰
_sectionôôÂ Ì
.ôôÌ Ó
UpdateôôÓ Ù
,ôôÙ ı
_sectionôôˆ ˛
.ôô˛ ˇ
Deleteôôˇ Ö
,ôôÖ Ü
_sectionôôá è
.ôôè ê
Approveôôê ó
)ôôó ò
,ôôò ô
itemsôôö ü
)ôôü †
)ôô† °
;ôô° ¢
}
öö 
accessModules
úú 
.
úú 
Add
úú !
(
úú! "
new
úú" %5
'PermissionAccessMenusWithActionsReadDto
úú& M
(
úúM N

permission
úúN X
.
úúX Y
PermissionsId
úúY f
,
úúf g

permission
úúh r
.
úúr s

ModuleName
úús }
,
úú} ~
newúú Ç%
PermissionsActionsDtoúúÉ ò
(úúò ô

permissionúúô £
.úú£ §
NoAccessúú§ ¨
,úú¨ ≠

permissionúúÆ ∏
.úú∏ π
Createúúπ ø
,úúø ¿

permissionúú¡ À
.úúÀ Ã
ReadúúÃ –
,úú– —

permissionúú“ ‹
.úú‹ ›
Updateúú› „
,úú„ ‰

permissionúúÂ Ô
.úúÔ 
Deleteúú ˆ
,úúˆ ˜

permissionúú¯ Ç
.úúÇ É
ApproveúúÉ ä
)úúä ã
,úúã å
sectionsúúç ï
)úúï ñ
)úúñ ó
;úúó ò
}
ùù 
return
üü 
new
üü -
PermissionsAccessModulesReadDto
üü 6
(
üü6 7
roleId
üü7 =
,
üü= >
accessModules
üü? L
)
üüL M
;
üüM N
}
†† 	
public
££ 
async
££ 
Task
££ 
<
££ 
IEnumerable
££ %
<
££% &
SubMenusDto
££& 1
>
££1 2
>
££2 3
GetSubMenus
££4 ?
(
££? @
)
££@ A
{
§§ 	
var
•• 
response
•• 
=
•• 
await
••  
_unitOfWork
••! ,
.
••, -
SubMenus
••- 5
.
••5 6
GetAll
••6 <
(
••< =
)
••= >
;
••> ?
return
¶¶ 
_mapper
¶¶ 
.
¶¶ 
Map
¶¶ 
<
¶¶ 
IEnumerable
¶¶ *
<
¶¶* +
SubMenusDto
¶¶+ 6
>
¶¶6 7
>
¶¶7 8
(
¶¶8 9
response
¶¶9 A
)
¶¶A B
;
¶¶B C
}
ßß 	
public
©© 
async
©© 
Task
©© 
<
©© -
PermissionsAccessModulesReadDto
©© 9
>
©©9 :$
GetUserRolePermissions
©©; Q
(
©©Q R
string
©©R X
userId
©©Y _
)
©©_ `
{
™™ 	
var
¨¨ 
user
¨¨ 
=
¨¨ 
await
¨¨ 
_userManager
¨¨ )
.
¨¨) *
FindByIdAsync
¨¨* 7
(
¨¨7 8
userId
¨¨8 >
)
¨¨> ?
;
¨¨? @
if
≠≠ 
(
≠≠ 
user
≠≠ 
is
≠≠ 
null
≠≠ 
)
≠≠ 
{
ÆÆ 
return
∞∞ 
null
∞∞ 
!
∞∞ 
;
∞∞ 
}
±± 
var
≥≥ 
	userRoles
≥≥ 
=
≥≥ 
await
≥≥ !
_userManager
≥≥" .
.
≥≥. /
GetRolesAsync
≥≥/ <
(
≥≥< =
user
≥≥= A
)
≥≥A B
;
≥≥B C
if
µµ 
(
µµ 
	userRoles
µµ 
.
µµ 
Count
µµ 
==
µµ  "
$num
µµ# $
)
µµ$ %
{
∂∂ 
return
∑∑ 
null
∑∑ 
!
∑∑ 
;
∑∑ 
}
∏∏ 
string
ªª 
roleName
ªª 
=
ªª 
	userRoles
ªª '
.
ªª' (
First
ªª( -
(
ªª- .
)
ªª. /
;
ªª/ 0
var
ææ 
role
ææ 
=
ææ 
await
ææ 
_roleManager
ææ )
.
ææ) *
FindByNameAsync
ææ* 9
(
ææ9 :
roleName
ææ: B
)
ææB C
;
ææC D
if
¿¿ 
(
¿¿ 
role
¿¿ 
is
¿¿ 
null
¿¿ 
)
¿¿ 
{
¡¡ 
return
¬¬ 
null
¬¬ 
!
¬¬ 
;
¬¬ 
}
√√ 
string
≈≈ 
roleId
≈≈ 
=
≈≈ 
role
≈≈  
.
≈≈  !
Id
≈≈! #
;
≈≈# $
return
«« 
await
«« !
GetRolesPermissions
«« ,
(
««, -
roleId
««- 3
)
««3 4
;
««4 5
}
…… 	
public
ÀÀ 
Task
ÀÀ 
<
ÀÀ 
MenusDto
ÀÀ 
>
ÀÀ 

UpdateMenu
ÀÀ (
(
ÀÀ( )
MenusDto
ÀÀ) 1
updateMenus
ÀÀ2 =
)
ÀÀ= >
{
ÃÃ 	
throw
ÕÕ 
new
ÕÕ %
NotImplementedException
ÕÕ -
(
ÕÕ- .
)
ÕÕ. /
;
ÕÕ/ 0
}
ŒŒ 	
public
–– 
Task
–– 
<
–– 
SubMenusDto
–– 
>
––  
UpdateSubMenu
––! .
(
––. /
SubMenusUpdateDto
––/ @
updateSubMenus
––A O
)
––O P
{
—— 	
throw
““ 
new
““ %
NotImplementedException
““ -
(
““- .
)
““. /
;
““/ 0
}
”” 	
public
’’ 
async
’’ 
Task
’’ 
<
’’ 
IEnumerable
’’ %
<
’’% &
SubMenuItemsDto
’’& 5
>
’’5 6
>
’’6 7
GetSubMenuItems
’’8 G
(
’’G H
)
’’H I
{
÷÷ 	
var
◊◊ 
response
◊◊ 
=
◊◊ 
await
◊◊  
_unitOfWork
◊◊! ,
.
◊◊, -
SubMenuItems
◊◊- 9
.
◊◊9 :
GetAll
◊◊: @
(
◊◊@ A
)
◊◊A B
;
◊◊B C
return
ÿÿ 
_mapper
ÿÿ 
.
ÿÿ 
Map
ÿÿ 
<
ÿÿ 
IEnumerable
ÿÿ *
<
ÿÿ* +
SubMenuItemsDto
ÿÿ+ :
>
ÿÿ: ;
>
ÿÿ; <
(
ÿÿ< =
response
ÿÿ= E
)
ÿÿE F
;
ÿÿF G
}
ŸŸ 	
public
€€ 
async
€€ 
Task
€€ 
<
€€ 
SubMenuItemsDto
€€ )
>
€€) * 
CreateSubMenuItems
€€+ =
(
€€= >#
SubMenuItemsCreateDto
€€> S
subMenuItems
€€T `
)
€€` a
{
‹‹ 	
var
›› 
validationResult
››  
=
››! " 
_validationService
››# 5
.
››5 6
Validate
››6 >
(
››> ?
subMenuItems
››? K
)
››K L
;
››L M
if
ﬂﬂ 
(
ﬂﬂ 
validationResult
ﬂﬂ  
.
ﬂﬂ  !
IsValid
ﬂﬂ! (
)
ﬂﬂ( )
{
‡‡ 
SubMenuItems
·· 
_subMenuItems
·· *
=
··+ ,
new
··- 0
(
··0 1
subMenuItems
··1 =
.
··= >
menuId
··> D
,
··D E
subMenuItems
··F R
.
··R S
	subMenuId
··S \
,
··\ ]
subMenuItems
··^ j
.
··j k
subMenuItemId
··k x
,
··y z
subMenuItems··z Ü
.··Ü á
subMenuItemName··á ñ
,··ñ ó
subMenuItems··ò §
.··§ •
description··• ∞
)··∞ ±
;··± ≤
_unitOfWork
‚‚ 
.
‚‚ 
SubMenuItems
‚‚ (
.
‚‚( )
Insert
‚‚) /
(
‚‚/ 0
_subMenuItems
‚‚0 =
)
‚‚= >
;
‚‚> ?
await
„„ 
_unitOfWork
„„ !
.
„„! "
Complete
„„" *
(
„„* +
)
„„+ ,
;
„„, -
return
ÂÂ 
new
ÂÂ 
SubMenuItemsDto
ÂÂ *
(
ÂÂ* +
_subMenuItems
ÂÂ+ 8
.
ÂÂ8 9
MenuId
ÂÂ9 ?
,
ÂÂ? @
_subMenuItems
ÂÂA N
.
ÂÂN O
	SubMenuId
ÂÂO X
,
ÂÂX Y
_subMenuItems
ÂÂZ g
.
ÂÂg h
SubMenuItemId
ÂÂh u
,
ÂÂv w
_subMenuItemsÂÂx Ö
.ÂÂÖ Ü
SubMenuItemNameÂÂÜ ï
,ÂÂï ñ
_subMenuItemsÂÂó §
.ÂÂ§ •
DescriptionÂÂ• ∞
)ÂÂ∞ ±
;ÂÂ± ≤
}
ÊÊ 
return
ËË 
new
ËË 
SubMenuItemsDto
ËË &
(
ËË& '
StatusCodes
ËË' 2
.
ËË2 3!
Status400BadRequest
ËË3 F
,
ËËF G
StatusCodes
ËËH S
.
ËËS T!
Status400BadRequest
ËËT g
,
ËËg h
StatusCodes
ËËi t
.
ËËt u"
Status400BadRequestËËu à
,ËËà â
$strËËä ñ
,ËËñ ó
$strËËò ®
)ËË® ©
;ËË© ™
}
ÈÈ 	
public
ÎÎ 
Task
ÎÎ 
<
ÎÎ 
SubMenuItemsDto
ÎÎ #
>
ÎÎ# $ 
UpdateSubMenuItems
ÎÎ% 7
(
ÎÎ7 8#
SubMenuItemsUpdateDto
ÎÎ8 M 
updateSubMenuItems
ÎÎN `
)
ÎÎ` a
{
ÏÏ 	
throw
ÌÌ 
new
ÌÌ %
NotImplementedException
ÌÌ -
(
ÌÌ- .
)
ÌÌ. /
;
ÌÌ/ 0
}
ÓÓ 	
public
 
void
  
DeleteSubMenuItems
 &
(
& '#
SubMenuItemsDeleteDto
' <
subMenuItemsId
= K
)
K L
{
ÒÒ 	
throw
ÚÚ 
new
ÚÚ %
NotImplementedException
ÚÚ -
(
ÚÚ- .
)
ÚÚ. /
;
ÚÚ/ 0
}
ÛÛ 	
public
ıı 
async
ıı 
Task
ıı 
<
ıı 
IEnumerable
ıı %
<
ıı% &"
UsersAndRolesReadDto
ıı& :
>
ıı: ;
>
ıı; <$
GetListOfUsersAndRoles
ıı= S
(
ııS T
)
ııT U
{
ˆˆ 	
IEnumerable
˜˜ 
<
˜˜ %
ApplicationIdentityUser
˜˜ /
>
˜˜/ 0
appUsers
˜˜1 9
=
˜˜: ;
await
˜˜< A
_unitOfWork
˜˜B M
.
˜˜M N
Users
˜˜N S
.
˜˜S T
GetAll
˜˜T Z
(
˜˜Z [
)
˜˜[ \
;
˜˜\ ]
IEnumerable
¯¯ 
<
¯¯ %
ApplicationIdentityRole
¯¯ /
>
¯¯/ 0
appRoles
¯¯1 9
=
¯¯: ;
await
¯¯< A
_unitOfWork
¯¯B M
.
¯¯M N
Roles
¯¯N S
.
¯¯S T
GetAll
¯¯T Z
(
¯¯Z [
)
¯¯[ \
;
¯¯\ ]
IEnumerable
˘˘ 
<
˘˘ )
ApplicationIdentityUserRole
˘˘ 3
>
˘˘3 4
appUserRoles
˘˘5 A
=
˘˘B C
await
˘˘D I
_unitOfWork
˘˘J U
.
˘˘U V

UsersRoles
˘˘V `
.
˘˘` a
GetAll
˘˘a g
(
˘˘g h
)
˘˘h i
;
˘˘i j
var
˚˚ 
	userRoles
˚˚ 
=
˚˚ 
from
˚˚  
au
˚˚! #
in
˚˚$ &
appUsers
˚˚' /
join
¸¸  
aur
¸¸! $
in
¸¸% '
appUserRoles
¸¸( 4
on
¸¸5 7
au
¸¸8 :
.
¸¸: ;
Id
¸¸; =
equals
¸¸> D
aur
¸¸E H
.
¸¸H I
UserId
¸¸I O
into
¸¸P T
table1
¸¸U [
from
˝˝  
aur
˝˝! $
in
˝˝% '
table1
˝˝( .
.
˝˝. /
ToList
˝˝/ 5
(
˝˝5 6
)
˝˝6 7
join
˛˛  
ar
˛˛! #
in
˛˛$ &
appRoles
˛˛' /
on
˛˛0 2
aur
˛˛3 6
.
˛˛6 7
RoleId
˛˛7 =
equals
˛˛> D
ar
˛˛E G
.
˛˛G H
Id
˛˛H J
into
˛˛K O
table2
˛˛P V
from
ˇˇ  
ar
ˇˇ! #
in
ˇˇ$ &
table2
ˇˇ' -
.
ˇˇ- .
ToList
ˇˇ. 4
(
ˇˇ4 5
)
ˇˇ5 6
select
ÇÇ "
new
ÇÇ# &"
UsersAndRolesReadDto
ÇÇ' ;
(
ÉÉ 
userId
ÑÑ  &
:
ÑÑ& '
au
ÑÑ( *
.
ÑÑ* +
Id
ÑÑ+ -
,
ÑÑ- .
userName
ÖÖ  (
:
ÖÖ( )
au
ÖÖ* ,
.
ÖÖ, -
Email
ÖÖ- 2
!
ÖÖ2 3
,
ÖÖ3 4
roleId
ÜÜ  &
:
ÜÜ& '
ar
ÜÜ( *
.
ÜÜ* +
Id
ÜÜ+ -
,
ÜÜ- .
roleName
áá  (
:
áá( )
ar
áá* ,
.
áá, -
Name
áá- 1
!
áá1 2
)
àà 
;
àà 
return
ää 
	userRoles
ää 
;
ää 
}
ãã 	
public
çç 
async
çç 
Task
çç 
<
çç  
GenericResponseDto
çç ,
>
çç, --
UpdatePermissionsAssignedToRole
çç. M
(
ççM N-
PermissionsAccessModulesReadDto
ççN m
rolesPermissions
ççn ~
)
çç~ 
{
éé 	
if
ëë 
(
ëë 
rolesPermissions
ëë  
is
ëë! #
null
ëë$ (
||
ëë) +
rolesPermissions
ëë, <
.
ëë< =&
permissionsAccessModules
ëë= U
==
ëëV X
null
ëëY ]
)
ëë] ^
{
íí 
return
ìì 
new
ìì  
GenericResponseDto
ìì -
(
ìì- .
$str
ìì. C
)
ììC D
;
ììD E
}
îî 
foreach
ññ 
(
ññ 
var
ññ 
_menus
ññ 
in
ññ  "
rolesPermissions
ññ# 3
.
ññ3 4&
permissionsAccessModules
ññ4 L
)
ññL M
{
óó 
var
ôô 
permissions
ôô 
=
ôô  !
new
ôô" %
AccessPermissions
ôô& 7
(
öö 
permissionsId
õõ !
:
õõ! "
_menus
õõ# )
.
õõ) *
PermissionsId
õõ* 7
,
õõ7 8
roleId
úú 
:
úú 
rolesPermissions
úú ,
.
úú, -
RoleId
úú- 3
,
úú3 4

moduleName
ùù 
:
ùù 
_menus
ùù  &
.
ùù& '
menuName
ùù' /
,
ùù/ 0
noAccess
ûû 
:
ûû 
_menus
ûû $
.
ûû$ % 
permissionsActions
ûû% 7
.
ûû7 8
NoAccess
ûû8 @
,
ûû@ A
create
üü 
:
üü 
_menus
üü "
.
üü" # 
permissionsActions
üü# 5
.
üü5 6
Create
üü6 <
,
üü< =
read
†† 
:
†† 
_menus
††  
.
††  ! 
permissionsActions
††! 3
.
††3 4
Read
††4 8
,
††8 9
update
°° 
:
°° 
_menus
°° "
.
°°" # 
permissionsActions
°°# 5
.
°°5 6
Update
°°6 <
,
°°< =
delete
¢¢ 
:
¢¢ 
_menus
¢¢ "
.
¢¢" # 
permissionsActions
¢¢# 5
.
¢¢5 6
Delete
¢¢6 <
,
¢¢< =
approve
££ 
:
££ 
_menus
££ #
.
££# $ 
permissionsActions
££$ 6
.
££6 7
Approve
££7 >
)
§§ 
;
§§ 
_unitOfWork
¶¶ 
.
¶¶  
AcccessPermissions
¶¶ .
.
¶¶. /
Update
¶¶/ 5
(
¶¶5 6
permissions
¶¶6 A
)
¶¶A B
;
¶¶B C
foreach
¨¨ 
(
¨¨ 
var
¨¨ 
_subMenu
¨¨ %
in
¨¨& (
_menus
¨¨) /
.
¨¨/ 0
sections
¨¨0 8
)
¨¨8 9
{
≠≠ 
var
ØØ 
subpermissions
ØØ &
=
ØØ' (
new
ØØ) ,
SubPermissions
ØØ- ;
(
∞∞ 
permissionsId
±± %
:
±±% &
_subMenu
±±' /
.
±±/ 0
PermissionsId
±±0 =
,
±±= >
subPermissionsId
≤≤ (
:
≤≤( )
_subMenu
≤≤* 2
.
≤≤2 3
SubPermissionsId
≤≤3 C
,
≤≤C D
roleId
≥≥ 
:
≥≥ 
rolesPermissions
≥≥  0
.
≥≥0 1
RoleId
≥≥1 7
,
≥≥7 8
sectionName
¥¥ #
:
¥¥# $
_subMenu
¥¥% -
.
¥¥- .
sectionName
¥¥. 9
,
¥¥9 :
noAccess
µµ  
:
µµ  !
_subMenu
µµ" *
.
µµ* + 
permissionsActions
µµ+ =
.
µµ= >
NoAccess
µµ> F
,
µµF G
create
∂∂ 
:
∂∂ 
_subMenu
∂∂  (
.
∂∂( ) 
permissionsActions
∂∂) ;
.
∂∂; <
Create
∂∂< B
,
∂∂B C
read
∑∑ 
:
∑∑ 
_subMenu
∑∑ &
.
∑∑& ' 
permissionsActions
∑∑' 9
.
∑∑9 :
Read
∑∑: >
,
∑∑> ?
update
∏∏ 
:
∏∏ 
_subMenu
∏∏  (
.
∏∏( ) 
permissionsActions
∏∏) ;
.
∏∏; <
Update
∏∏< B
,
∏∏B C
delete
ππ 
:
ππ 
_subMenu
ππ  (
.
ππ( ) 
permissionsActions
ππ) ;
.
ππ; <
Delete
ππ< B
,
ππB C
approve
∫∫ 
:
∫∫  
_subMenu
∫∫! )
.
∫∫) * 
permissionsActions
∫∫* <
.
∫∫< =
Approve
∫∫= D
)
ªª 
;
ªª 
_unitOfWork
ΩΩ 
.
ΩΩ  
SubPermissions
ΩΩ  .
.
ΩΩ. /
Update
ΩΩ/ 5
(
ΩΩ5 6
subpermissions
ΩΩ6 D
)
ΩΩD E
;
ΩΩE F
foreach
¬¬ 
(
¬¬ 
var
¬¬  
_item
¬¬! &
in
¬¬' )
_subMenu
¬¬* 2
.
¬¬2 3
items
¬¬3 8
)
¬¬8 9
{
√√ 
var
≈≈ !
subpermissionsitems
≈≈ /
=
≈≈0 1
new
≈≈2 5!
SubPermissionsItems
≈≈6 I
(
∆∆ 
permissionsId
«« )
:
««) *
_item
««+ 0
.
««0 1
PermissionsId
««1 >
,
««> ?
subPermissionsId
»» ,
:
»», -
_item
»». 3
.
»»3 4
SubPermissionsId
»»4 D
,
»»D E#
subPermissionsItemsId
…… 1
:
……1 2
_item
……3 8
.
……8 9#
SubPermissionsItemsId
……9 N
,
……N O
roleId
   "
:
  " #
rolesPermissions
  $ 4
.
  4 5
RoleId
  5 ;
,
  ; <
itemName
ÀÀ $
:
ÀÀ$ %
_item
ÀÀ& +
.
ÀÀ+ ,
ItemName
ÀÀ, 4
,
ÀÀ4 5
noAccess
ÃÃ $
:
ÃÃ$ %
_item
ÃÃ& +
.
ÃÃ+ , 
permissionsActions
ÃÃ, >
.
ÃÃ> ?
NoAccess
ÃÃ? G
,
ÃÃG H
create
ÕÕ "
:
ÕÕ" #
_item
ÕÕ$ )
.
ÕÕ) * 
permissionsActions
ÕÕ* <
.
ÕÕ< =
Create
ÕÕ= C
,
ÕÕC D
read
ŒŒ  
:
ŒŒ  !
_item
ŒŒ" '
.
ŒŒ' ( 
permissionsActions
ŒŒ( :
.
ŒŒ: ;
Read
ŒŒ; ?
,
ŒŒ? @
update
œœ "
:
œœ" #
_item
œœ$ )
.
œœ) * 
permissionsActions
œœ* <
.
œœ< =
Update
œœ= C
,
œœC D
delete
–– "
:
––" #
_item
––$ )
.
––) * 
permissionsActions
––* <
.
––< =
Delete
––= C
,
––C D
approve
—— #
:
——# $
_item
——% *
.
——* + 
permissionsActions
——+ =
.
——= >
Approve
——> E
)
““ 
;
““ 
_unitOfWork
‘‘ #
.
‘‘# $!
SubPermissionsItems
‘‘$ 7
.
‘‘7 8
Update
‘‘8 >
(
‘‘> ?!
subpermissionsitems
‘‘? R
)
‘‘R S
;
‘‘S T
}
’’ 
await
◊◊ 
_unitOfWork
◊◊ %
.
◊◊% &
Complete
◊◊& .
(
◊◊. /
)
◊◊/ 0
;
◊◊0 1
}
ÿÿ 
}
ŸŸ 
return
€€ 
new
€€  
GenericResponseDto
€€ )
(
€€) *
$str
€€* M
)
€€M N
;
€€N O
}
‹‹ 	
public
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ 
<
ﬁﬁ #
ApplicationModulesDto
ﬁﬁ /
>
ﬁﬁ/ 0

AddModules
ﬁﬁ1 ;
(
ﬁﬁ; <)
ApplicationModulesCreateDto
ﬁﬁ< W

appModules
ﬁﬁX b
)
ﬁﬁb c
{
ﬂﬂ 	
var
·· 
moduleId
·· 
=
·· 
Guid
·· 
.
··  
NewGuid
··  '
(
··' (
)
··( )
.
··) *
ToString
··* 2
(
··2 3
)
··3 4
.
··4 5
	Substring
··5 >
(
··> ?
$num
··? @
,
··@ A
$num
··A C
)
··C D
;
··D E 
ApplicationModules
‚‚  
applicationModules
‚‚ 1
=
‚‚2 3
new
‚‚4 7 
ApplicationModules
‚‚8 J
(
‚‚J K
moduleId
‚‚K S
,
‚‚S T

appModules
‚‚U _
.
‚‚_ `

ModuleName
‚‚` j
!
‚‚j k
)
‚‚k l
;
‚‚l m
_unitOfWork
„„ 
.
„„  
ApplicationModules
„„ *
.
„„* +
Insert
„„+ 1
(
„„1 2 
applicationModules
„„2 D
)
„„D E
;
„„E F
await
‰‰ 
_unitOfWork
‰‰ 
.
‰‰ 
Complete
‰‰ &
(
‰‰& '
)
‰‰' (
;
‰‰( )
return
ÊÊ 
new
ÊÊ #
ApplicationModulesDto
ÊÊ ,
{
ÁÁ 
ModuleId
ËË 
=
ËË  
applicationModules
ËË -
.
ËË- .
ModuleId
ËË. 6
,
ËË6 7

ModuleName
ÈÈ 
=
ÈÈ  
applicationModules
ÈÈ /
.
ÈÈ/ 0

ModuleName
ÈÈ0 :
}
ÍÍ 
;
ÍÍ 
}
ÏÏ 	
public
ÓÓ 
async
ÓÓ 
Task
ÓÓ 
<
ÓÓ #
ApplicationModulesDto
ÓÓ /
>
ÓÓ/ 0
UpdateModules
ÓÓ1 >
(
ÓÓ> ?#
ApplicationModulesDto
ÓÓ? T

appModules
ÓÓU _
)
ÓÓ_ `
{
ÔÔ 	 
ApplicationModules
ÒÒ  
applicationModules
ÒÒ 1
=
ÒÒ2 3
new
ÒÒ4 7 
ApplicationModules
ÒÒ8 J
(
ÒÒJ K

appModules
ÒÒK U
.
ÒÒU V
ModuleId
ÒÒV ^
!
ÒÒ^ _
,
ÒÒ_ `

appModules
ÒÒa k
.
ÒÒk l

ModuleName
ÒÒl v
!
ÒÒv w
)
ÒÒw x
;
ÒÒx y
_unitOfWork
ÚÚ 
.
ÚÚ  
ApplicationModules
ÚÚ *
.
ÚÚ* +
Update
ÚÚ+ 1
(
ÚÚ1 2 
applicationModules
ÚÚ2 D
)
ÚÚD E
;
ÚÚE F
await
ÛÛ 
_unitOfWork
ÛÛ 
.
ÛÛ 
Complete
ÛÛ &
(
ÛÛ& '
)
ÛÛ' (
;
ÛÛ( )
return
ıı 
new
ıı #
ApplicationModulesDto
ıı ,
{
ˆˆ 
ModuleId
˜˜ 
=
˜˜  
applicationModules
˜˜ -
.
˜˜- .
ModuleId
˜˜. 6
,
˜˜6 7

ModuleName
¯¯ 
=
¯¯  
applicationModules
¯¯ /
.
¯¯/ 0

ModuleName
¯¯0 :
}
˘˘ 
;
˘˘ 
}
˙˙ 	
public
¸¸ 
async
¸¸ 
Task
¸¸ 
<
¸¸  
GenericResponseDto
¸¸ ,
>
¸¸, -$
AssignModulePermission
¸¸. D
(
¸¸D E.
 ApplicationModulesPermissionsDto
¸¸E e
permissions
¸¸f q
)
¸¸q r
{
˝˝ 	
foreach
ÄÄ 
(
ÄÄ 
var
ÄÄ 
item
ÄÄ 
in
ÄÄ  
permissions
ÄÄ! ,
.
ÄÄ, -
ModulePermission
ÄÄ- =
!
ÄÄ= >
)
ÄÄ> ?
{
ÅÅ +
ApplicationModulesPermissions
ÇÇ - 
modulesPermissions
ÇÇ. @
=
ÇÇA B
new
ÇÇC F+
ApplicationModulesPermissions
ÇÇG d
(
ÇÇd e
permissions
ÇÇe p
.
ÇÇp q
RoleId
ÇÇq w
!
ÇÇw x
,
ÇÇx y
permissionsÇÇz Ö
.ÇÇÖ Ü
ModuleIdÇÇÜ é
!ÇÇé è
,ÇÇè ê
itemÇÇë ï
.ÇÇï ñ 
ModulePermissionÇÇñ ¶
!ÇÇ¶ ß
)ÇÇß ®
;ÇÇ® ©
_unitOfWork
ÉÉ 
.
ÉÉ +
ApplicationModulesPermissions
ÉÉ 9
.
ÉÉ9 :
Insert
ÉÉ: @
(
ÉÉ@ A 
modulesPermissions
ÉÉA S
)
ÉÉS T
;
ÉÉT U
}
ÑÑ 
await
ÜÜ 
_unitOfWork
ÜÜ 
.
ÜÜ 
Complete
ÜÜ &
(
ÜÜ& '
)
ÜÜ' (
;
ÜÜ( )
return
àà 
new
àà  
GenericResponseDto
àà )
(
àà) *
$str
àà* M
)
ààM N
;
ààN O
}
ââ 	
public
ãã 
async
ãã 
Task
ãã 
<
ãã 
IEnumerable
ãã %
<
ãã% &#
ApplicationModulesDto
ãã& ;
>
ãã; <
>
ãã< =

GetModules
ãã> H
(
ããH I
)
ããI J
{
åå 	
var
éé 
response
éé 
=
éé 
await
éé  
_unitOfWork
éé! ,
.
éé, - 
ApplicationModules
éé- ?
.
éé? @
GetAll
éé@ F
(
ééF G
)
ééG H
;
ééH I
return
èè 
_mapper
èè 
.
èè 
Map
èè 
<
èè 
IEnumerable
èè *
<
èè* +#
ApplicationModulesDto
èè+ @
>
èè@ A
>
èèA B
(
èèB C
response
èèC K
)
èèK L
;
èèL M
}
ëë 	
public
ìì 
async
ìì 
Task
ìì 
<
ìì 
IEnumerable
ìì %
<
ìì% &'
RoleModulesPermissionsDto
ìì& ?
>
ìì? @
>
ìì@ A#
GetModulesPermissions
ììB W
(
ììW X
string
ììX ^
roleId
ìì_ e
)
ììe f
{
îî 	
var
ïï 
modulePermissions
ïï !
=
ïï" #
(
ïï$ %
await
ïï% *
_unitOfWork
ïï+ 6
.
ïï6 7+
ApplicationModulesPermissions
ïï7 T
.
ïïT U
GetAll
ïïU [
(
ïï[ \
)
ïï\ ]
)
ïï] ^
.
ññ 
Where
ññ 
(
ññ 
a
ññ 
=>
ññ 
a
ññ 
.
ññ 
RoleId
ññ #
==
ññ$ &
roleId
ññ' -
)
ññ- .
.
óó 
	GroupJoin
óó 
(
óó 
await
óó 
_unitOfWork
óó  +
.
óó+ , 
ApplicationModules
óó, >
.
óó> ?
GetAll
óó? E
(
óóE F
)
óóF G
,
óóG H
a
òò 
=>
òò 
a
òò 
.
òò 
ModuleId
òò "
,
òò" #
b
ôô 
=>
ôô 
b
ôô 
.
ôô 
ModuleId
ôô "
,
ôô" #
(
öö 
a
öö 
,
öö 
moduleGroup
öö "
)
öö" #
=>
öö$ &
new
öö' *
{
öö+ ,
a
öö- .
,
öö. /
module
öö0 6
=
öö7 8
moduleGroup
öö9 D
.
ööD E
FirstOrDefault
ööE S
(
ööS T
)
ööT U
}
ööV W
)
ööW X
.
õõ 
	GroupJoin
õõ 
(
õõ 
await
õõ 
_unitOfWork
õõ  +
.
õõ+ ,
Roles
õõ, 1
.
õõ1 2
GetAll
õõ2 8
(
õõ8 9
)
õõ9 :
,
õõ: ;
ab
úú 
=>
úú 
ab
úú 
.
úú 
a
úú 
.
úú 
RoleId
úú $
,
úú$ %
c
ùù 
=>
ùù 
c
ùù 
.
ùù 
Id
ùù 
,
ùù 
(
ûû 
ab
ûû 
,
ûû 
	roleGroup
ûû !
)
ûû! "
=>
ûû# %
new
ûû& )'
RoleModulesPermissionsDto
ûû* C
{
üü  
ModulePermissionId
†† )
=
††* +
ab
††, .
.
††. /
a
††/ 0
.
††0 1 
ModulePermissionId
††1 C
,
††C D
RoleId
°° 
=
°° 
ab
°°  "
.
°°" #
a
°°# $
.
°°$ %
RoleId
°°% +
,
°°+ ,
RoleName
¢¢ 
=
¢¢  !
	roleGroup
¢¢" +
.
¢¢+ ,
FirstOrDefault
¢¢, :
(
¢¢: ;
)
¢¢; <
?
¢¢< =
.
¢¢= >
Name
¢¢> B
,
¢¢B C
ModuleId
££ 
=
££  !
ab
££" $
.
££$ %
a
££% &
.
££& '
ModuleId
££' /
,
££/ 0

ModuleName
§§ !
=
§§" #
ab
§§$ &
.
§§& '
module
§§' -
?
§§- .
.
§§. /

ModuleName
§§/ 9
,
§§9 :
ModulePermission
•• '
=
••( )
ab
••* ,
.
••, -
a
••- .
.
••. /
ModulePermission
••/ ?
}
¶¶ 
)
¶¶ 
.
ßß 
ToList
ßß 
(
ßß 
)
ßß 
;
ßß 
return
™™ 
_mapper
™™ 
.
™™ 
Map
™™ 
<
™™ 
IEnumerable
™™ *
<
™™* +'
RoleModulesPermissionsDto
™™+ D
>
™™D E
>
™™E F
(
™™F G
modulePermissions
™™G X
)
™™X Y
;
™™Y Z
}
¨¨ 	
}
≠≠ 
}ÆÆ ¨(
Å/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/UseCases/IdentificationTypeService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
UseCases$ ,
{ 
public 
class %
IdentificationTypeService '
:( )&
IIdentificationTypeService* D
{ 
private 
readonly 
IUnitOfWork $
_unitOfWork% 0
;0 1
private 
readonly 
IMapper  
_mapper! (
;( )
public		 %
IdentificationTypeService		 (
(		( )
IUnitOfWork		) 4

unitOfWork		5 ?
,		? @
IMapper		A H
mapper		I O
)		O P
{

 	
_unitOfWork 
= 

unitOfWork $
;$ %
_mapper 
= 
mapper 
; 
} 	
public 
async 
Task 
< !
IdentificationTypeDto /
>/ 0&
AddIdentificationTypeAsync1 K
(K L!
IdentificationTypeDtoL a
valuesb h
)h i
{ 	
IdentificationType 
request &
=' (
new) ,
(, -
values- 3
.3 4 
identificationTypeId4 H
,H I
valuesJ P
.P Q
identificationTypesQ d
!d e
)e f
;f g
_unitOfWork 
. 
IdentificationType *
.* +
Insert+ 1
(1 2
request2 9
)9 :
;: ;
await 
_unitOfWork 
. 
Complete &
(& '
)' (
;( )
return 
new !
IdentificationTypeDto ,
(, -
request- 4
.4 5 
IdentificationTypeId5 I
,I J
requestK R
.R S
IdentificationTypesS f
!f g
)g h
;h i
} 	
public 
async 
Task 
< 
string  
>  !)
DeleteIdentificationTypeAsync" ?
(? @
int@ C
valueD I
)I J
{ 	
var 
response 
= 
await  
_unitOfWork! ,
., -
IdentificationType- ?
.? @
Get@ C
(C D
valueD I
)I J
;J K
if 
( 
response 
is 
null  
)  !
{ 
return 
$str #
;# $
}   
_unitOfWork"" 
."" 
IdentificationType"" *
.""* +
Delete""+ 1
(""1 2
response""2 :
)"": ;
;""; <
await## 
_unitOfWork## 
.## 
Complete## &
(##& '
)##' (
;##( )
return%% 
$str%% 
;%% 
}&& 	
public(( 
async(( 
Task(( 
<(( 
IEnumerable(( %
<((% &!
IdentificationTypeDto((& ;
>((; <
>((< =&
GetIdentificationTypeAsync((> X
(((X Y
)((Y Z
{)) 	
var** 
response** 
=** 
await**  
_unitOfWork**! ,
.**, -
IdentificationType**- ?
.**? @
GetAll**@ F
(**F G
)**G H
;**H I
return++ 
_mapper++ 
.++ 
Map++ 
<++ 
IEnumerable++ *
<++* +!
IdentificationTypeDto+++ @
>++@ A
>++A B
(++B C
response++C K
)++K L
;++L M
},, 	
public// 
async// 
Task// 
<// !
IdentificationTypeDto// /
>/// 0)
UpdateIdentificationTypeAsync//1 N
(//N O!
IdentificationTypeDto//O d
values//e k
)//k l
{00 	
IdentificationType11 
request11 &
=11' (
new11) ,
(11, -
values11- 3
.113 4 
identificationTypeId114 H
,11H I
values11J P
.11P Q
identificationTypes11Q d
!11d e
)11e f
;11f g
_unitOfWork33 
.33 
IdentificationType33 *
.33* +
Update33+ 1
(331 2
request332 9
)339 :
;33: ;
await44 
_unitOfWork44 
.44 
Complete44 &
(44& '
)44' (
;44( )
return66 
new66 !
IdentificationTypeDto66 ,
(66, -
request66- 4
.664 5 
IdentificationTypeId665 I
,66I J
request66K R
.66R S
IdentificationTypes66S f
!66f g
)66g h
;66h i
}77 	
}:: 
};; Ï?
}/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/UseCases/DepartmentUnitService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
UseCases$ ,
{ 
public 
class !
DepartmentUnitService #
:$ %"
IDepartmentUnitService& <
{ 
private 
readonly 
IUnitOfWork $
_unitOfWork% 0
;0 1
private 
readonly 
IMapper  
_mapper! (
;( )
public

 !
DepartmentUnitService

 $
(

$ %
IUnitOfWork

% 0

unitOfWork

1 ;
,

; <
IMapper

= D
mapper

E K
)

K L
{ 	
_unitOfWork 
= 

unitOfWork $
;$ %
_mapper 
= 
mapper 
; 
} 	
public 
async 
Task 
< !
DepartmentUnitReadDto /
>/ 0"
AddDepartmentUnitAsync1 G
(G H#
DepartmentUnitCreateDtoH _
values` f
)f g
{ 	
DepartmentUnit 
departmentUnit )
=* +
new, /
(/ 0
values0 6
.6 7
DepartmentId7 C
,C D
valuesE K
.K L
UnitIdL R
,S T
valuesT Z
.Z [
UnitName[ c
!c d
)d e
{ 
	CreatedBy 
= 
values "
." #
	CreatedBy# ,
,, -
	CreatedOn 
= 
DateTime $
.$ %
Now% (
} 
; 
_unitOfWork 
. 
DepartmentUnit &
.& '
Insert' -
(- .
departmentUnit. <
)< =
;= >
await 
_unitOfWork 
. 
Complete &
(& '
)' (
;( )
return 
new !
DepartmentUnitReadDto ,
(, -
departmentUnit- ;
.; <
DepartmentId< H
,H I
departmentUnitJ X
.X Y
UnitIdY _
,_ `
departmentUnita o
.o p
UnitNamep x
!x y
)y z
;z {
} 	
public 
async 
Task 
< 
GenericResponseDto ,
>, - 
DeleteDepartmentUnit. B
(B C
intC F
unitIdG M
)M N
{ 	
var!! 
unit!! 
=!! 
await!! 
_unitOfWork!! (
.!!( )
DepartmentUnit!!) 7
.!!7 8
Get!!8 ;
(!!; <
unitId!!< B
)!!B C
;!!C D
if"" 
("" 
unit"" 
is"" 
null"" 
)"" 
{## 
return$$ 
new$$ 
GenericResponseDto$$ -
($$- .
$str$$. 9
)$$9 :
;$$: ;
}%% 
_unitOfWork'' 
.'' 
DepartmentUnit'' &
.''& '
Delete''' -
(''- .
unit''. 2
!''2 3
)''3 4
;''4 5
await(( 
_unitOfWork(( 
.(( 
Complete(( &
(((& '
)((' (
;((( )
return)) 
new)) 
GenericResponseDto)) )
())) *
$str))* 3
)))3 4
;))4 5
}** 	
public,, 
async,, 
Task,, 
<,, 
IEnumerable,, %
<,,% &!
DepartmentUnitReadDto,,& ;
>,,; <
>,,< ="
GetDepartmentUnitAsync,,> T
(,,T U
),,U V
{-- 	
var.. 
response.. 
=.. 
await..  
_unitOfWork..! ,
..., -
DepartmentUnit..- ;
...; <
GetAll..< B
(..B C
)..C D
;..D E
return// 
_mapper// 
.// 
Map// 
<// 
IEnumerable// *
<//* +!
DepartmentUnitReadDto//+ @
>//@ A
>//A B
(//B C
response//C K
)//K L
;//L M
}00 	
public22 
async22 
Task22 
<22 
IEnumerable22 %
<22% &!
DepartmentUnitReadDto22& ;
>22; <
>22< ="
GetDepartmentUnitAsync22> T
(22T U
int22U X
value22Y ^
)22^ _
{33 	
var55 
response55 
=55 
await55  
_unitOfWork55! ,
.55, -
DepartmentUnit55- ;
.55; <
GetAll55< B
(55B C
u55C D
=>55E G
u55H I
.55I J
DepartmentId55J V
==55W Y
value55Z _
)55_ `
;55` a
return66 
_mapper66 
.66 
Map66 
<66 
IEnumerable66 *
<66* +!
DepartmentUnitReadDto66+ @
>66@ A
>66A B
(66B C
response66C K
)66K L
;66L M
}88 	
public:: 
Task:: 
<:: !
DepartmentUnitReadDto:: )
>::) *"
GetDepartmentUnitAsync::+ A
(::A B
string::B H
value::I N
)::N O
{;; 	
throw<< 
new<< #
NotImplementedException<< -
(<<- .
)<<. /
;<</ 0
}== 	
public?? 
async?? 
Task?? 
<?? 
IEnumerable?? %
<??% &
UnitReadDto??& 1
>??1 2
>??2 3
GetUnitAsync??4 @
(??@ A
int??A D
value??E J
)??J K
{@@ 	
varAA 
responseAA 
=AA 
awaitAA  
_unitOfWorkAA! ,
.AA, -
DepartmentUnitAA- ;
.AA; <
GetAllAA< B
(AAB C
uAAC D
=>AAE G
uAAH I
.AAI J
DepartmentIdAAJ V
==AAW Y
valueAAZ _
)AA_ `
;AA` a
returnBB 
_mapperBB 
.BB 
MapBB 
<BB 
IEnumerableBB *
<BB* +
UnitReadDtoBB+ 6
>BB6 7
>BB7 8
(BB8 9
responseBB9 A
)BBA B
;BBB C
}DD 	
publicFF 
asyncFF 
TaskFF 
<FF !
DepartmentUnitReadDtoFF /
>FF/ 0%
UpdateDepartmentUnitAsyncFF1 J
(FFJ K#
DepartmentUnitUpdateDtoFFK b
valuesFFc i
)FFi j
{GG 	
DepartmentUnitHH 
departmentUnitHH )
=HH* +
newHH, /
(HH/ 0
valuesHH0 6
.HH6 7
DepartmentIdHH7 C
,HHC D
valuesHHE K
.HHK L
UnitIdHHL R
,HHR S
valuesHHT Z
.HHZ [
UnitNameHH[ c
!HHc d
)HHd e
{II 

ModifiedByJJ 
=JJ 
valuesJJ #
.JJ# $

ModifiedByJJ$ .
,JJ. /

ModifiedOnKK 
=KK 
DateTimeKK %
.KK% &
NowKK& )
}LL 
;LL 
_unitOfWorkNN 
.NN 
DepartmentUnitNN &
.NN& '
UpdateNN' -
(NN- .
departmentUnitNN. <
)NN< =
;NN= >
awaitOO 
_unitOfWorkOO 
.OO 
CompleteOO &
(OO& '
)OO' (
;OO( )
returnQQ 
newQQ !
DepartmentUnitReadDtoQQ ,
(QQ, -
departmentUnitQQ- ;
.QQ; <
DepartmentIdQQ< H
,QQH I
departmentUnitQQJ X
.QQX Y
UnitIdQQY _
,QQ_ `
departmentUnitQQa o
.QQo p
UnitNameQQp x
!QQx y
)QQy z
;QQz {
}RR 	
}SS 
}TT ◊7
y/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/UseCases/DepartmentService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
UseCases$ ,
{ 
public 
class 
DepartmentService 
:  !
IDepartmentService" 4
{ 
private 
readonly 
IUnitOfWork $
_unitOfWork% 0
;0 1
private 
readonly 
IMapper  
_mapper! (
;( )
public

 
DepartmentService

  
(

  !
IUnitOfWork

! ,

unitOfWork

- 7
,

7 8
IMapper

9 @
mapper

A G
)

G H
{ 	
_unitOfWork 
= 

unitOfWork $
;$ %
_mapper 
= 
mapper 
; 
} 	
public 
async 
Task 
< 
DepartmentReadDto +
>+ ,
AddDepartmentAsync- ?
(? @
DepartmentCreateDto@ S
valuesT Z
)Z [
{ 	

Department 

department !
=" #
new$ '
(' (
values( .
.. /
DepartmentId/ ;
,; <
values= C
.C D
DepartmentNameD R
!R S
)S T
{ 
	CreatedBy 
= 
values "
." #
	CreatedBy# ,
,, -
	CreatedOn 
= 
DateTime $
.$ %
Now% (
} 
; 
_unitOfWork 
. 

Department "
." #
Insert# )
() *

department* 4
)4 5
;5 6
await 
_unitOfWork 
. 
Complete &
(& '
)' (
;( )
return 
new 
DepartmentReadDto (
(( )

department) 3
.3 4
DepartmentId4 @
,@ A

departmentB L
.L M
DepartmentNameM [
![ \
)\ ]
;] ^
} 	
public 
async 
Task 
< 
GenericResponseDto ,
>, -
DeleteDepartment. >
(> ?
int? B
departmentIdC O
)O P
{ 	
var!! 

department!! 
=!! 
await!! "
_unitOfWork!!# .
.!!. /

Department!!/ 9
.!!9 :
Get!!: =
(!!= >
departmentId!!> J
)!!J K
;!!K L
if"" 
("" 

department"" 
is"" 
null"" !
)""! "
{## 
return$$ 
new$$ 
GenericResponseDto$$ -
($$- .
$str$$. 9
)$$9 :
;$$: ;
}%% 
_unitOfWork'' 
.'' 

Department'' "
.''" #
Delete''# )
('') *

department''* 4
!''4 5
)''5 6
;''6 7
await(( 
_unitOfWork(( 
.(( 
Complete(( &
(((& '
)((' (
;((( )
return)) 
new)) 
GenericResponseDto)) )
())) *
$str))* 3
)))3 4
;))4 5
}** 	
public,, 
async,, 
Task,, 
<,, 
IEnumerable,, %
<,,% &
DepartmentReadDto,,& 7
>,,7 8
>,,8 9
GetDepartmentAsync,,: L
(,,L M
),,M N
{-- 	
var.. 
response.. 
=.. 
await..  
_unitOfWork..! ,
..., -

Department..- 7
...7 8
GetAll..8 >
(..> ?
)..? @
;..@ A
return// 
_mapper// 
.// 
Map// 
<// 
IEnumerable// *
<//* +
DepartmentReadDto//+ <
>//< =
>//= >
(//> ?
response//? G
)//G H
;//H I
}00 	
public22 
async22 
Task22 
<22 
DepartmentReadDto22 +
>22+ ,
GetDepartmentAsync22- ?
(22? @
int22@ C
value22D I
)22I J
{33 	
var55 
response55 
=55 
await55  
_unitOfWork55! ,
.55, -

Department55- 7
.557 8
Get558 ;
(55; <
value55< A
)55A B
;55B C
return66 
_mapper66 
.66 
Map66 
<66 
DepartmentReadDto66 0
>660 1
(661 2
response662 :
)66: ;
;66; <
}77 	
public99 
async99 
Task99 
<99 
DepartmentReadDto99 +
>99+ ,
GetDepartmentAsync99- ?
(99? @
string99@ F
value99G L
)99L M
{:: 	
var;; 
response;; 
=;; 
await;;  
_unitOfWork;;! ,
.;;, -

Department;;- 7
.;;7 8
Get;;8 ;
(;;; <
d;;< =
=>;;> @
d;;A B
.;;B C
DepartmentName;;C Q
==;;R T
value;;U Z
);;Z [
;;;[ \
return<< 
_mapper<< 
.<< 
Map<< 
<<< 
DepartmentReadDto<< 0
><<0 1
(<<1 2
response<<2 :
)<<: ;
;<<; <
}== 	
public?? 
async?? 
Task?? 
<?? 
DepartmentReadDto?? +
>??+ ,!
UpdateDepartmentAsync??- B
(??B C
DepartmentUpdateDto??C V
values??W ]
)??] ^
{@@ 	

DepartmentBB 

departmentBB !
=BB" #
newBB$ '
(BB' (
valuesBB( .
.BB. /
DepartmentIdBB/ ;
,BB; <
valuesBB= C
.BBC D
DepartmentNameBBD R
!BBR S
)BBS T
{CC 

ModifiedByDD 
=DD 
valuesDD #
.DD# $

ModifiedByDD$ .
,DD. /

ModifiedOnEE 
=EE 
DateTimeEE %
.EE% &
UtcNowEE& ,
}FF 
;FF 
_unitOfWorkHH 
.HH 

DepartmentHH "
.HH" #
UpdateHH# )
(HH) *

departmentHH* 4
)HH4 5
;HH5 6
awaitII 
_unitOfWorkII 
.II 
CompleteII &
(II& '
)II' (
;II( )
returnKK 
newKK 
DepartmentReadDtoKK (
(KK( )

departmentKK) 3
.KK3 4
DepartmentIdKK4 @
,KK@ A

departmentKKB L
.KKL M
DepartmentNameKKM [
!KK[ \
)KK\ ]
;KK] ^
}LL 	
}MM 
}NN Ì.
v/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/UseCases/ChannelService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
UseCases$ ,
{ 
public 
class 
ChannelService 
: 
IChannelService .
{ 
private 
readonly 
IUnitOfWork $
_unitOfWork% 0
;0 1
private 
readonly 
IMapper  
_mapper! (
;( )
public 
ChannelService 
( 
IUnitOfWork )

unitOfWork* 4
,4 5
IMapper6 =
mapper> D
)D E
{		 	
_unitOfWork

 
=

 

unitOfWork

 $
;

$ %
_mapper 
= 
mapper 
; 
} 	
public 
async 
Task 
< 
ChannelReadDto (
>( )
AddChannelAsync* 9
(9 :
ChannelCreateDto: J
valuesK Q
)Q R
{ 	
Channels 
Channel 
= 
new "
(" #
values# )
.) *
	ChannelId* 3
,3 4
values5 ;
.; <
ChannelName< G
!G H
)H I
{ 
	CreatedBy 
= 
values "
." #
	CreatedBy# ,
,, -
	CreatedOn 
= 
DateTime $
.$ %
Now% (
} 
; 
_unitOfWork 
. 
Channels  
.  !
Insert! '
(' (
Channel( /
)/ 0
;0 1
await 
_unitOfWork 
. 
Complete &
(& '
)' (
;( )
return 
new 
ChannelReadDto %
(% &
Channel& -
.- .
	ChannelId. 7
,7 8
Channel9 @
.@ A
ChannelNameA L
!L M
)M N
;N O
} 	
public 
async 
Task 
< 
string  
>  !
DeleteChannelAsync" 4
(4 5
int5 8
value9 >
)> ?
{ 	
var   
response   
=   
await    
_unitOfWork  ! ,
.  , -
Channels  - 5
.  5 6
Get  6 9
(  9 :
value  : ?
)  ? @
;  @ A
if"" 
("" 
response"" 
is"" 
null""  
)""  !
return## 
$str## #
;### $
_unitOfWork%% 
.%% 
Channels%%  
.%%  !
Delete%%! '
(%%' (
response%%( 0
)%%0 1
;%%1 2
await&& 
_unitOfWork&& 
.&& 
Complete&& &
(&&& '
)&&' (
;&&( )
return(( 
$str(( 
;(( 
})) 	
public++ 
async++ 
Task++ 
<++ 
IEnumerable++ %
<++% &
ChannelReadDto++& 4
>++4 5
>++5 6
GetChannelAsync++7 F
(++F G
)++G H
{,, 	
var-- 
response-- 
=-- 
await--  
_unitOfWork--! ,
.--, -
Channels--- 5
.--5 6
GetAll--6 <
(--< =
)--= >
;--> ?
return.. 
_mapper.. 
... 
Map.. 
<.. 
IEnumerable.. *
<..* +
ChannelReadDto..+ 9
>..9 :
>..: ;
(..; <
response..< D
)..D E
;..E F
}// 	
public11 
Task11 
<11 
ChannelReadDto11 "
>11" #
GetChannelAsync11$ 3
(113 4
int114 7
value118 =
)11= >
{22 	
throw33 
new33 #
NotImplementedException33 -
(33- .
)33. /
;33/ 0
}44 	
public66 
Task66 
<66 
ChannelReadDto66 "
>66" #
GetChannelAsync66$ 3
(663 4
string664 :
value66; @
)66@ A
{77 	
throw88 
new88 #
NotImplementedException88 -
(88- .
)88. /
;88/ 0
}99 	
public;; 
async;; 
Task;; 
<;; 
ChannelReadDto;; (
>;;( )
UpdateChannelAsync;;* <
(;;< =
ChannelUpdateDto;;= M
values;;N T
);;T U
{<< 	
Channels>> 
Channel>> 
=>> 
new>> "
(>>" #
values>># )
.>>) *
	ChannelId>>* 3
,>>3 4
values>>5 ;
.>>; <
ChannelName>>< G
!>>G H
)>>H I
{?? 

ModifiedBy@@ 
=@@ 
values@@ #
.@@# $

ModifiedBy@@$ .
,@@. /

ModifiedOnAA 
=AA 
DateTimeAA %
.AA% &
NowAA& )
}BB 
;BB 
_unitOfWorkDD 
.DD 
ChannelsDD  
.DD  !
UpdateDD! '
(DD' (
ChannelDD( /
)DD/ 0
;DD0 1
awaitEE 
_unitOfWorkEE 
.EE 
CompleteEE &
(EE& '
)EE' (
;EE( )
returnGG 
newGG 
ChannelReadDtoGG %
(GG% &
ChannelGG& -
.GG- .
	ChannelIdGG. 7
,GG7 8
ChannelGG9 @
.GG@ A
ChannelNameGGA L
!GGL M
)GGM N
;GGN O
}II 	
}MM 
}NN Ó	
{/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/ResetPasswordResponse.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
{ 
public 
record (
ResetPasswordSuccessResponse +
:, -
BaseResponse. :
{ 
}		 
public 

record &
ResetPasswordErrorResponse ,
:- .
BaseResponse/ ;
{ 
} 
public 

record !
ResetPasswordResponse '
{ 
public 
bool 
	IsSuccess 
{ 
get  #
;# $
set% (
;( )
}* +
public (
ResetPasswordSuccessResponse +
?+ ,
SuccessResponse- <
{= >
get? B
;B C
setD G
;G H
}I J
public &
ResetPasswordErrorResponse )
?) *
ErrorResponse+ 8
{9 :
get; >
;> ?
set@ C
;C D
}E F
} 
} “
z/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/RegistrationResponse.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
{ 
public 
record '
RegistrationSuccessResponse *
:+ ,
BaseResponse- 9
{ 
public		 
required		 
string		 
UserId		 %
{		& '
get		( +
;		+ ,
set		- 0
;		0 1
}		2 3
public 
required 
string 
UserEmailAddress /
{0 1
get2 5
;5 6
set7 :
;: ;
}< =
} 
public 

record %
RegistrationErrorResponse +
:, -
BaseResponse. :
{ 
} 
public 

record  
RegistrationResponse &
{ 
public 
bool 
	IsSuccess 
{ 
get  #
;# $
set% (
;( )
}* +
public '
RegistrationSuccessResponse *
?* +
SuccessResponse, ;
{< =
get> A
;A B
setC F
;F G
}H I
public %
RegistrationErrorResponse (
?( )
ErrorResponse* 7
{8 9
get: =
;= >
set? B
;B C
}D E
} 
} …
{/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/PermissionsActionsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
;* +
public 
record !
PermissionsActionsDto #
(# $
bool$ (
NoAccess) 1
,1 2
bool3 7
Create8 >
,> ?
bool@ D
ReadE I
,I J
boolK O
UpdateP V
,V W
boolX \
Delete] c
,c d
boole i
Approvej q
)q r
;r s’	
z/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/PasswordResetRequest.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
{ 
public 
record  
PasswordResetRequest #
{ 
public 
required 
string 
Phone_OR_Email -
{. /
get0 3
;3 4
set5 8
;8 9
}: ;
[

 	
StringLength

	 
(

 
$num

 
)

 
]

 
public 
required 
string 
Token $
{% &
get' *
;* +
set, /
;/ 0
}1 2
public 
required 
string 
NewPassword *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
public 
required 
string 
ConfirmNewPassword 1
{2 3
get4 7
;7 8
set9 <
;< =
}> ?
} 
} É

s/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/LoginResponse.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
{ 
public 

abstract 
record 
LoginResponse (
{ 
public 
required 
string 
UserId %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
bool 
IsFirstTime 
{  !
get" %
;% &
set' *
;* +
}, -
public 
required 
string 
BearerToken *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
public		 
required		 
string		 
RefreshToken		 +
{		, -
get		. 1
;		1 2
set		3 6
;		6 7
}		8 9
public

 
DateTime

 
?

 
	ExpiresAt

 "
{

# $
get

% (
;

( )
set

* -
;

- .
}

/ 0
} 
} ı
u/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/LoginRequestDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
{ 
public 
record 
LoginRequestDto 
{ 
public 
required 
string 
Phone_OR_Email -
{. /
get0 3
;3 4
set5 8
;8 9
}: ;
public

 
required

 
string

 
Password

 '
{

( )
get

* -
;

- .
set

/ 2
;

2 3
}

4 5
} 
} Ω
x/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/GenericResponseDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
;* +
public 
record 
GenericResponseDto  
(  !
string! '
response( 0
)0 1
;1 2’	
{/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/ChangePasswordRequest.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
{ 
public 
record !
ChangePasswordRequest $
{ 
[ 	
StringLength	 
( 
$num 
) 
] 
public		 
required		 
string		 
UserId		 %
{		& '
get		( +
;		+ ,
set		- 0
;		0 1
}		2 3
public 
required 
string 
OldPassword *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
public 
required 
string 
NewPassword *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
public 
required 
string 
ConfirmNewPassword 1
{2 3
get4 7
;7 8
set9 <
;< =
}> ?
} 
} º

Ñ/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/DisapprovedUserAccountResponse.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
;* +
public 
record 4
(DisapprovedUserAccountSuccessResponseDto 6
:7 8
BaseResponse9 E
{F G
}H I
;I J
public 
record 2
&DisapprovedUserAccountErrorResponseDto 4
:5 6
BaseResponse7 C
{D E
}F G
;G H
public 
class -
!DisapprovedUserAccountResponseDto .
{		 
public

 

bool

 
	IsSuccess

 
{

 
get

 
;

  
set

! $
;

$ %
}

& '
public 
4
(DisapprovedUserAccountSuccessResponseDto 3
?3 4
SuccessResponse5 D
{E F
getG J
;J K
setL O
;O P
}Q R
public 
2
&DisapprovedUserAccountErrorResponseDto 1
?1 2
ErrorResponse3 @
{A B
getC F
;F G
setH K
;K L
}M N
} ∂

É/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/DeactivateUserAccountResponse.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
;* +
public 
record 3
'DeactivateUserAccountSuccessResponseDto 5
:6 7
BaseResponse8 D
{E F
}G H
;H I
public 
record 1
%DeactivateUserAccountErrorResponseDto 3
:4 5
BaseResponse6 B
{C D
}E F
;F G
public 
class ,
 DeactivateUserAccountResponseDto -
{ 
public		 

bool		 
	IsSuccess		 
{		 
get		 
;		  
set		! $
;		$ %
}		& '
public

 
3
'DeactivateUserAccountSuccessResponseDto

 2
?

2 3
SuccessResponse

4 C
{

D E
get

F I
;

I J
set

K N
;

N O
}

P Q
public 
1
%DeactivateUserAccountErrorResponseDto 0
?0 1
ErrorResponse2 ?
{@ A
getB E
;E F
setG J
;J K
}L M
} Û	
|/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/ChangePasswordResponse.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
{ 
public 
record )
ChangePasswordSuccessResponse ,
:- .
BaseResponse/ ;
{ 
}		 
public 

record '
ChangePasswordErrorResponse -
:. /
BaseResponse0 <
{ 
} 
public 

class "
ChangePasswordResponse '
{ 
public 
bool 
	IsSuccess 
{ 
get  #
;# $
set% (
;( )
}* +
public )
ChangePasswordSuccessResponse ,
?, -
SuccessResponse. =
{> ?
get@ C
;C D
setE H
;H I
}J K
public '
ChangePasswordErrorResponse *
?* +
ErrorResponse, 9
{: ;
get< ?
;? @
setA D
;D E
}F G
} 
} Ì
r/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/BaseResponse.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
{ 
public 

record 
BaseResponse 
{ 
public 
required 
int 

StatusCode &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
public

 
required

 
string

 
StatusMessage

 ,
{

- .
get

/ 2
;

2 3
set

4 7
;

7 8
}

9 :
} 
} §

Ä/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/ApproveUserAccountResponse.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
;* +
public 
record 0
$ApproveUserAccountSuccessResponseDto 2
:3 4
BaseResponse5 A
{B C
}D E
;E F
public 
record .
"ApproveUserAccountErrorResponseDto 0
:1 2
BaseResponse3 ?
{@ A
}B C
;C D
public 
class )
ApproveUserAccountResponseDto *
{ 
public		 

bool		 
	IsSuccess		 
{		 
get		 
;		  
set		! $
;		$ %
}		& '
public

 
0
$ApproveUserAccountSuccessResponseDto

 /
?

/ 0
SuccessResponse

1 @
{

A B
get

C F
;

F G
set

H K
;

K L
}

M N
public 
.
"ApproveUserAccountErrorResponseDto -
?- .
ErrorResponse0 =
{> ?
get@ C
;C D
setE H
;H I
}J K
} ø

Å/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Shared/ActivateUserAccountResponse.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Shared$ *
{ 
public 

record 1
%ActivateUserAccountSuccessResponseDto 7
:8 9
BaseResponse: F
{G H
}I J
;J K
public 

record /
#ActivateUserAccountErrorResponseDto 5
:6 7
BaseResponse8 D
{E F
}G H
;H I
public 

class *
ActivateUserAccountResponseDto /
{ 
public		 
bool		 
	IsSuccess		 
{		 
get		  #
;		# $
set		% (
;		( )
}		* +
public

 1
%ActivateUserAccountSuccessResponseDto

 4
?

4 5
SuccessResponse

6 E
{

F G
get

H K
;

K L
set

M P
;

P Q
}

R S
public /
#ActivateUserAccountErrorResponseDto 2
?2 3
ErrorResponse4 A
{B C
getD G
;G H
setI L
;L M
}N O
} 
} ˜
y/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Profiles/TokenStoreProfile.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Profiles$ ,
{ 
public 
class 
TokenStoreProfile 
:  !
Profile" )
{ 
public 
TokenStoreProfile	 
( 
) 
{ 
	CreateMap 
< 

TokenStore  
,  !
TokenStoreReadDto" 3
>3 4
(4 5
)5 6
;6 7
	CreateMap		 
<		 
TokenStoreCreateDto		 )
,		) *

TokenStore		+ 5
>		5 6
(		6 7
)		7 8
;		8 9
} 	
} 
} ™	
w/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Profiles/SubMenusProfile.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Profiles$ ,
{ 
public 
class 
SubMenusProfile 
: 
Profile  '
{ 
public		 
SubMenusProfile			 
(		 
)		 
{

 
	CreateMap 
< 
SubMenus 
, 
SubMenusDto "
>" #
(# $
)$ %
;% &
	CreateMap 
< 
SubMenusDto !
,! "
SubMenus# +
>+ ,
(, -
)- .
;. /
	CreateMap 
< 
SubMenusUpdateDto '
,' (
SubMenus) 1
>1 2
(2 3
)3 4
;4 5
	CreateMap 
< 
SubMenuDeleteDto &
,& '
SubMenus( 0
>0 1
(1 2
)2 3
;3 4
} 	
} 
} ›	
{/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Profiles/SubMenuItemsProfile.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Profiles$ ,
{ 
public 
class 
SubMenuItemsProfile !
:" #
Profile$ +
{ 
public		 
SubMenuItemsProfile			 
(		 
)		 
{

 
	CreateMap 
< 
SubMenuItems 
, 
SubMenuItemsDto *
>* +
(+ ,
), -
;- .
	CreateMap 
< !
SubMenuItemsCreateDto +
,+ ,
SubMenuItems- 9
>9 :
(: ;
); <
;< =
	CreateMap 
< !
SubMenuItemsUpdateDto +
,+ ,
SubMenuItems- 9
>9 :
(: ;
); <
;< =
	CreateMap 
< !
SubMenuItemsDeleteDto +
,+ ,
SubMenuItems- 9
>9 :
(: ;
); <
;< =
} 	
} 
} Í
t/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Profiles/MenusProfile.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Profiles$ ,
{ 
public 
class 
MenusProfile 
: 
Profile $
{ 
public		 
MenusProfile			 
(		 
)		 
{

 
	CreateMap 
< 
Menus 
, 
MenusDto 
> 
( 
) 
;  
	CreateMap 
< 
MenusDto 
, 
Menus  %
>% &
(& '
)' (
;( )
	CreateMap 
< 
MenusDeleteDto $
,$ %
Menus& +
>+ ,
(, -
)- .
;. /
} 	
} 
} ∏
z/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Profiles/MenuActionsProfile.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Profiles$ ,
{ 
public 
class 
MenuActionsProfile  
:! "
Profile# *
{ 
} 
} ¶
Å/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Profiles/IdentificationTypeProfile.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Profiles$ ,
{ 
public 
class %
IdentificationTypeProfile '
:( )
Profile* 1
{ 
public %
IdentificationTypeProfile (
(( )
)) *
{ 	
	CreateMap 
< 
IdentificationType (
,( )!
IdentificationTypeDto* ?
>? @
(@ A
)A B
;B C
	CreateMap		 
<		 !
IdentificationTypeDto		 +
,		+ ,
IdentificationType		- ?
>		? @
(		@ A
)		A B
;		B C
} 	
} 
} ù
}/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Profiles/DepartmentUnitProfile.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Profiles$ ,
{ 
public 
class !
DepartmentUnitProfile #
:$ %
Profile& -
{ 
public !
DepartmentUnitProfile	 
( 
)  
{ 
	CreateMap 
< 
DepartmentUnit $
,$ %
UnitReadDto& 1
>1 2
(2 3
)3 4
;4 5
	CreateMap

 
<

 
DepartmentUnit

 $
,

$ %!
DepartmentUnitReadDto

& ;
>

; <
(

< =
)

= >
;

> ?
	CreateMap 
< #
DepartmentUnitCreateDto -
,- .
DepartmentUnit/ =
>= >
(> ?
)? @
;@ A
	CreateMap 
< #
DepartmentUnitUpdateDto -
,- .
DepartmentUnit/ =
>= >
(> ?
)? @
;@ A
	CreateMap 
< #
DepartmentUnitDeleteDto -
,- .
DepartmentUnit/ =
>= >
(> ?
)? @
;@ A
} 	
} 
} À	
y/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Profiles/DepartmentProfile.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Profiles$ ,
{ 
public 
class 
DepartmentProfile 
:  !
Profile" )
{ 
public 
DepartmentProfile	 
( 
) 
{ 
	CreateMap		 
<		 

Department		 
,		 
DepartmentReadDto		 *
>		* +
(		+ ,
)		, -
;		- .
	CreateMap

 
<

 
DepartmentCreateDto

 )
,

) *

Department

+ 5
>

5 6
(

6 7
)

7 8
;

8 9
	CreateMap 
< 
DepartmentUpdateDto )
,) *

Department+ 5
>5 6
(6 7
)7 8
;8 9
	CreateMap 
< 
DepartmentDeleteDto )
,) *

Department+ 5
>5 6
(6 7
)7 8
;8 9
} 	
} 
} ∞	
v/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Profiles/ChannelProfile.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Profiles$ ,
{ 
public 
class 
ChannelsProfile 
: 
Profile  '
{ 
public 
ChannelsProfile	 
( 
) 
{ 
	CreateMap		 
<		 
Channels		 
,		 
ChannelReadDto		 %
>		% &
(		& '
)		' (
;		( )
	CreateMap

 
<

 
ChannelCreateDto

 &
,

& '
Channels

( 0
>

0 1
(

1 2
)

2 3
;

3 4
	CreateMap 
< 
ChannelUpdateDto &
,& '
Channels( 0
>0 1
(1 2
)2 3
;3 4
	CreateMap 
< 
ChannelDeleteDto &
,& '
Channels( 0
>0 1
(1 2
)2 3
;3 4
} 	
} 
} ¶
Å/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Profiles/ApplicationModulesProfile.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Profiles$ ,
{ 
public 
class %
ApplicationModulesProfile '
:( )
Profile* 1
{ 
public %
ApplicationModulesProfile	 "
(" #
)# $
{ 
	CreateMap		 
<		 
ApplicationModules		 
,		  !
ApplicationModulesDto		! 6
>		6 7
(		7 8
)		8 9
;		9 :
	CreateMap

 
<

 !
ApplicationModulesDto

 +
,

+ ,
ApplicationModules

- ?
>

? @
(

@ A
)

A B
;

B C
} 	
} 
} È
ã/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Interfaces/UserAccounts/IUserAccountsService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $

Interfaces$ .
.. /
UserAccounts/ ;
{ 
public 
	interface  
IUserAccountsService &
{ 
Task 
<  
RegistrationResponse !
>! "$
CustomerUserRegistration# ;
(; <*
CustomerRegistrationRequestDto< Z
details[ b
)b c
;c d
Task 
<  
RegistrationResponse !
>! "!
StaffUserRegistration# 8
(8 9'
StaffRegistrationRequestDto9 T
detailsU \
)\ ]
;] ^
Task 
<  
RegistrationResponse !
>! "#
PartnerUserRegistration# :
(: ;-
!PartnerBankRegistrationRequestDto; \
details] d
)d e
;e f
Task

 
<

 "
ChangePasswordResponse

 #
>

# $
ChangePassword

% 3
(

3 4$
ChangePasswordRequestDto

4 L
changePassword

M [
)

[ \
;

\ ]
Task 
< !
ResetPasswordResponse "
>" #(
ResetPasswordViaEmailAddress$ @
(@ A#
ResetPasswordRequestDtoA X
resetPasswordY f
)f g
;g h
Task 
< !
ResetPasswordResponse "
>" #-
!ResetPasswordViaMobilePhoneNumber$ E
(E F#
ResetPasswordRequestDtoF ]
resetPassword^ k
)k l
;l m
Task 
< 
LoginResponseDto 
> !
LoginWithEmailAddress 4
(4 5
LoginRequestDto5 D
emailLoginDetailsE V
)V W
;W X
Task 
< 
LoginResponseDto 
> &
LoginWithMobilePhoneNumber 9
(9 :
LoginRequestDto: I
phoneLoginDetailsJ [
)[ \
;\ ]
Task 
< #
RefreshTokenResponseDto $
>$ %
RefreshBearerToken& 8
(8 9"
RefreshTokenRequestDto9 O
tokensP V
)V W
;W X
Task 
< 
UserInformationDto 
>  
UserDetails! ,
(, -
string- 3
userId4 :
): ;
;; <
Task)) 
<)) +
UpdateAccountDetailsResponseDto)) ,
>)), - 
UpdateAccountDetails)). B
())B C
UpdateUserDto))C P
values))Q W
)))W X
;))X Y
}** 
}++ ›
|/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Interfaces/IDepartmentService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $

Interfaces$ .
{ 
public 
	interface 
IDepartmentService $
{ 
Task 
< 
DepartmentReadDto 
> 
AddDepartmentAsync  2
(2 3
DepartmentCreateDto3 F
valuesG M
)M N
;N O
Task 
< 
DepartmentReadDto 
> !
UpdateDepartmentAsync  5
(5 6
DepartmentUpdateDto6 I
valuesJ P
)P Q
;Q R
Task 
< 
IEnumerable 
< 
DepartmentReadDto *
>* +
>+ ,
GetDepartmentAsync- ?
(? @
)@ A
;A B
Task		 
<		 
DepartmentReadDto		 
>		 
GetDepartmentAsync		  2
(		2 3
int		3 6
value		7 <
)		< =
;		= >
Task

 
<

 
DepartmentReadDto

 
>

 
GetDepartmentAsync

  2
(

2 3
string

3 9
value

: ?
)

? @
;

@ A
Task 
< 
GenericResponseDto 
>  
DeleteDepartment! 1
(1 2
int2 5
departmentId6 B
)B C
;C D
} 
} ø"
ç/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Interfaces/UserAccounts/IAdministrationService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $

Interfaces$ .
.. /
UserAccounts/ ;
{ 
public 
	interface "
IAdministrationService (
{ 
IEnumerable

 
<

 
RolesDto

 
>

  
GetApprovedUserRoles

 2
(

2 3
)

3 4
;

4 5
IEnumerable 
< 
RolesDto 
> 
GetUserRoles *
(* +
)+ ,
;, -
Task 
< 
IdentityResult 
> 
CreateUserRole +
(+ ,
RolesCreateDto, :
role; ?
)? @
;@ A
Task 
< 
IdentityResult 
> 
UpdateUserRole +
(+ ,
RolesUpdateDto, :
role; ?
)? @
;@ A
Task 
< 
IdentityResult 
> 
DeleteUserRole +
(+ ,
RolesDeleteDto, :
roleId; A
)A B
;B C
Task 
< 
IdentityResult 
> 
ApproveUserRole ,
(, -
RolesApprovalDto- =
role> B
)B C
;C D
Task 
< 
IdentityResult 
> 
DisapproveUserRole /
(/ 0
RolesApprovalDto0 @
roleA E
)E F
;F G
Task 
< +
CustomerVerificationResponseDto ,
>, -!
VerifyCustomerAccount. C
(C D 
VerifyUserAccountDtoD X
accountVerificationY l
)l m
;m n
Task 
< (
CustomerRejectionResponseDto )
>) *!
RejectCustomerAccount+ @
(@ A 
RejectUserAccountDtoA U
accountRejectionV f
)f g
;g h
Task 
< )
ApproveUserAccountResponseDto *
>* +
ApproveUserAccount, >
(> ?!
ApproveUserAccountDto? T
accountApprovalU d
)d e
;e f
Task 
< -
!DisapprovedUserAccountResponseDto .
>. /!
DisapproveUserAccount0 E
(E F%
DisapprovedUserAccountDtoF _
accountDisapproval` r
)r s
;s t
Task 
< *
ActivateUserAccountResponseDto +
>+ ,
ActivateUserAccount- @
(@ A"
ActivateUserAccountDtoA W
accountActivationX i
)i j
;j k
Task 
< ,
 DeactivateUserAccountResponseDto -
>- .!
DeactivateUserAccount/ D
(D E$
DeactivateUserAccountDtoE ]
accountDeactivation^ q
)q r
;r s
Task 
< 
IEnumerable 
< "
AdministrationStaffDto /
>/ 0
>0 1"
GetAdministrationStaff2 H
(H I
)I J
;J K
Task 
< 
IEnumerable 
< %
AdministrationCustomerDto 2
>2 3
>3 4%
GetAdministrationCustomer5 N
(N O
)O P
;P Q
Task   
<   
IEnumerable   
<   %
AdministrationPartnersDto   2
>  2 3
>  3 4%
GetAdministrationPartners  5 N
(  N O
)  O P
;  P Q
Task!! 
<!! 
IEnumerable!! 
<!! "
AdministrationStaffDto!! /
>!!/ 0
>!!0 1,
 GetAdministrationDepartmentStaff!!2 R
(!!R S
int!!S V
departmentId!!W c
)!!c d
;!!d e
Task"" 
<"" 
IEnumerable"" 
<"" "
AdministrationStaffDto"" /
>""/ 0
>""0 10
$GetAdministrationDepartmentUnitStaff""2 V
(""V W
int""W Z
unitId""[ a
)""a b
;""b c
})) 
}** ó*
v/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Interfaces/IMenuService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $

Interfaces$ .
{		 
public

 
	interface

 
IMenuService

 
{ 
Task 
< 
MenusDto 
> 

CreateMenu !
(! "
MenusDto" *
menus+ 0
)0 1
;1 2
Task 
< 
MenusDto 
> 

UpdateMenu !
(! "
MenusDto" *
updateMenus+ 6
)6 7
;7 8
void 

DeleteMenu 
( 
MenusDeleteDto &
menuid' -
)- .
;. /
Task 
< 
SubMenusDto 
> 
CreateSubMenu '
(' (
SubMenusCreateDto( 9
subMenus: B
)B C
;C D
Task 
< 
SubMenusDto 
> 
UpdateSubMenu '
(' (
SubMenusUpdateDto( 9
updateSubMenus: H
)H I
;I J
void 
DeleteSubMenu 
( 
SubMenuDeleteDto +
	subMenuId, 5
)5 6
;6 7
Task 
< 
SubMenuItemsDto 
> 
CreateSubMenuItems 0
(0 1!
SubMenuItemsCreateDto1 F
subMenuItemsG S
)S T
;T U
Task 
< 
SubMenuItemsDto 
> 
UpdateSubMenuItems 0
(0 1!
SubMenuItemsUpdateDto1 F
updateSubMenuItemsG Y
)Y Z
;Z [
void 
DeleteSubMenuItems 
(  !
SubMenuItemsDeleteDto  5
subMenuItemsId6 D
)D E
;E F
Task 
< 
IEnumerable 
< 
MenusDto !
>! "
>" #
GetMenus$ ,
(, -
)- .
;. /
Task 
< 
IEnumerable 
< 
SubMenusDto $
>$ %
>% &
GetSubMenus' 2
(2 3
)3 4
;4 5
Task 
< 
IEnumerable 
< 
SubMenuItemsDto (
>( )
>) *
GetSubMenuItems+ :
(: ;
); <
;< =
Task 
< 
AccessModulesDto 
> 
GetAccessMenus -
(- .
). /
;/ 0
IEnumerable 
< 
MenuActionsDto "
>" #

GetActions$ .
(. /
)/ 0
;0 1
Task   
<   
GenericResponseDto   
>    "
AssignPermissionToRole  ! 7
(  7 8'
PermissionsAccessModulesDto  8 S
rolesPermissions  T d
)  d e
;  e f
Task"" 
<"" 
GenericResponseDto"" 
>""  +
UpdatePermissionsAssignedToRole""! @
(""@ A+
PermissionsAccessModulesReadDto""A `
rolesPermissions""a q
)""q r
;""r s
Task$$ 
<$$ 
IdentityResult$$ 
>$$ 
AssignUserRole$$ +
($$+ ,
AssignUserRoleDto$$, =
assignUserRole$$> L
)$$L M
;$$M N
Task&& 
<&& +
PermissionsAccessModulesReadDto&& ,
>&&, -
GetRolesPermissions&&. A
(&&A B
string&&B H
roleId&&I O
)&&O P
;&&P Q
Task(( 
<(( +
PermissionsAccessModulesReadDto(( ,
>((, -"
GetUserRolePermissions((. D
(((D E
string((E K
userId((L R
)((R S
;((S T
Task** 
<** 
IEnumerable** 
<**  
UsersAndRolesReadDto** -
>**- .
>**. /"
GetListOfUsersAndRoles**0 F
(**F G
)**G H
;**H I
Task,, 
<,, 
IEnumerable,, 
<,, !
ApplicationModulesDto,, .
>,,. /
>,,/ 0

GetModules,,1 ;
(,,; <
),,< =
;,,= >
Task-- 
<-- !
ApplicationModulesDto-- "
>--" #

AddModules--$ .
(--. /'
ApplicationModulesCreateDto--/ J

appModules--K U
)--U V
;--V W
Task.. 
<.. !
ApplicationModulesDto.. "
>.." #
UpdateModules..$ 1
(..1 2!
ApplicationModulesDto..2 G

appModules..H R
)..R S
;..S T
Task00 
<00 
GenericResponseDto00 
>00  "
AssignModulePermission00! 7
(007 8,
 ApplicationModulesPermissionsDto008 X
permissions00Y d
)00d e
;00e f
Task22 
<22 
IEnumerable22 
<22 %
RoleModulesPermissionsDto22 2
>222 3
>223 4!
GetModulesPermissions225 J
(22J K
string22K Q
roleId22R X
)22X Y
;22Y Z
}44 
}55 ç

Ñ/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Interfaces/IIdentificationTypeService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $

Interfaces$ .
{ 
public 
	interface &
IIdentificationTypeService ,
{ 
Task 
< !
IdentificationTypeDto "
>" #&
AddIdentificationTypeAsync$ >
(> ?!
IdentificationTypeDto? T
valuesU [
)[ \
;\ ]
Task 
< !
IdentificationTypeDto "
>" #)
UpdateIdentificationTypeAsync$ A
(A B!
IdentificationTypeDtoB W
valuesX ^
)^ _
;_ `
Task 
< 
IEnumerable 
< !
IdentificationTypeDto .
>. /
>/ 0&
GetIdentificationTypeAsync1 K
(K L
)L M
;M N
Task

 
<

 
string

 
>

 )
DeleteIdentificationTypeAsync

 2
(

2 3
int

3 6
value

7 <
)

< =
;

= >
} 
} ∂
Ä/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Interfaces/IDepartmentUnitService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $

Interfaces$ .
{ 
public 
	interface "
IDepartmentUnitService (
{ 
Task 
< !
DepartmentUnitReadDto "
>" #"
AddDepartmentUnitAsync$ :
(: ;#
DepartmentUnitCreateDto; R
valuesS Y
)Y Z
;Z [
Task 
< !
DepartmentUnitReadDto "
>" #%
UpdateDepartmentUnitAsync$ =
(= >#
DepartmentUnitUpdateDto> U
valuesV \
)\ ]
;] ^
Task 
< 
IEnumerable 
< !
DepartmentUnitReadDto .
>. /
>/ 0"
GetDepartmentUnitAsync1 G
(G H
)H I
;I J
Task

 
<

 
IEnumerable

 
<

 !
DepartmentUnitReadDto

 .
>

. /
>

/ 0"
GetDepartmentUnitAsync

1 G
(

G H
int

H K
value

L Q
)

Q R
;

R S
Task 
< !
DepartmentUnitReadDto "
>" #"
GetDepartmentUnitAsync$ :
(: ;
string; A
valueB G
)G H
;H I
Task 
< 
IEnumerable 
< 
UnitReadDto $
>$ %
>% &
GetUnitAsync' 3
(3 4
int4 7
value8 =
)= >
;> ?
Task 
< 
GenericResponseDto 
>   
DeleteDepartmentUnit! 5
(5 6
int6 9
unitId: @
)@ A
;A B
} 
} ¢
y/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Interfaces/IChannelService.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $

Interfaces$ .
{ 
public 
	interface 
IChannelService !
{ 
Task 
< 
ChannelReadDto 
> 
AddChannelAsync ,
(, -
ChannelCreateDto- =
values> D
)D E
;E F
Task 
< 
ChannelReadDto 
> 
UpdateChannelAsync /
(/ 0
ChannelUpdateDto0 @
valuesA G
)G H
;H I
Task 
< 
IEnumerable 
< 
ChannelReadDto '
>' (
>( )
GetChannelAsync* 9
(9 :
): ;
;; <
Task		 
<		 
ChannelReadDto		 
>		 
GetChannelAsync		 ,
(		, -
int		- 0
value		1 6
)		6 7
;		7 8
Task

 
<

 
ChannelReadDto

 
>

 
GetChannelAsync

 ,
(

, -
string

- 3
value

4 9
)

9 :
;

: ;
Task 
< 
string 
> 
DeleteChannelAsync '
(' (
int( +
value, 1
)1 2
;2 3
} 
} ß&
x/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Helpers/PasswordGenerator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Helpers$ +
{ 
public 
class 
PasswordGenerator 
{ 
private		 
static		 
readonly		 
string		  &
	Uppercase		' 0
=		1 2
$str		3 M
;		M N
private

 
static

 
readonly

 
string

  &
	Lowercase

' 0
=

1 2
$str

3 N
;

N O
private 
static 
readonly 
string  &
Digits' -
=. /
$str0 <
;< =
private 
static 
readonly 
string  &
SpecialChars' 3
=4 5
$str6 @
;@ A
private 
static 
readonly 
string  &
AllChars' /
=0 1
	Uppercase2 ;
+< =
	Lowercase> G
+H I
DigitsJ P
+Q R
SpecialCharsS _
;_ `
public 
static 
string %
GenerateTemporaryPassword 6
(6 7
int7 :
length; A
=B C
$numD F
)F G
{ 	
if 
( 
length 
< 
$num 
) 
throw !
new" %
ArgumentException& 7
(7 8
$str8 ]
)] ^
;^ _
var 
rng 
= !
RandomNumberGenerator +
.+ ,
Create, 2
(2 3
)3 4
;4 5
var 
password 
= 
new 
char #
[# $
length$ *
]* +
;+ ,
password 
[ 
$num 
] 
= 
	Uppercase #
[# $
GetRandomNumber$ 3
(3 4
rng4 7
,7 8
	Uppercase9 B
.B C
LengthC I
)I J
]J K
;K L
password 
[ 
$num 
] 
= 
	Lowercase #
[# $
GetRandomNumber$ 3
(3 4
rng4 7
,7 8
	Lowercase9 B
.B C
LengthC I
)I J
]J K
;K L
password 
[ 
$num 
] 
= 
Digits  
[  !
GetRandomNumber! 0
(0 1
rng1 4
,4 5
Digits6 <
.< =
Length= C
)C D
]D E
;E F
password 
[ 
$num 
] 
= 
SpecialChars &
[& '
GetRandomNumber' 6
(6 7
rng7 :
,: ;
SpecialChars< H
.H I
LengthI O
)O P
]P Q
;Q R
for 
( 
int 
i 
= 
$num 
; 
i 
< 
length  &
;& '
i( )
++) +
)+ ,
{ 
password 
[ 
i 
] 
= 
AllChars &
[& '
GetRandomNumber' 6
(6 7
rng7 :
,: ;
AllChars< D
.D E
LengthE K
)K L
]L M
;M N
}   
return## 
new## 
string## 
(## 
password## &
.##& '
OrderBy##' .
(##. /
_##/ 0
=>##1 3
GetRandomNumber##4 C
(##C D
rng##D G
,##G H
length##I O
)##O P
)##P Q
.##Q R
ToArray##R Y
(##Y Z
)##Z [
)##[ \
;##\ ]
}$$ 	
private&& 
static&& 
int&& 
GetRandomNumber&& *
(&&* +!
RandomNumberGenerator&&+ @
rng&&A D
,&&D E
int&&F I
max&&J M
)&&M N
{'' 	
byte(( 
[(( 
](( 
buffer(( 
=(( 
new(( 
byte((  $
[(($ %
$num((% &
]((& '
;((' (
rng)) 
.)) 
GetBytes)) 
()) 
buffer)) 
)))  
;))  !
return** 
buffer** 
[** 
$num** 
]** 
%** 
max** "
;**" #
}++ 	
},, 
}-- Ë

v/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Helpers/NumberGenerator.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Helpers$ +
{ 
public 
static 
class 
NumberGenerator $
{ 
public 
static 
string 
	Generator &
(& '
int' *
length+ 1
)1 2
{ 	
var 

randomizer 
= 
new  

Randomizer! +
(+ ,
length, 2
,2 3
new4 7$
DefaultRandomizerOptions8 P
(P Q

hasNumbersQ [
:[ \
true] a
,a b
hasLowerAlphabetsc t
:t u
falsev {
,{ |
hasUpperAlphabets	} é
:
é è
false
ê ï
,
ï ñ
hasSpecialChars
ó ¶
:
¶ ß
false
® ≠
)
≠ Æ
)
Æ Ø
;
Ø ∞
string 
result 
= 

randomizer &
.& '
Next' +
(+ ,
), -
;- .
return 
result 
; 
} 	
} 
} Ω
t/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Enums/UserAccountType.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Enums$ )
{ 
public 
enum 
UserAccountType 
{ 
Customer		 

=		 
$num		 
,		 
Partners

 

=

 
$num

 
,

 
Staff 
= 	
$num
 
} 
public 

static 
class *
UserAccountTypeEnumDescription 6
{ 
public 
static 
UserAccountType %
UserType& .
(. /
int/ 2
input3 8
)8 9
{ 	
if 
( 
Enum 
. 
	IsDefined 
( 
typeof %
(% &
UserAccountType& 5
)5 6
,6 7
input8 =
)= >
)> ?
{ 
return 
( 
UserAccountType '
)' (
input( -
;- .
} 
else 
{ 
throw 
new 
ArgumentException +
(+ ,
$str, M
)M N
;N O
} 
} 	
}33 
}44 ç
w/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Enums/RegistrationStatus.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Enums$ )
{ 
public 
enum 
RegistrationStatus 
{ 
Pending 	
=
 
$num 
, 
Verified		 
=		 
$num		 
,		 
Approved

 
=

 
$num

 
,

 
	Activated 
= 
$num 
, 
Rejected 
= 
$num 
, 
Disapproved 
= 
$num 
, 
Deactivated 
= 
$num 
, 
} 
public 

static 
class -
!RegistrationStatusEnumDescription 9
{ 
public 
static 
RegistrationStatus ("
RegistrationStatusEnum) ?
(? @
int@ C
inputD I
)I J
{ 	
if 
( 
Enum 
. 
	IsDefined 
( 
typeof %
(% &
RegistrationStatus& 8
)8 9
,9 :
input; @
)@ A
)A B
{ 
return 
( 
RegistrationStatus *
)* +
input+ 0
;0 1
} 
else 
{ 
throw 
new 
ArgumentException +
(+ ,
$str, M
)M N
;N O
} 
} 	
}44 
}77 Ñ*
r/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Enums/ModuleActions.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Enums$ )
{ 
public 
enum 
ModuleActions 
{ 
[ 	
Description	 
( 
$str 
) 
] 
CREATE		 
=		 
$num		 
,		 
[ 	
Description	 
( 
$str 
) 
] 
READ 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
UPDATE 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
DELETE 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
]  
APPROVE 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
VERIFY 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
REJECT 
= 
$num 
, 
[ 	
Description	 
( 
$str !
)! "
]" #

DISAPPROVE 
= 
$num 
, 
[   	
Description  	 
(   
$str   
)    
]    !
ACTIVATE!! 
=!! 
$num!! 
,!! 
[## 	
Description##	 
(## 
$str## !
)##! "
]##" #

DEACTIVATE$$ 
=$$ 
$num$$ 
,$$ 
}%% 
public'' 

static'' 
class'' .
"ClaimsModuleActionsEnumDescription'' :
{(( 
public)) 
static)) 
ModuleActions)) #$
CheckClaimsModuleActions))$ <
())< =
int))= @
input))A F
)))F G
{** 	
if++ 
(++ 
Enum++ 
.++ 
	IsDefined++ 
(++ 
typeof++ %
(++% &
ModuleActions++& 3
)++3 4
,++4 5
input++6 ;
)++; <
)++< =
{,, 
return-- 
(-- 
ModuleActions-- %
)--% &
input--& +
;--+ ,
}.. 
else// 
{00 
throw11 
new11 
ArgumentException11 +
(11+ ,
$str11, O
)11O P
;11P Q
}22 
}33 	
public55 
static55 
List55 
<55 
ModuleActionsDto55 +
>55+ ,"
ToModuleActionsDtoList55- C
(55C D
)55D E
{66 	
return77 
Enum77 
.77 
	GetValues77 !
(77! "
typeof77" (
(77( )
ModuleActions77) 6
)776 7
)777 8
.88 
Cast88 
<88 
ModuleActions88 #
>88# $
(88$ %
)88% &
.99 
Select99 
(99 
action99 
=>99 !
{:: 
var;; 
description;; #
=;;$ %
action;;& ,
.;;, -
GetEnumDescription;;- ?
(;;? @
);;@ A
;;;A B
return<< 
new<< 
ModuleActionsDto<< /
(<</ 0
(<<0 1
int<<1 4
)<<4 5
action<<5 ;
,<<; <
action<<= C
.<<C D
ToString<<D L
(<<L M
)<<M N
)<<N O
;<<O P
}== 
)== 
.>> 
ToList>> 
(>> 
)>> 
;>> 
}?? 	
privateAA 
staticAA 
stringAA 
GetEnumDescriptionAA 0
(AA0 1
thisAA1 5
EnumAA6 :
	enumValueAA; D
)AAD E
{BB 	
varCC 
	fieldInfoCC 
=CC 
	enumValueCC %
.CC% &
GetTypeCC& -
(CC- .
)CC. /
.CC/ 0
GetFieldCC0 8
(CC8 9
	enumValueCC9 B
.CCB C
ToStringCCC K
(CCK L
)CCL M
)CCM N
;CCN O
varDD  
descriptionAttributeDD $
=DD% &
	fieldInfoDD' 0
?DD0 1
.DD1 2
GetCustomAttributesDD2 E
(DDE F
typeofDDF L
(DDL M 
DescriptionAttributeDDM a
)DDa b
,DDb c
falseDDd i
)DDi j
.EE1 2
FirstOrDefaultEE2 @
(EE@ A
)EEA B
asEEC E 
DescriptionAttributeEEF Z
;EEZ [
returnGG  
descriptionAttributeGG '
?GG' (
.GG( )
DescriptionGG) 4
??GG5 7
	enumValueGG8 A
.GGA B
ToStringGGB J
(GGJ K
)GGK L
;GGL M
}HH 	
}LL 
}NN Ø&
p/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Enums/MenuActions.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Enums$ )
{ 
public 
enum 
ClaimsMenuActions 
{ 
[		 	
Description			 
(		 
$str		  
)		  !
]		! "
NoAccess

 
=

 
$num

 
,

 
[ 	
Description	 
( 
$str 
) 
] 
Create 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
Read 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
Update 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
Delete 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
]  
Approve 
= 
$num 
, 
[ 	
Description	 
( 
$str 
) 
] 
Access 
= 
$num 
, 
} 
public!! 

static!! 
class!! ,
 ClaimsMenuActionsEnumDescription!! 8
{"" 
public## 
static## 
ClaimsMenuActions## '"
CheckClaimsMenuActions##( >
(##> ?
int##? B
input##C H
)##H I
{$$ 	
if%% 
(%% 
Enum%% 
.%% 
	IsDefined%% 
(%% 
typeof%% %
(%%% &
ClaimsMenuActions%%& 7
)%%7 8
,%%8 9
input%%: ?
)%%? @
)%%@ A
{&& 
return'' 
('' 
ClaimsMenuActions'' )
)'') *
input''* /
;''/ 0
}(( 
else)) 
{** 
throw++ 
new++ 
ArgumentException++ +
(+++ ,
$str++, M
)++M N
;++N O
},, 
}-- 	
public// 
static// 
List// 
<// 
MenuActionsDto// )
>//) * 
ToMenuActionsDtoList//+ ?
(//? @
)//@ A
{00 	
return11 
Enum11 
.11 
	GetValues11 !
(11! "
typeof11" (
(11( )
ClaimsMenuActions11) :
)11: ;
)11; <
.22 
Cast22 
<22 
ClaimsMenuActions22 '
>22' (
(22( )
)22) *
.33 
Select33 
(33 
action33 
=>33 !
{44 
var55 
description55 #
=55$ %
action55& ,
.55, -
GetEnumDescription55- ?
(55? @
)55@ A
;55A B
return66 
new66 
MenuActionsDto66 -
(66- .
(66. /
int66/ 2
)662 3
action663 9
,669 :
action66; A
.66A B
ToString66B J
(66J K
)66K L
,66L M
description66N Y
)66Y Z
;66Z [
}77 
)77 
.88 
ToList88 
(88 
)88 
;88 
}99 	
private;; 
static;; 
string;; 
GetEnumDescription;; 0
(;;0 1
this;;1 5
Enum;;6 :
	enumValue;;; D
);;D E
{<< 	
var== 
	fieldInfo== 
=== 
	enumValue== %
.==% &
GetType==& -
(==- .
)==. /
.==/ 0
GetField==0 8
(==8 9
	enumValue==9 B
.==B C
ToString==C K
(==K L
)==L M
)==M N
;==N O
var>>  
descriptionAttribute>> $
=>>% &
	fieldInfo>>' 0
?>>0 1
.>>1 2
GetCustomAttributes>>2 E
(>>E F
typeof>>F L
(>>L M 
DescriptionAttribute>>M a
)>>a b
,>>b c
false>>d i
)>>i j
.??1 2
FirstOrDefault??2 @
(??@ A
)??A B
as??C E 
DescriptionAttribute??F Z
;??Z [
returnAA  
descriptionAttributeAA '
?AA' (
.AA( )
DescriptionAA) 4
??AA5 7
	enumValueAA8 A
.AAA B
ToStringAAB J
(AAJ K
)AAK L
;AAL M
}BB 	
}FF 
}GG ˙Y
É/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/UserAccounts/UserInformationDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
UserAccounts) 5
{ 
public 

abstract 
record 
UserInformationDto -
{ 
public 
string 
? 
UserId 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
? 
	FirstName  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
string 
? 

MiddleName !
{" #
get$ '
;' (
set) ,
;, -
}. /
public		 
string		 
?		 
LastName		 
{		  !
get		" %
;		% &
set		' *
;		* +
}		, -
public

 
string

 
?

 
PhoneNumber

 "
{

# $
get

% (
;

( )
set

* -
;

- .
}

/ 0
public 
string 
? 
UserName 
{  !
get" %
;% &
set' *
;* +
}, -
public 
string 
? 
EmailAddress #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
? 
Channel 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
? 
UserType 
{  !
get" %
;% &
set' *
;* +
}, -
public 
bool 
IsFirstTime 
{  !
get" %
;% &
set' *
;* +
}, -
public 
DateTime 
RegistrationDate (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
public 
string 
? 
Status 
{ 
get  #
;# $
set% (
;( )
}* +
} 
; 
public 

record 
userRole 
( 
string !
role" &
)& '
;' (
public 

record &
CustomerUserInformationDto ,
:- .
UserInformationDto/ A
{ 
public 
string 
? 
CustomerCode #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
? 
LastReceiptNumber (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
public 
string 
? 
LastReceiptImage '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
public 
string 
? 
IdentificationType )
{* +
get, /
;/ 0
set1 4
;4 5
}6 7
public 
string 
? &
IdentificationUniqueNumber 1
{2 3
get4 7
;7 8
set9 <
;< =
}> ?
public 
string 
? 
IdentificationImage *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
public   
string   
?   "
IdentificationImageOne   -
{  . /
get  0 3
;  3 4
set  5 8
;  8 9
}  : ;
public!! 
string!! 
?!! 
SelfieImage!! "
{!!# $
get!!% (
;!!( )
set!!* -
;!!- .
}!!/ 0
public"" 
string"" 
?"" 
PassportPicture"" &
{""' (
get"") ,
;"", -
set"". 1
;""1 2
}""3 4
public$$ &
CustomerUserInformationDto$$ )
($$) *#
ApplicationIdentityUser$$* A
user$$B F
,$$F G
string$$H N
identificationType$$O a
,$$a b
string$$c i
channelName$$j u
,$$u v
string$$w }
userType	$$~ Ü
,
$$Ü á
string
$$à é
status
$$è ï
)
$$ï ñ
{%% 	
UserId&& 
=&& 
user&& 
.&& 
Id&& 
;&& 
CustomerCode'' 
='' 
user'' 
.''   
IdentificationNumber''  4
;''4 5
	FirstName(( 
=(( 
user(( 
.(( 
	FirstName(( &
;((& '

MiddleName)) 
=)) 
user)) 
.)) 

MiddleName)) (
;))( )
LastName** 
=** 
user** 
.** 
LastName** $
;**$ %
PhoneNumber++ 
=++ 
user++ 
.++ 
PhoneNumber++ *
;++* +
EmailAddress,, 
=,, 
user,, 
.,,  
Email,,  %
;,,% &
UserName-- 
=-- 
user-- 
.-- 
UserName-- $
;--$ %
LastReceiptNumber.. 
=.. 
user..  $
...$ %
LastReceiptNumber..% 6
;..6 7
LastReceiptImage// 
=// 
user// #
.//# $
LastReceiptImage//$ 4
;//4 5
IdentificationType00 
=00  
identificationType00! 3
;003 4&
IdentificationUniqueNumber11 &
=11' (
user11) -
.11- .&
IdentificationUniqueNumber11. H
;11H I
IdentificationImage22 
=22  !
user22" &
.22& '
IdentificationImage22' :
;22: ;"
IdentificationImageOne33 "
=33# $
user33% )
.33) *"
IdentificationImageOne33* @
;33@ A
SelfieImage44 
=44 
user44 
.44 
SelfieImage44 *
;44* +
PassportPicture55 
=55 
user55 "
.55" #
PassportPicture55# 2
;552 3
Channel66 
=66 
channelName66 !
;66! "
UserType77 
=77 
userType77 
;77  
IsFirstTime88 
=88 
user88 
.88 
IsFirstTime88 *
;88* +
RegistrationDate99 
=99 
user99 #
.99# $
RegistrationDate99$ 4
;994 5
Status:: 
=:: 
status:: 
;:: 
};; 	
}== 
public@@ 

record@@ #
StaffUserInformationDto@@ )
:@@* +
UserInformationDto@@, >
{AA 
publicBB 
stringBB 
?BB %
StaffIdentificationNumberBB 0
{BB1 2
getBB3 6
;BB6 7
setBB8 ;
;BB; <
}BB= >
publicCC 
intCC 
DepartmentIdCC 
{CC  !
getCC" %
;CC% &
setCC' *
;CC* +
}CC, -
publicDD 
stringDD 
?DD 

DepartmentDD !
{DD" #
getDD$ '
;DD' (
setDD) ,
;DD, -
}DD. /
publicEE 
intEE 
UnitIdEE 
{EE 
getEE 
;EE  
setEE! $
;EE$ %
}EE& '
publicFF 
stringFF 
?FF 
UnitFF 
{FF 
getFF !
;FF! "
setFF# &
;FF& '
}FF( )
publicGG 
stringGG 
?GG 
ProfilePictureGG %
{GG& '
getGG( +
;GG+ ,
setGG- 0
;GG0 1
}GG2 3
publicHH 
IListHH 
<HH 
stringHH 
>HH 
?HH 

UsersRolesHH (
{HH) *
getHH+ .
;HH. /
setHH0 3
;HH3 4
}HH5 6
publicII +
PermissionsAccessModulesReadDtoII .
?II. /
AccessPermissionsII0 A
{IIB C
getIID G
;IIG H
setIII L
;IIL M
}IIN O
publicKK #
StaffUserInformationDtoKK &
(KK& '#
ApplicationIdentityUserKK' >
userKK? C
,KKC D
stringKKE K

departmentKKL V
,KKV W
stringKKX ^
unitKK_ c
,KKc d
stringKKe k
channelNameKKl w
,KKw x
stringKKy 
userType
KKÄ à
,
KKà â
string
KKä ê
status
KKë ó
,
KKó ò
IList
KKô û
<
KKû ü
string
KKü •
>
KK• ¶
?
KK¶ ß

usersRoles
KK® ≤
,
KK≤ ≥-
PermissionsAccessModulesReadDto
KK¥ ”
?
KK” ‘
accessPermissions
KK’ Ê
)
KKÊ Á
{LL 	
UserIdMM 
=MM 
userMM 
.MM 
IdMM 
;MM %
StaffIdentificationNumberNN %
=NN& '
userNN( ,
.NN, - 
IdentificationNumberNN- A
;NNA B
DepartmentIdOO 
=OO 
userOO 
.OO  
DepartmentIdOO  ,
;OO, -

DepartmentPP 
=PP 

departmentPP #
;PP# $
UnitIdQQ 
=QQ 
userQQ 
.QQ 
UnitIdQQ  
;QQ  !
UnitRR 
=RR 
unitRR 
;RR 
	FirstNameSS 
=SS 
userSS 
.SS 
	FirstNameSS &
;SS& '

MiddleNameTT 
=TT 
userTT 
.TT 

MiddleNameTT (
;TT( )
LastNameUU 
=UU 
userUU 
.UU 
LastNameUU $
;UU$ %
PhoneNumberVV 
=VV 
userVV 
.VV 
PhoneNumberVV *
;VV* +
EmailAddressWW 
=WW 
userWW 
.WW  
EmailWW  %
;WW% &
UserNameXX 
=XX 
userXX 
.XX 
UserNameXX $
;XX$ %
ProfilePictureYY 
=YY 
userYY !
.YY! "
ProfilePictureYY" 0
;YY0 1
ChannelZZ 
=ZZ 
channelNameZZ !
;ZZ! "
UserType[[ 
=[[ 
userType[[ 
;[[  
IsFirstTime\\ 
=\\ 
user\\ 
.\\ 
IsFirstTime\\ *
;\\* +
RegistrationDate]] 
=]] 
user]] #
.]]# $
RegistrationDate]]$ 4
;]]4 5
Status^^ 
=^^ 
status^^ 
;^^ 

UsersRoles__ 
=__ 

usersRoles__ #
;__# $
AccessPermissions`` 
=`` 
accessPermissions``  1
;``1 2
}bb 	
}dd 
;dd 
}hh ˘
Ä/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/UserAccounts/UserAccountsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
UserAccounts) 5
{ 
public 

record 
LoginResponseDto "
{ 
public		 
bool		 
LoginStatus		 
{		  !
get		" %
;		% &
set		' *
;		* +
}		, -
public

 "
LoginSucessResponseDto

 %
?

% &
successResponse

' 6
{

7 8
get

9 <
;

< =
set

> A
;

A B
}

C D
public !
LoginErrorResponseDto $
?$ %
errorResponse& 3
{4 5
get6 9
;9 :
set; >
;> ?
}@ A
} 
public 

record "
LoginSucessResponseDto (
(( )
)) *
:+ ,
LoginResponse- :
;: ;
public 

record !
LoginErrorResponseDto '
(' (
)( )
:* +
BaseResponse, 8
;8 9
public 

record $
ChangePasswordRequestDto *
(* +
)+ ,
:- .!
ChangePasswordRequest/ D
;D E
public 

record #
ResetPasswordRequestDto )
() *
)* +
:, - 
PasswordResetRequest. B
;B C
} á
Ä/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/UserAccounts/UpdateUsersDtos.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
UserAccounts) 5
{ 
public 
record 
UpdateUserDto 
( 
string 
UserId 
, 
string 
? 

MiddleName 
, 
[		 	
Phone			 
]		 
string

 
?

 
PhoneNumber

 
,

 
string 
? 
ProfilePicture 
) 	
;	 

} ◊
ê/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/UserAccounts/UpdateAccountDetailsResponseDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
UserAccounts) 5
{ 
public 

record +
UpdateAccountDetailsResponseDto 1
{ 
public 
GenericResponseDto !
?! "
error# (
{) *
get+ .
;. /
set0 3
;3 4
}5 6
public 
UserInformationDto !
?! "
success# *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
} 
; 
}

 Å

z/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/UserAccounts/StaffDtos.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
UserAccounts) 5
{ 
public 
record '
StaffRegistrationRequestDto *
(* +
string %
StaffIdentificationNumber (
,( )
int 
DepartmentId 
, 
int		 
UnitId		 
,		 
string

 
	FirstName

 
,

 
string 

MiddleName 
, 
string 
LastName 
, 
[ 	
EmailAddress	 
] 
string 
EmailAddress 
, 
[ 	
EmailAddress	 
] 
string 
UserName 
, 
[ 	
Phone	 
] 
string 
PhoneNumber 
, 
int 
	ChannelId 
, 
string 
? 
ProfilePicture 
) 	
;	 

} ì
Ä/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/UserAccounts/PartnerBankDtos.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
UserAccounts) 5
{ 
public 
record -
!PartnerBankRegistrationRequestDto 0
(0 1
string 
PartnerName 
, 
[ 	
EmailAddress	 
] 
string		 
EmailAddress		 
,		 
[

 	
Phone

	 
]

 
string 
PhoneNumber 
, 
string 
Password 
, 
string 
ConfirmPassword 
, 
string "
ContactPerson_FullName %
,% &
string &
ContactPerson_EmailAddress )
,) *
string %
ContactPerson_PhoneNumber (
,( )
string "
ContactPerson_Position %
) 	
;	 

public 

record &
PartnerBankTokenRequestDto ,
{ 
[ 	
EmailAddress	 
] 
public 
string 
? 
EmailAddress #
{$ %
get& )
;) *
set+ .
;. /
}0 1
} 
; 
public 

record '
PartnerBankLoginResponseDto -
(- .
string. 4
token5 :
): ;
;; <
} Ç
}/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/UserAccounts/CustomerDtos.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
UserAccounts) 5
{ 
public 
record *
CustomerRegistrationRequestDto -
(- .
string 
CustomerCode 
, 
string		 
	FirstName		 
,		 
string

 

MiddleName

 
,

 
string 
LastName 
, 
[ 	
Phone	 
] 
string 
PhoneNumber 
, 
[ 	
EmailAddress	 
] 
string 
EmailAddress 
, 
string 
LastReceiptNumber  
,  !
string 
LastReceiptImage 
,  
int  
IdentificationTypeId  
,  !
string &
IdentificationUniqueNumber )
,) *
string 
IdentificationImage "
," #
string "
IdentificationImageOne %
,% &
string 
? 
SelfieImage 
, 
string 
? 
PassportPicture 
,  
int 
	ChannelId 
)   	
;  	 

}%% í
z/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/TokenStoreDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
{ 
public 
record 
TokenStoreReadDto  
(  !
int! $
TokenStoreId% 1
,1 2
string3 9
MobilePhoneNumber: K
,K L
stringM S
EmailAddressT `
,` a
stringb h
?h i
Tokenj o
,o p
DateTimeq y
CreatedDate	z Ö
,
Ö Ü
DateTime
á è

ExpiryDate
ê ö
,
ö õ
bool
ú †

IsVerified
° ´
,
´ ¨
DateTime
≠ µ
VerifiedDate
∂ ¬
)
¬ √
;
√ ƒ
public 

record 
TokenStoreCreateDto %
(% &
int& )
TokenStoreId* 6
,6 7
string8 >
MobilePhoneNumber? P
,P Q
stringR X
EmailAddressY e
,e f
stringg m
?m n
Tokeno t
,t u
DateTimev ~
CreatedDate	 ä
,
ä ã
DateTime
å î

ExpiryDate
ï ü
,
ü †
bool
° •

IsVerified
¶ ∞
,
∞ ±
DateTime
≤ ∫
VerifiedDate
ª «
,
« »
string
… œ
	CreatedBy
– Ÿ
)
Ÿ ⁄
;
⁄ €
public		 

record		 $
TokenRequestParameterDto		 *
(		* +
string		+ 1
phone_OR_email		2 @
)		@ A
;		A B
public

 

record

 
TokenResponseDto

 "
(

" #
string

# )
response

* 2
)

2 3
;

3 4
public 

record !
VerifyTokenRequestDto '
(' (
string( .
phone_OR_email/ =
,= >
string? E
tokenF K
)K L
;L M
} ì
Ñ/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/RefreshTokenResponseDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
{ 
public 

record "
RefreshTokenRequestDto (
{ 
public 
required 
string 
BearerToken *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
public 
required 
string 
RefreshToken +
{, -
get. 1
;1 2
set3 6
;6 7
}8 9
}		 
public 

record *
RefreshTokenSuccessResponseDto 0
{ 
public 
string	 
? 
UserId 
{ 
get 
; 
set "
;" #
}$ %
public 
string	 
? 
BearerToken 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string	 
? 
RefreshToken 
{ 
get  #
;# $
set% (
;( )
}* +
public 
DateTime	 
? 
	ExpiresAt 
{ 
get "
;" #
set$ '
;' (
}) *
} 
public 

record (
RefreshTokenErrorResponseDto .
:/ 0
BaseResponse1 =
{> ?
}@ A
;A B
public 

class #
RefreshTokenResponseDto (
{ 
public 
bool 
	IsSuccess 
{ 
get  #
;# $
set% (
;( )
}* +
public *
RefreshTokenSuccessResponseDto -
?- .
SuccessResponse/ >
{? @
getA D
;D E
setF I
;I J
}K L
public (
RefreshTokenErrorResponseDto +
?+ ,
ErrorResponse- :
{; <
get= @
;@ A
setB E
;E F
}G H
} 
} â
î/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Permissions/PermissionsAccessModulesDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Permissions2 =
;= >
public 
record '
PermissionsAccessModulesDto )
() *
string* 0
RoleId1 7
,7 8
List9 =
<= >/
#PermissionAccessMenusWithActionsDto> a
>a b$
permissionsAccessModulesc {
){ |
;| }
public 
record +
PermissionsAccessModulesReadDto -
(- .
string. 4
RoleId5 ;
,; <
List= A
<A B3
'PermissionAccessMenusWithActionsReadDtoB i
>i j%
permissionsAccessModules	k É
)
É Ñ
;
Ñ Ö–

ü/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Permissions/PermissionAccessSubMenusWithActionsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Permissions2 =
;= >
public 
record 2
&PermissionAccessSubMenusWithActionsDto 4
(4 5
string5 ;
sectionName< G
,G H!
PermissionsActionsDtoI ^
permissionsActions_ q
,q r
Lists w
<w x7
*PermissionAccessSubMenuItemsWithActionsDto	x ¢
>
¢ £
items
§ ©
)
© ™
;
™ ´
public 
record 6
*PermissionAccessSubMenusWithActionsReadDto 8
(8 9
int9 <
PermissionsId= J
,J K
intL O
SubPermissionsIdP `
,` a
stringb h
sectionNamei t
,t u"
PermissionsActionsDto	v ã 
permissionsActions
å û
,
û ü
List
† §
<
§ •<
.PermissionAccessSubMenuItemsWithActionsReadDto
• ”
>
” ‘
items
’ ⁄
)
⁄ €
;
€ ‹Ù
£/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Permissions/PermissionAccessSubMenuItemsWithActionsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Permissions2 =
;= >
public 
record 6
*PermissionAccessSubMenuItemsWithActionsDto 8
(8 9
string9 ?
ItemName@ H
,H I!
PermissionsActionsDtoJ _
permissionsActions` r
)r s
;s t
public 
record :
.PermissionAccessSubMenuItemsWithActionsReadDto <
(< =
int= @
PermissionsIdA N
,N O
intP S
SubPermissionsIdT d
,d e
intf i!
SubPermissionsItemsIdj 
,	 Ä
string
Å á
ItemName
à ê
,
ê ë#
PermissionsActionsDto
í ß 
permissionsActions
® ∫
)
∫ ª
;
ª ºˇ	
ú/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Permissions/PermissionAccessMenusWithActionsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Permissions2 =
;= >
public 
record /
#PermissionAccessMenusWithActionsDto 1
(1 2
string2 8
menuName9 A
,A B!
PermissionsActionsDtoC X
permissionsActionsY k
,k l
Listm q
<q r3
&PermissionAccessSubMenusWithActionsDto	r ò
>
ò ô
sections
ö ¢
)
¢ £
;
£ §
public 
record 3
'PermissionAccessMenusWithActionsReadDto 5
(5 6
int6 9
PermissionsId: G
,G H
stringI O
menuNameP X
,X Y!
PermissionsActionsDtoZ o
permissionsActions	p Ç
,
Ç É
List
Ñ à
<
à â8
*PermissionAccessSubMenusWithActionsReadDto
â ≥
>
≥ ¥
sections
µ Ω
)
Ω æ
;
æ ø¶!
ô/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Permissions/ApplicationModulesPermissionsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Permissions2 =
{ 
public 
record ,
 ApplicationModulesPermissionsDto /
{ 
[		 	
StringLength			 
(		 
$num		 
)		 
]		 
public

 
string

 
?

 
RoleId

 
{

 
get

  #
;

# $
set

% (
;

( )
}

* +
[ 	
StringLength	 
( 
$num 
) 
] 
public 
string 
? 
ModuleId 
{  !
get" %
;% &
set' *
;* +
}, -
public 
IEnumerable 
< 
ModulePermissions ,
>, -
?- .
ModulePermission/ ?
{@ A
getB E
;E F
setG J
;J K
}L M
} 
public 

record 
ModulePermissions #
{ 
[ 	
StringLength	 
( 
$num 
) 
] 
public 
string 
? 
ModulePermission '
{( )
get* -
;- .
set/ 2
;2 3
}4 5
} 
public 

record 0
$ApplicationModulesPermissionsReadDto 6
{ 
[ 	
StringLength	 
( 
$num 
) 
] 
public 
string 
? 
RoleName 
{  !
get" %
;% &
set' *
;* +
}, -
[   	
StringLength  	 
(   
$num   
)   
]   
public!! 
string!! 
?!! 

ModuleName!! !
{!!" #
get!!$ '
;!!' (
set!!) ,
;!!, -
}!!. /
[## 	
StringLength##	 
(## 
$num## 
)## 
]## 
public$$ 
IEnumerable$$ 
<$$ 
string$$ !
>$$! "
?$$" #
ModulePermission$$$ 4
{$$5 6
get$$7 :
;$$: ;
set$$< ?
;$$? @
}$$A B
}%% 
public(( 

record(( %
RoleModulesPermissionsDto(( +
{)) 
public** 
int** 
ModulePermissionId** %
{**& '
get**( +
;**+ ,
set**- 0
;**0 1
}**2 3
[,, 	
StringLength,,	 
(,, 
$num,, 
),, 
],, 
public-- 
string-- 
?-- 
RoleId-- 
{-- 
get--  #
;--# $
set--% (
;--( )
}--* +
[// 	
StringLength//	 
(// 
$num// 
)// 
]// 
public00 
string00 
?00 
RoleName00 
{00  !
get00" %
;00% &
set00' *
;00* +
}00, -
[22 	
StringLength22	 
(22 
$num22 
)22 
]22 
public33 
string33 
?33 
ModuleId33 
{33  !
get33" %
;33% &
set33' *
;33* +
}33, -
[55 	
StringLength55	 
(55 
$num55 
)55 
]55 
public66 
string66 
?66 

ModuleName66 !
{66" #
get66$ '
;66' (
set66) ,
;66, -
}66. /
public88 
string88 
?88 
ModulePermission88 '
{88( )
get88* -
;88- .
set88/ 2
;882 3
}884 5
}:: 
};; ¢
é/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Permissions/ApplicationModulesDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Permissions2 =
{ 
public 
record !
ApplicationModulesDto $
{ 
[ 	
StringLength	 
( 
$num 
) 
] 
public		 
string		 
?		 
ModuleId		 
{		  !
get		" %
;		% &
set		' *
;		* +
}		, -
[ 	
StringLength	 
( 
$num 
) 
] 
public 
string 
? 

ModuleName !
{" #
get$ '
;' (
set) ,
;, -
}. /
} 
public 

record '
ApplicationModulesCreateDto -
{ 
[ 	
StringLength	 
( 
$num 
) 
] 
public 
string 
? 

ModuleName !
{" #
get$ '
;' (
set) ,
;, -
}. /
} 
} Ã
}/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Menu/SubMenusDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Menu2 6
{ 
public 
record 
SubMenusDto 
( 
int 
menuId %
,% &
int' *
	subMenuId+ 4
,4 5
string6 <
subMenuName= H
,H I
stringJ P
descriptionQ \
,\ ]
bool^ b
IsOpenc i
)i j
;j k
public 

record 
SubMenusCreateDto #
(# $
int$ '
menuId( .
,. /
int0 3
	subMenuId4 =
,= >
string? E
subMenuNameF Q
,Q R
stringS Y
descriptionZ e
,e f
boolg k
IsOpenl r
)r s
;s t
public 

record 
SubMenusUpdateDto #
(# $
int$ '
	subMenuId( 1
,1 2
string3 9
subMenuName: E
,E F
stringG M
descriptionN Y
,Y Z
bool[ _
IsOpen` f
)f g
;g h
public 

record 
SubMenuDeleteDto "
(" #
int# &
	subMenuId' 0
)0 1
;1 2
}		 “
Å/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Menu/SubMenuItemsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Menu2 6
{ 
public 
record 
SubMenuItemsDto 
( 
int "
menuId# )
,) *
int+ .
	subMenuId/ 8
,8 9
int: =
subMenuItemId> K
,K L
stringM S
subMenuItemNameT c
,c d
stringe k
descriptionl w
)w x
;x y
public 

record !
SubMenuItemsCreateDto '
(' (
int( +
menuId, 2
,2 3
int4 7
	subMenuId8 A
,A B
intC F
subMenuItemIdG T
,U V
stringV \
subMenuItemName] l
,l m
stringn t
description	u Ä
)
Ä Å
;
Å Ç
public 

record !
SubMenuItemsUpdateDto '
(' (
int( +
subMenuItemId, 9
,9 :
string; A
subMenuItemNameB Q
,Q R
stringS Y
descriptionZ e
)e f
;f g
public 

record !
SubMenuItemsDeleteDto '
(' (
int( +
subMenuItemId, 9
)9 :
;: ;
}		 ¯
Ñ/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Menu/RoleMenuActionsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Menu2 6
{ 
public 
record 
RoleMenuActionsDto !
(! "
int" %
roleMenuActionId& 6
,6 7
string8 >
roleId? E
,E F
intG J
menuIdK Q
,Q R
intS V
	subMenuIdW `
,` a
intb e
actionIdf n
)n o
;o p
} œ
Ç/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Menu/ModuleActionsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Menu2 6
{ 
public 

record 
ModuleActionsDto "
(" #
int# &
actionId' /
,/ 0
string1 7

actionName8 B
)B C
;C D
} ≤
z/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Menu/MenusDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Menu2 6
;6 7
public 
record 
MenusDto 
( 
int 
menuId !
,! "
string# )
menuName* 2
,2 3
string4 :
description; F
,F G
boolG K
IsOpenL R
)R S
;S T
public 
record 
MenusDeleteDto 
( 
int  
menuId! '
)' (
;( )á
Ä/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Menu/MenuActionsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Menu2 6
{ 
public 

record 
MenuActionsDto  
(  !
int! $
actionId% -
,- .
string/ 5

actionName6 @
,@ A
stringB H
descriptionI T
)T U
;U V
}

 µ
é/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Menu/AccessSubMenusWithActionsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Menu2 6
;6 7
public 
record (
AccessSubMenusWithActionsDto *
(* +
string+ 1
subMenuName2 =
,= >
bool? C
isOpenD J
,J K!
PermissionsActionsDtoL a
permissionsActionsb t
,t u
Listv z
<z {-
 AccessSubMenuItemsWithActionsDto	{ õ
>
õ ú
items
ù ¢
)
¢ £
;
£ §É
í/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Menu/AccessSubMenuItemsWithActionsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Menu2 6
;6 7
public 
record ,
 AccessSubMenuItemsWithActionsDto .
(. /
string/ 5
subMenuItemName6 E
,E F!
PermissionsActionsDtoG \
permissionsActions] o
)o p
;p q“
Ç/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Menu/AccessModulesDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Menu2 6
;6 7
public 
record 
AccessModulesDto 
( 
List #
<# $%
AccessMenusWithActionsDto$ =
>= >
accessModules? L
)L M
;M N´
ã/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/Menu/AccessMenusWithActionsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
.1 2
Menu2 6
;6 7
public 
record %
AccessMenusWithActionsDto '
(' (
string( .
menuName/ 7
,7 8
bool9 =
isOpen> D
,D E!
PermissionsActionsDtoF [
permissionsActions\ n
,n o
Listp t
<t u)
AccessSubMenusWithActionsDto	u ë
>
ë í
sections
ì õ
)
õ ú
;
ú ùé
/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/JwTokenResponseDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
{ 
public 
record 
JwTokenResponseDto !
{ 
public 
string 
? 
Token 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
? 
UserType 
{  !
get" %
;% &
set' *
;* +
}, -
}		 
}

 »
Ç/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/IdentificationTypeDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
{ 
public 

record !
IdentificationTypeDto '
(' (
int( + 
identificationTypeId, @
,@ A
stringB H
identificationTypesI \
)\ ]
;] ^
} Ë
~/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/DepartmentUnitDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
{ 
public 
record !
DepartmentUnitReadDto $
($ %
int% (
DepartmentId) 5
,5 6
int7 :
UnitId; A
,A B
stringC I
UnitNameJ R
)R S
;S T
public 

record #
DepartmentUnitCreateDto )
() *
int* -
DepartmentId. :
,: ;
int< ?
UnitId@ F
,F G
stringH N
UnitNameO W
,W X
stringY _
	CreatedBy` i
)i j
;j k
public 

record #
DepartmentUnitUpdateDto )
() *
int* -
DepartmentId. :
,: ;
int< ?
UnitId@ F
,F G
stringH N
UnitNameO W
,W X
stringY _

ModifiedBy` j
)j k
;k l
public 

record #
DepartmentUnitDeleteDto )
() *
int* -
UnitId. 4
)4 5
;5 6
public

 

record

 
UnitReadDto

 
(

 
int

 !
UnitId

" (
,

( )
string

* 0
UnitName

1 9
)

9 :
;

: ;
} Ñ

z/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/DepartmentDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
{ 
public 
record 
DepartmentReadDto  
(  !
int! $
DepartmentId% 1
,1 2
string3 9
DepartmentName: H
)H I
;I J
public 

record 
DepartmentCreateDto %
(% &
int& )
DepartmentId* 6
,6 7
string8 >
DepartmentName? M
,M N
stringO U
	CreatedByV _
)_ `
;` a
public 

record 
DepartmentUpdateDto %
(% &
int& )
DepartmentId* 6
,6 7
string8 >
DepartmentName? M
,M N
stringO U

ModifiedByV `
)` a
;a b
public 

record 
DepartmentDeleteDto %
(% &
int& )
DepartmentId* 6
)6 7
;7 8
}		 ·	
x/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Entities/ChannelsDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Entities) 1
{ 
public 

record 
ChannelReadDto  
(  !
int! $
	ChannelId% .
,. /
string0 6
ChannelName7 B
)B C
;C D
public 

record 
ChannelCreateDto "
(" #
int# &
	ChannelId' 0
,0 1
string2 8
ChannelName9 D
,D E
stringF L
	CreatedByM V
)V W
;W X
public 

record 
ChannelUpdateDto "
(" #
int# &
	ChannelId' 0
,0 1
string2 8
ChannelName9 D
,D E
stringF L

ModifiedByM W
)W X
;X Y
public 

record 
ChannelDeleteDto "
(" #
int# &
	ChannelId' 0
)0 1
;1 2
}		 ƒ
á/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Administration/VerifyUserAccountDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Administration) 7
;7 8
public 
record  
VerifyUserAccountDto "
(" #
string# )
UserId* 0
,0 1
string2 8

verifiedBy9 C
)C D
;D E
public 
record  
RejectUserAccountDto "
(" #
string# )
UserId* 0
,0 1
string2 8

RejectedBy9 C
,C D
stringE K
RejectedReasonsL [
)[ \
;\ ]
public 
record 2
&CustomerVerificationSuccessResponseDto 4
:5 6
BaseResponse7 C
{D E
}F G
;G H
public 
record 0
$CustomerVerificationErrorResponseDto 2
:3 4
BaseResponse5 A
{B C
}D E
;E F
public

 
record

 /
#CustomerRejectionSuccessResponseDto

 1
:

2 3
BaseResponse

4 @
{

A B
}

C D
;

D E
public 
record -
!CustomerRejectionErrorResponseDto /
:0 1
BaseResponse2 >
{? @
}A B
;B C
public 
class +
CustomerVerificationResponseDto ,
{ 
public 

bool 
	IsSuccess 
{ 
get 
;  
set! $
;$ %
}& '
public 
2
&CustomerVerificationSuccessResponseDto 1
?1 2
SuccessResponse3 B
{C D
getE H
;H I
setJ M
;M N
}O P
public 
0
$CustomerVerificationErrorResponseDto /
?/ 0
ErrorResponse1 >
{? @
getA D
;D E
setF I
;I J
}K L
} 
public 
class (
CustomerRejectionResponseDto )
{ 
public 

bool 
	IsSuccess 
{ 
get 
;  
set! $
;$ %
}& '
public 
/
#CustomerRejectionSuccessResponseDto .
?. /
SuccessResponse0 ?
{@ A
getB E
;E F
setG J
;J K
}L M
public 
-
!CustomerRejectionErrorResponseDto ,
?, -
ErrorResponse. ;
{< =
get> A
;A B
setC F
;F G
}H I
} 
Ä/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Administration/UsersRolesDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Administration) 7
{ 
public 
record 
UsersRolesDto 
( 
) 
; 
public 

record 
AssignUserRoleDto #
(# $
string$ *
EmailAddress+ 7
,7 8
string9 ?
RoleName@ H
)H I
;I J
public 

record  
UsersAndRolesReadDto &
(& '
string' -
userId. 4
,4 5
string6 <
userName= E
,E F
stringG M
roleIdN T
,T U
stringV \
roleName] e
)e f
;f g
}		 ﬁ
{/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Administration/RolesDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Administration) 7
{ 
public 
record 
RolesDto 
( 
string 
RoleId %
,% &
string' -
RoleName. 6
,6 7
string8 >
	CreatedBy? H
,H I
DateTimeJ R
	CreatedOnS \
,\ ]
string^ d

ApprovedBye o
,o p
DateTimeq y

ApprovedOn	z Ñ
,
Ñ Ö
string
Ü å
Status
ç ì
)
ì î
;
î ï
public 

record 
RolesCreateDto  
(  !
string! '
RoleName( 0
,0 1
string2 8
	CreatedBy9 B
)B C
;C D
public 

record 
RolesUpdateDto  
(  !
string! '
RoleId( .
,. /
string0 6
RoleName7 ?
,? @
stringA G

ModifiedByH R
)R S
;S T
public 

record 
RolesDeleteDto  
(  !
string! '
RoleId( .
,. /
string0 6
	DeletedBy7 @
)@ A
;A B
public		 

record		 
RolesApprovalDto		 "
(		" #
string		# )
RoleId		* 0
,		0 1
string		2 8

ApprovedBy		9 C
)		C D
;		D E
} ú
à/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Administration/ApproveUserAccountDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Administration) 7
{ 
public 
record !
ApproveUserAccountDto $
($ %
string% +
RoleId, 2
,2 3
string4 :
UserId; A
,A B
stringC I

ApprovedByJ T
)T U
;U V
public 

record %
DisapprovedUserAccountDto +
(+ ,
string, 2
UserId3 9
,9 :
string; A
DisapprovedByB O
,O P
stringQ W
DisapprovedReasonsX j
)j k
;k l
} ¥

â/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Administration/AdministrationStaffDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Administration) 7
{ 
public 

record "
AdministrationStaffDto (
( 
string 
? 
UserId 
, 
string 
?  
IdentificationNumber $
,$ %
string		 
?		 
	FirstName		 
,		 
string

 
?

 

MiddleName

 
,

 
string 
? 
LastName 
, 
string 
? 
DepartmentName 
,  
string 
? 
UnitName 
, 
string 
? 
EmailAddress 
, 
string 
? 
PhoneNumber 
, 
string 
? 
RoleName 
, 
string 
Status 
, 
DateTime 
RegistrationDate !
) 
; 
} ç
å/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Administration/AdministrationPartnersDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Administration) 7
{ 
public 

record %
AdministrationPartnersDto +
( 
string 
UserId 
, 
string		 
PartnerName		 
,		 
string

 
EmailAddress

 
,

 
string 
PhoneNumber 
, 
string 
ContactPerson 
, 
string %
ContactPersonEmailAddress (
,( )
string $
ContactPersonPhoneNumber '
,' (
DateTime 
RegistrationDate !
,! "
string 
Status 
) 
; 
} ∫
å/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Administration/AdministrationCustomerDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Administration) 7
{ 
public 

record %
AdministrationCustomerDto +
( 
string 
UserId 
, 
string  
IdentificationNumber #
,# $
string		 
CustomerName		 
,		 
string

 
EmailAddress

 
,

 
string 
PhoneNumber 
, 
DateTime 
RegistrationDate !
,! "
string 
Channel 
, 
string 
Status 
) 
; 
} Á
â/Users/imac5k/Projects/PropertyManagementSolution/pms-api/Modules/Modules.Users.Application/Dtos/Administration/ActivateUserAccountDto.cs
	namespace 	
Modules
 
. 
Users 
. 
Application #
.# $
Dtos$ (
.( )
Administration) 7
{ 
public 
record "
ActivateUserAccountDto %
(% &
string& ,
UserId- 3
,3 4
string5 ;
activatedBy< G
)G H
;H I
public 

record $
DeactivateUserAccountDto *
(* +
string+ 1
UserId2 8
,8 9
string: @
DeactivatedByA N
,N O
stringP V
DeactivatedReasonsW i
)i j
;j k
} 