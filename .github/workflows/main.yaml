name: Build, Test, Publish and Deploy to SmarterASP.NET

on:
  push:
    branches:
      - develop
      - staging
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build_and_deploy:
    name: Build, Test, Publish and Deploy
    runs-on: windows-latest
    
    env:
      ENV_SUFFIX: ${{ github.ref == 'refs/heads/develop' && 'dev' || 'staging' }}
      DB_CONNECTION_STRING: ${{ github.ref == 'refs/heads/develop' && secrets.DB_CONNECTION_STRING_DEV || secrets.DB_CONNECTION_STRING_STAGING }}
      ASPNETCORE_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'Production' || github.ref == 'refs/heads/staging' && 'Staging' || 'Development' }}

    steps:
      - name: Set up JDK 17
        if: >
          (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/develop')) ||
          (github.event_name == 'pull_request' && github.base_ref == 'develop')
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones are disabled to ensure the full history is available for code analysis and SonarQube scanning
      
      - name: Cache SonarQube Cloud packages
        if: >
          (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/develop')) ||
          (github.event_name == 'pull_request' && github.base_ref == 'develop')
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarQube Cloud scanner
        if: >
          (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/develop')) ||
          (github.event_name == 'pull_request' && github.base_ref == 'develop')
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: >
          ((github.event_name == 'push' && startsWith(github.ref, 'refs/heads/develop')) ||
          (github.event_name == 'pull_request' && github.base_ref == 'develop')) &&
          steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        if: >
          (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/develop')) ||
          (github.event_name == 'pull_request' && github.base_ref == 'develop')
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"MindSpringsGhana_pms-api" /o:"mindspringsghana" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Configure Environment Settings
        shell: pwsh
        run: |
          Write-Host "Setting ASPNETCORE_ENVIRONMENT to: $env:ASPNETCORE_ENVIRONMENT"
          
          # Update all launchSettings.json files
          Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter "launchSettings.json" | ForEach-Object {
            Write-Host "Updating settings file: $($_.FullName)"
            
            $content = Get-Content $_.FullName -Raw | ConvertFrom-Json
            
            # Update all profiles that have ASPNETCORE_ENVIRONMENT
            $content.profiles.PSObject.Properties | ForEach-Object {
              if ($_.Value.PSObject.Properties['environmentVariables'] -and 
                  $_.Value.environmentVariables.PSObject.Properties['ASPNETCORE_ENVIRONMENT']) {
                $_.Value.environmentVariables.ASPNETCORE_ENVIRONMENT = $env:ASPNETCORE_ENVIRONMENT
              }
            }
            
            $content | ConvertTo-Json -Depth 10 | Set-Content $_.FullName
          }

      - name: Configure Application Settings
        shell: pwsh
        run: |
          # Find appsettings.tpl.json in root
          $settingsFile = Get-ChildItem -Path ${{ github.workspace }} -Filter "appsettings.tpl.json" -Recurse | Select-Object -First 1
          
          if (-not $settingsFile) {
            Write-Error "Could not find appsettings.tpl.json in repository"
            exit 1
          }
          
          Write-Host "Found settings file at: $($settingsFile.FullName)"
          
          # Process the template file
          $template = Get-Content $settingsFile.FullName -Raw | ConvertFrom-Json
          
          # Update connection strings
          $template.ConnectionStrings.MsSQLConnection_LocalHost = '${{ env.DB_CONNECTION_STRING }}'
          $template.ConnectionStrings.MsSQLConnection = '${{ env.DB_CONNECTION_STRING }}'
          $template.ConnectionStrings.MsSQLConnection_Staging = '${{ env.DB_CONNECTION_STRING }}'
          $template.ConnectionStrings.MsSQLConnection_Production = '${{ env.DB_CONNECTION_STRING }}'
          
          # Update JWT token
          $template.JwTokenKey.TokenKey = '${{ secrets.TOKEN_KEY }}'
          
          # Update O365 Mail Settings
          $o365Secrets = @{
            'HOST' = '${{ secrets.O356MAILSENDER_HOST }}'
            'PORT' = '${{ secrets.O356MAILSENDER_PORT }}'
            'ENABLESSL' = '${{ secrets.O356MAILSENDER_ENABLESSL }}'
            'USERNAME' = '${{ secrets.O356MAILSENDER_USERNAME }}'
            'PASSWORD' = '${{ secrets.O356MAILSENDER_PASSWORD }}'
          }
          
          $template.O356mailSender.PSObject.Properties.Name | ForEach-Object {
            $newName = $_ -replace 'O356mailSender_',''
            Add-Member -InputObject $template.O356mailSender -MemberType NoteProperty -Name $newName -Value $o365Secrets[$newName.ToUpper()] -Force
            $template.O356mailSender.PSObject.Properties.Remove($_)
          }
          
          # Update Gmail Settings
          $gmailSecrets = @{
            'HOST' = '${{ secrets.GMAILSENDER_HOST }}'
            'PORT' = '${{ secrets.GMAILSENDER_PORT }}'
            'ENABLESSL' = '${{ secrets.GMAILSENDER_ENABLESSL }}'
            'USERNAME' = '${{ secrets.GMAILSENDER_USERNAME }}'
            'PASSWORD' = '${{ secrets.GMAILSENDER_PASSWORD }}'
          }
          
          $template.GmailSender.PSObject.Properties.Name | ForEach-Object {
            $newName = $_ -replace 'GmailSender_',''
            Add-Member -InputObject $template.GmailSender -MemberType NoteProperty -Name $newName -Value $gmailSecrets[$newName.ToUpper()] -Force
            $template.GmailSender.PSObject.Properties.Remove($_)
          }
          
          # Update mNotify Settings
          $mNotifySecrets = @{
            'BASEURL' = '${{ secrets.MNOTIFYSMS_BASEURL }}'
            'USERKEY' = '${{ secrets.MNOTIFYSMS_USERKEY }}'
            'SENDERID' = '${{ secrets.MNOTIFYSMS_SENDERID }}'
          }
          
          $template.mNotifySMS.PSObject.Properties.Name | ForEach-Object {
            $newName = $_ -replace 'mNotifySMS_',''
            Add-Member -InputObject $template.mNotifySMS -MemberType NoteProperty -Name $newName -Value $mNotifySecrets[$newName.ToUpper()] -Force
            $template.mNotifySMS.PSObject.Properties.Remove($_)
          }
          
          # Update BecSMS Settings
          $becSmsSecrets = @{
            'BASEURL' = '${{ secrets.BECSMS_BASEURL }}'
            'APIKEY' = '${{ secrets.BECSMS_APIKEY }}'
            'SENDERID' = '${{ secrets.BECSMS_SENDERID }}'
          }
          
          $template.becsms.PSObject.Properties.Name | ForEach-Object {
            $newName = $_ -replace 'becsms_',''
            Add-Member -InputObject $template.becsms -MemberType NoteProperty -Name $newName -Value $becSmsSecrets[$newName.ToUpper()] -Force
            $template.becsms.PSObject.Properties.Remove($_)
          }
          
          # Update ModuleUrl BaseUrl based on branch
          $template.ModuleUrl.BaseUrl = if ($env:GITHUB_REF -eq 'refs/heads/develop') {
            '${{ secrets.BASEURL_DEV }}'
          } elseif ($env:GITHUB_REF -eq 'refs/heads/staging') {
            '${{ secrets.BASEURL_STAGING }}'
          } else {
            '${{ secrets.BASEURL_PROD }}'
          }
          
          # Save as appsettings.json in the same directory as template
          $outputPath = Join-Path $settingsFile.DirectoryName "appsettings.json"
          $template | ConvertTo-Json -Depth 10 | Set-Content $outputPath
          Write-Host "Created appsettings.json at: $outputPath"

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0
      
      - name: Install EF Core tools and dependencies
        run: |
          # Install EF Core tools globally
          dotnet tool install --global dotnet-ef --version 8.0.11
            
          cd ${{ github.workspace }}
            
          # Get all .csproj files once
          $projects = Get-ChildItem -Recurse -Filter "*.csproj"
          Write-Host "Found projects:"
          $projects | ForEach-Object { Write-Host $_.FullName }
  
          # Get all unique package references from all projects
          $packages = $projects | 
            Select-String -Pattern "<PackageReference Include=`"(.*?)`" Version=`"(.*?)`"" | 
            ForEach-Object { 
              [PSCustomObject]@{
                Package = $_.Matches.Groups[1].Value
                Version = $_.Matches.Groups[2].Value
              }
            } | Sort-Object Package -Unique
  
          # Install each unique package in main project
          foreach ($package in $packages) {
            Write-Host "Installing $($package.Package) version $($package.Version)"
            dotnet add PMS.Presentation/PMS.Presentation.csproj package $($package.Package) --version $($package.Version)
          }
        shell: pwsh
          
      - name: Build and Test
        working-directory: PMS.Presentation
        run: |
          dotnet restore
          dotnet build --configuration Release
          dotnet test --no-restore

      - name: Publish
        if: >
          github.event_name == 'push'
        working-directory: PMS.Presentation
        run: dotnet publish ./PMS.Presentation.csproj -c Release -o ./publish-output /p:GenerateDocumentationFile=true

      - name: Database Migration Dry Run
        if: >
          github.event_name == 'pull_request'
        run: |
          $contexts = @(
            "Modules.Estates.Infrastructure.ApplicationDbContext",
            "Modules.Finance.Infrastructure.Data.FinanceDbContext",
            "Modules.Users.Infrastructure.UserDbContext",
            "Modules.Notification.Infrastructure.NotificationDbContext",
            "Modules.Customers.Infrastructure.Persistence.ApplicationDBContext"
          )
          foreach ($context in $contexts) {
            try {
              Write-Host "Generating migration script for context: $context"
              dotnet ef migrations script `
                --context "$context" `
                --project PMS.Presentation/PMS.Presentation.csproj `
                --configuration Release `
                --idempotent `
                --no-transactions `
                --output "./migration-script-$context.sql"
            }
            catch {
              Write-Host "Error generating migration script for context: $context"
              Write-Host $_.Exception.Message
              continue
            }
          }
        shell: pwsh
        continue-on-error: true

      - name: Update All Databases  
        if: >
          github.event_name == 'push'
        run: |
          # Define DbContext classes
          $contexts = @(
            "Modules.Estates.Infrastructure.ApplicationDbContext",
            "Modules.Finance.Infrastructure.Data.FinanceDbContext",
            "Modules.Users.Infrastructure.UserDbContext",
            "Modules.Notification.Infrastructure.NotificationDbContext",
            "Modules.Customers.Infrastructure.Persistence.ApplicationDBContext"
          )

          foreach ($context in $contexts) {
            try {
              Write-Host "Updating database for context: $context"
              dotnet ef database update `
                --context "$context" `
                --project PMS.Presentation/PMS.Presentation.csproj `
                --configuration Release `
                --connection "${{ env.DB_CONNECTION_STRING }}" `
                --verbose
            }
            catch {
              Write-Host "Error updating database for context: $context"
              Write-Host $_.Exception.Message
              continue
            }
          }
        shell: pwsh
        env:
          DOTNET_ROOT: C:\Program Files\dotnet

      - name: Deploy to SmarterASP.net
        if: >
          github.event_name == 'push'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.SERVER_COMPUTER_NAME }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          local-dir: './PMS.Presentation/publish-output/'
          server-dir: '/pms-api-${{ env.ENV_SUFFIX }}/'